"use strict";(self.webpackChunkone_piece=self.webpackChunkone_piece||[]).push([[580],{7708:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},9899:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>P,data:()=>C});var t=a(4754);const e=a.p+"assets/img/image-20240410151226-wmkm2l9.7d844770.png",p=a.p+"assets/img/image-20240410152655-vz05lwb.705f74ec.png",o=(0,t.Lk)("h2",{id:"什么是内省",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#什么是内省"},[(0,t.Lk)("span",null,"什么是内省")])],-1),c=(0,t.Lk)("h3",{id:"计算机科学中的内省",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#计算机科学中的内省"},[(0,t.Lk)("span",null,"计算机科学中的内省")])],-1),l={href:"https://zh.wikipedia.org/wiki/%E5%86%85%E7%9C%81_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)",target:"_blank",rel:"noopener noreferrer"},i=(0,t.Lk)("strong",null,"​",-1),u=(0,t.Lk)("p",null,[(0,t.eW)("不应该将内省和反射混淆。相对于内省，"),(0,t.Lk)("strong",null,"反射更进一步，是指计算机程序在运行时（Runtime）可以访问、检测和"),(0,t.eW)("​"),(0,t.Lk)("strong",null,"修改****它本身状态或行为的一种能力。"),(0,t.eW)(" 一些编程语言比如 Java 具有反射特性，而 C++ 不具有反射特性只具有内省特性。")],-1),r=(0,t.Lk)("h3",{id:"java-中的内省",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#java-中的内省"},[(0,t.Lk)("span",null,"Java 中的内省")])],-1),k={href:"https://www.oracle.com/java/technologies/javase/javabeans-spec.html",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Lk)("code",null,"getter",-1),v=(0,t.Lk)("code",null,"setter",-1),m=(0,t.Lk)("strong",null,"专门对 JavaBean 成员进行访问的技术",-1),b=(0,t.Fv)('<p>内省/自省机制(Introspector)：<strong>是 Java 语言对 JavaBean 类属性、事件的一种缺省处理方法。</strong></p><hr><p>例如类 A 中有属性 name，那我们可以通过 getName,setName 来得到其值或者设置新的值。通过 <code>getName/setName</code>​ 来访问 name 属性，这就是默认的规则。Java 中提供了一套 API 用来访问某个属性的 <code>getter/setter</code>​ 方法，通过这些 API 可以使你不需要了解这个规则（但你最好还是要搞清楚），这些 API 存放于包 java.beans 中。</p><p>一般的做法是通过类 <code>Introspector</code>​ 来获取某个对象的 BeanInfo 信息，然后通过 BeanInfo 来获取属性的描述器（PropertyDescriptor），通过这个属性描述器就可以获取某个属性对应的 <code>getter/setter</code>​ 方法，然后我们就可以通过反射机制来调用这些方法。</p><hr><p><strong>【内省和反射的区别】</strong></p><p>自省就是面向对象的语言所写的程序在运行时，能够知道对象的类型。简单来说就是在程序运行过程中能知道对象类型（还有属性等）的能力。一个类该做哪些事情由这个类本身就决定了，而非外部调用者。</p><p><strong>内省机制是通过反射来实现的，内省可以算是对反射的扩充。</strong></p><p>自省是获取对象类型的能力，而反射是操纵对象的值，元数据，属性或函数的能力。</p><p>比如一个类只有 get 和 set 方法，那么明显这个类的主要任务就是封装数据，则把这个类传入对应内省构造器中，无须你在挨个 set。</p><ol><li><strong><mark>反射针对的是任何类、任何对象、而内省只是针对 JavaBean。内省通过反射来操作 JavaBean 的属性。</mark></strong></li><li>内省设置属性值肯定<strong>调用</strong> setter 方法、而反射则不一定 (Field 对象)</li><li>反射就像是镜子、能看到对象的所有、是客观事实。内省更像是主观判断、比如看到 <code>getClass()</code>​、内省就会认为这个类中有 class 字段、但事实上则不一定。</li></ol><h2 id="内省机制" tabindex="-1"><a class="header-anchor" href="#内省机制"><span>内省机制</span></a></h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><p>用于查看和操作 JavaBean 中的属性：就是对象自身提供可以查看自身属性、方法、类型的手段。</p><ol><li>获取 JavaBean 中的每一个属性名/属性类型</li><li>通过 getter 方法获取属性值，通过 setter 方法给属性设置值</li></ol><h3 id="几个核心类" tabindex="-1"><a class="header-anchor" href="#几个核心类"><span>几个核心类</span></a></h3><p>内省机制中使用到的核心几个类，列举几个常用方法，具体查看 API。</p><ol><li><strong>java.beans.Introspector 类</strong></li></ol><p>Introspector 相当于一个工具类，提供了一种标准的工具来了解目标 JavaBean 支持的属性，事件和方法，即一系列取得 Bean 信息的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">getBeanInfo</span><span class="token punctuation">(</span><span class="token class-name">Class</span> beanClass<span class="token punctuation">)</span>\n<span class="token comment">// 内省 JavaBean 并了解其所有属性，暴露的方法和事件。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>java.beans.BeanInfo 接口</strong></li></ol><p>BeanInfo 接口是对一个 Bean 的描述，可以通过它取得 Bean 内部的信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">getEventSetDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 返回 bean 定义，此 bean 触发的事件类型的事件描述符。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>java.beans.PropertyDescriptor 类</strong></li></ol><p>PropertyDescriptor 类是对一个 JavaBean 属性的描述，通过属性描述符我们能知道这个属性的类型，获取到操纵属性的方法（getter/setter/...）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 返回属性的 Java 类型信息，获得属性的 Class 对象</span>\n\n<span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 获得用于读取属性值的方法</span>\n\n<span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 获得用于写入属性值的方法</span>\n\n<span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 获取对象的哈希值</span>\n\n<span class="token function">setReadMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> readMethod<span class="token punctuation">)</span>\n<span class="token comment">// 设置用于读取属性值的方法</span>\n\n<span class="token function">setWriteMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> writeMethod<span class="token punctuation">)</span>\n<span class="token comment">// 设置用于写入属性值的方法。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>java.beans.FeatureDescriptor 类</strong></li></ol><p>FeatureDescriptor 类是 <code>PropertyDescriptor</code>​，<code>EventSetDescriptor</code>​ 和 <code>MethodDescriptor</code>​ 等的常见基类 (父类)。</p><p>它支持一些可以为任何内省描述符设置和检索的常见信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 获取此功能的方法名称。</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h3><h4 id="通过内省机制获取-javabean-属性值和属性设值" tabindex="-1"><a class="header-anchor" href="#通过内省机制获取-javabean-属性值和属性设值"><span>通过内省机制获取 JavaBean 属性值和属性设值</span></a></h4><p><strong>【User Class】</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> account<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// getter, setter 方法</span>\n    <span class="token comment">// ...</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;Id = &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>\n                <span class="token string">&quot;, Name = &quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span>\n                <span class="token string">&quot;, Age = &quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>\n                <span class="token string">&quot;, Account = &quot;</span> <span class="token operator">+</span> account <span class="token operator">+</span>\n                <span class="token string">&quot;};&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【Test Class】</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeanInfo</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Introspector</span></span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">PropertyDescriptor</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testIntrospector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">111L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 获取 JavaBean 的描述对象 BeanInfo</span>\n        <span class="token comment">// BeanInfo beanInfo = Introspector.getBeanInfo(User.class); // 包含父类的，比如：getClass()</span>\n        <span class="token class-name">BeanInfo</span> beanInfo <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不包含父类的</span>\n        <span class="token comment">// 获取 JavaBean 中所有属性的描述器对象 PropertyDescriptor</span>\n        <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> beanInfo<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 获取当前属性的名称</span>\n            <span class="token class-name">String</span> name <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 调用 getter 方法，获取属性值</span>\n                <span class="token class-name">Object</span> value <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 111</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment">// 获取当前属性的数据类型</span>\n                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> propertyType <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>propertyType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class java.lang.String</span>\n                <span class="token comment">// 调用 setter 方法，设置属性值</span>\n                pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token string">&quot;香香&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User{id = 111, username = 香香, age = 17, account = null}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token function">testIntrospector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+e+'" alt="image" loading="lazy">​</p><h4 id="javabean-与-map-之间的相互转换" tabindex="-1"><a class="header-anchor" href="#javabean-与-map-之间的相互转换"><span>JavaBean 与 Map 之间的相互转换</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// JavaBean 对象转 Map&lt;String,Object&gt;</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">bean2map</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BeanInfo</span> beanInfo <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> beanInfo<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Object</span> value <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> map<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Map&lt;String,Object&gt; 转 JavaBean 对象</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">map2bean</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">T</span> t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">BeanInfo</span> beanInfo <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> beanInfo<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Object</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> t<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;赵云&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token function">bean2map</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {id=null, account=null, age=18, username=赵云}</span>\n\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;account&quot;</span><span class="token punctuation">,</span><span class="token number">8888L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userClass <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n    <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token function">map2bean</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> userClass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// User{Id = null, Name = 赵云, Age = 18, Account = 8888};</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+p+'" alt="image" loading="lazy">​</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2>',41),g=(0,t.Lk)("p",null,[(0,t.eW)("使用内省机制对 JavaBean 属性进行操作还是很复杂的，一些第三方组织封装了某些工具类来方便开发者使用，如："),(0,t.Lk)("code",null,"org.apache.commons.beanutils.BeanUtils"),(0,t.eW)("​ 是 apache 封装的工具类，用来解决使用内省机制繁琐的问题，包含了挺多方法。")],-1),h={href:"http://commons.apache.org/beanutils/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://commons.apache.org/logging/",target:"_blank",rel:"noopener noreferrer"},y=(0,t.Lk)("li",null,[(0,t.Lk)("p",null,"将 Java 的反射以及内省应用到程序设计中去可以大大的提供程序的智能化和可扩展性。有很多项目或者框架都是采取这两种技术来实现其核心功能。比如 Struts2，SpringMVC。"),(0,t.Lk)("p",null,"这些框架只要在. action 中，或者 controller 方法的形参处，引入 JavaBean 就可以实例化这个 JavaBean 的值，并且可以获得表单提交的数据，那么它究竟是怎么得到的呢？"),(0,t.Lk)("p",null,[(0,t.eW)("其实就是 "),(0,t.Lk)("code",null,"request.getParameterMap()"),(0,t.eW)("​ 获取得到表单提交来的所有键值对，只不过框架内部封装了，"),(0,t.Lk)("strong",null,"然后框架内部利用内省，将数据封装到 JavaBean 中"),(0,t.eW)("。")])],-1),w=(0,t.Lk)("li",null,[(0,t.Lk)("p",null,"Java 的反射以及内省机制重点掌握，查阅框架源码时多加留意，理解其中的设计重构封装等思想。")],-1),j=(0,t.Lk)("h2",{id:"前人栽树",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#前人栽树"},[(0,t.Lk)("span",null,"前人栽树")])],-1),I={href:"https://www.cnblogs.com/jiading/articles/12486921.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.cnblogs.com/peida/archive/2013/06/03/3090842.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680",target:"_blank",rel:"noopener noreferrer"},B={href:"https://mp.weixin.qq.com/s/7Z4xdRtzsc3gek12PwqKTA",target:"_blank",rel:"noopener noreferrer"},E={},P=(0,a(7708).A)(E,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[o,c,(0,t.Lk)("p",null,[(0,t.eW)("在计算机科学中，"),(0,t.Lk)("strong",null,[(0,t.Lk)("a",l,[(0,t.eW)("内省"),(0,t.bF)(a)]),i,(0,t.eW)('是指计算机程序在运行时（Runtime）检查对象（Object）类型的一种能力，通常也可以称作“运行时类型检查"。')]),(0,t.eW)(" 一些编程语言如 C++、Java、Ruby、PHP、Objective-C、Perl 等等具有这种特性。")]),u,r,(0,t.Lk)("p",null,[(0,t.eW)("Java 中的反射机制是通过名称得到类的方法和对象的成份，对于一切 Java 类都是适用的，但是有时候使用起来比较麻烦。而 JavaBean 是一种特殊的 Java 类，遵守 "),(0,t.Lk)("a",k,[(0,t.eW)("JavaBean 的规范"),(0,t.bF)(a)]),(0,t.eW)("，即所有的成员都是私有成员，且每个成员都有公开的读取和设定的方法（"),d,(0,t.eW)("​ 和 "),v,(0,t.eW)("​），且这些方法都遵守命名的规范。就是因为 JavaBean 有这些的特性，sun 推出了一种"),m,(0,t.eW)("，方便对其的访问，就是内省技术。【JDK 提供了一套 API 用来访问某个属性的 getter/setter 方法、这个就是 Java 内省。】")]),b,(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,[g,(0,t.Lk)("p",null,[(0,t.eW)("使用时要导入两个包："),(0,t.Lk)("a",h,[(0,t.eW)("commons-beanutils-xx.jar"),(0,t.bF)(a)]),(0,t.eW)(" 和 "),(0,t.Lk)("a",f,[(0,t.eW)("commons-logging-xx.jar"),(0,t.bF)(a)]),(0,t.eW)("​​。")])]),y,w]),j,(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,[(0,t.Lk)("a",I,[(0,t.eW)("Java 内省机制 - 别再闹了 - 博客园 (cnblogs.com)"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",J,[(0,t.eW)("深入理解 Java：内省(Introspector) - peida - 博客园 (cnblogs.com)"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",L,[(0,t.eW)("JavaBean - 廖雪峰的官方网站 (liaoxuefeng.com)"),(0,t.bF)(a)])]),(0,t.Lk)("li",null,[(0,t.Lk)("a",B,[(0,t.eW)("Java 内省 (qq.com)"),(0,t.bF)(a)])])])])}]]),C=JSON.parse('{"path":"/codereview/%E3%80%90JavaSec%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%20%E5%86%85%E7%9C%81%EF%BC%88Introspection%EF%BC%89.html","title":"Java 内省（Introspection）","lang":"zh-CN","frontmatter":{"title":"Java 内省（Introspection）","description":"什么是内省 计算机科学中的内省 在计算机科学中，内省​是指计算机程序在运行时（Runtime）检查对象（Object）类型的一种能力，通常也可以称作“运行时类型检查\\"。 一些编程语言如 C++、Java、Ruby、PHP、Objective-C、Perl 等等具有这种特性。 不应该将内省和反射混淆。相对于内省，反射更进一步，是指计算机程序在运行时（Ru...","head":[["meta",{"property":"og:url","content":"https://github.com/zha0cai/SecWikiPublic/secwiki/codereview/%E3%80%90JavaSec%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Java%20%E5%86%85%E7%9C%81%EF%BC%88Introspection%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"One-Piece"}],["meta",{"property":"og:title","content":"Java 内省（Introspection）"}],["meta",{"property":"og:description","content":"什么是内省 计算机科学中的内省 在计算机科学中，内省​是指计算机程序在运行时（Runtime）检查对象（Object）类型的一种能力，通常也可以称作“运行时类型检查\\"。 一些编程语言如 C++、Java、Ruby、PHP、Objective-C、Perl 等等具有这种特性。 不应该将内省和反射混淆。相对于内省，反射更进一步，是指计算机程序在运行时（Ru..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-30T06:50:05.000Z"}],["meta",{"property":"article:author","content":"Mr.zha0cai"}],["meta",{"property":"article:modified_time","content":"2024-04-30T06:50:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 内省（Introspection）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-30T06:50:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.zha0cai\\",\\"url\\":\\"https://github.com/zha0cai\\"}]}"]]},"headers":[{"level":2,"title":"什么是内省","slug":"什么是内省","link":"#什么是内省","children":[{"level":3,"title":"计算机科学中的内省","slug":"计算机科学中的内省","link":"#计算机科学中的内省","children":[]},{"level":3,"title":"Java 中的内省","slug":"java-中的内省","link":"#java-中的内省","children":[]}]},{"level":2,"title":"内省机制","slug":"内省机制","link":"#内省机制","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"几个核心类","slug":"几个核心类","link":"#几个核心类","children":[]},{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"前人栽树","slug":"前人栽树","link":"#前人栽树","children":[]}],"git":{"createdTime":1714459805000,"updatedTime":1714459805000,"contributors":[{"name":"zha0cai","email":"111300972+zha0cai@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.1,"words":2129},"filePathRelative":"codereview/【JavaSec】基础知识/Java 内省（Introspection）.md","localizedDate":"2024年4月30日","autoDesc":true}')}}]);