"use strict";(self.webpackChunkone_piece=self.webpackChunkone_piece||[]).push([[408],{7708:(n,e)=>{e.A=(n,e)=>{const a=n.__vccOpts||n;for(const[n,s]of e)a[n]=s;return a}},4519:(n,e,a)=>{a.r(e),a.d(e,{comp:()=>ce,data:()=>re});var s=a(4754);const o=a.p+"assets/img/image-20230221111916-ea4ltw5.8b5a5be9.png",t=a.p+"assets/img/image-20230201155030-tu68c4i.e5c6f666.png",p=a.p+"assets/img/image-20230223164636-780sdwd.9ae64d90.png",l=a.p+"assets/img/image-20230131180844-wmi3y6w.2b16504a.png",c=(0,s.Fv)('<h1 id="_0x01-概述" tabindex="-1"><a class="header-anchor" href="#_0x01-概述"><span>0x01 概述</span></a></h1><h2 id="uri" tabindex="-1"><a class="header-anchor" href="#uri"><span>URI</span></a></h2><blockquote><p>URI，全称是 <code>Uniform Resource Identifiers</code>​，即<strong>统一资源标识符。</strong> 用于在互联网上标识一个唯一的资源，这里的“资源”表示的是 web 上每一种可用的资源（抽象或者物理资源），如 HTML 文档、图像、视频片段、程序等。</p></blockquote><h2 id="url" tabindex="-1"><a class="header-anchor" href="#url"><span>URL</span></a></h2><blockquote><p>URL，全称是 <code>Universal Resource Locator</code>​，即<strong>统一资源定位符</strong>。用于指示资源的位置以及用于<strong>访问</strong>它的协议。</p></blockquote><h2 id="urn" tabindex="-1"><a class="header-anchor" href="#urn"><span>URN</span></a></h2><blockquote><p>URN，全称是 <code>Universal Resource Name</code>​，即<strong>统一资源名称。</strong></p></blockquote><ul><li>URI 属于 URL 更高层次的抽象，一种字符串文本标准。</li><li>URI 表示请求服务器的路径，定义这么一个资源。而 URL 是一种具体的 URI，同时说明要如何访问这个资源（<u>访问协议</u>）。</li></ul><p>‍</p><p>​<img src="'+o+'" alt="image" loading="lazy">​</p><h2 id="url-的组成" tabindex="-1"><a class="header-anchor" href="#url-的组成"><span>URL 的组成</span></a></h2>',11),r=(0,s.Lk)("p",null,"完整的 URI，由四个主要的部分构成：协议、主机、端口、路径",-1),i=(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"<scheme>://<authority><path>?<query>"),(0,s.eW)("​​")],-1),d=(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"<scheme>://<host>:<port>/<path>?<query>"),(0,s.eW)("​​")],-1),u=(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>"),(0,s.eW)("​​")],-1),k=(0,s.Lk)("code",null,"scheme",-1),m=(0,s.Lk)("code",null,"http",-1),b=(0,s.Lk)("code",null,"ftp",-1),h={href:"https://www.rfc-editor.org/rfc/rfc2396#section-3.1",target:"_blank",rel:"noopener noreferrer"},v=(0,s.Lk)("code",null,"authority",-1),g=(0,s.Lk)("code",null,"://",-1),L=(0,s.Lk)("code",null,"scheme",-1),x={href:"https://www.rfc-editor.org/rfc/rfc2396#section-3.2",target:"_blank",rel:"noopener noreferrer"},w=(0,s.Fv)("<blockquote><p>This authority component is typically defined by an Internet-based server or a scheme-specific registry of naming authorities.</p></blockquote><p>这个“认证”部分，由一个基于 Internet 的服务器定义或者由命名机关注册登记（和具体的协议有关）。</p><p>而常见的 <code>authority</code>​​ 则是：“由基于 Internet 的服务器定义”，其格式如下：</p><p>​<code>&lt;userinfo&gt;@&lt;host&gt;:&lt;port&gt;</code>​​</p><p>​<code>**userinfo**</code>​​ 这个域用于填写一些用户相关的信息，比如可能会填写 “<u>user:password</u>”，当然这是不被建议的。</p><p>​ <code>**&lt;host&gt;:&lt;port&gt;**</code> ​​ 则是被熟知的服务器地址了，<code>host</code>​​ 可以是域名，也可以是对应的 IP 地址，<code>port</code>​​ 表示端口，这是一个可选项，如果不填写，会使用默认端口（也是和协议相关，比如 <code>http</code>​​ 协议默认端口是 80）。</p>",6),f=(0,s.Fv)("<li><p>​<code>**path**</code>​​，在 <code>scheme</code>​​ 和 <code>authority</code>​​ 确定下来的情况下标识资源，<code>path</code>​​ 由几个段组成，每个段用 <code>/</code>​​ 来分隔。注意，<code>path</code>​​ 不等同于文件系统定义的路径。</p></li><li><p>​<code>**query**</code>​​，查询串（或者说参数串），用 <code>?</code>​​ 和 <code>path</code>​​ 区分开来，其具体的含义由这个具体资源来定义。</p></li>",2),U=(0,s.Lk)("p",null,[(0,s.Lk)("strong",null,"如")],-1),_=(0,s.Lk)("p",null,"URL（统一资源定位符）",-1),R={href:"https://gtfobins.github.io/",target:"_blank",rel:"noopener noreferrer"},I=(0,s.Lk)("li",null,"协议：http://",-1),W=(0,s.Lk)("li",null,"主机：localhost",-1),q=(0,s.Lk)("li",null,"端口：8080",-1),y={href:"https://gtfobins.github.io/",target:"_blank",rel:"noopener noreferrer"},E=(0,s.Lk)("p",null,"URI（统一资源标识符）",-1),F={href:"https://gtfobins.github.io/",target:"_blank",rel:"noopener noreferrer"},C=(0,s.Lk)("h2",{id:"url-保留字符及编码",tabindex:"-1"},[(0,s.Lk)("a",{class:"header-anchor",href:"#url-保留字符及编码"},[(0,s.Lk)("span",null,"URL 保留字符及编码")])],-1),A=(0,s.Lk)("p",null,[(0,s.eW)("从上面的描述里看，URI 的这 4 个组件，由特定的分隔符来分离，这些分隔符各自有着特殊含义，而如果这些分隔符出现在某个组件内，比如 "),(0,s.Lk)("code",null,"path"),(0,s.eW)("​ 是 "),(0,s.Lk)("code",null,"/a/b?c.html"),(0,s.eW)("​，那么从 URI 整体角度来看的话， "),(0,s.Lk)("code",null,"c.html"),(0,s.eW)("​ 会被当做是 "),(0,s.Lk)("code",null,"query"),(0,s.eW)("​，这样就破坏了 "),(0,s.Lk)("code",null,"path"),(0,s.eW)("​ 原本的含义，因此 URI 引入了保留字符集，这些字符有着特殊的目的，"),(0,s.Lk)("strong",null,"如果它们被用于描述资源（而不是作为分隔符出现），那么必须对它们转义。")],-1),P={href:"https://www.rfc-editor.org/rfc/rfc2396#section-2.2",target:"_blank",rel:"noopener noreferrer"},S=(0,s.Lk)("p",null,"In general, a character is reserved if the semantics of the URI changes if the character is replaced with its escaped US-ASCII encoding.",-1),N=(0,s.Fv)("<p><strong>即如果转义前后这个字符会影响到整个 URI 的意义，则它必须被转义。</strong></p><p>US-ASCII 字符集中没有对应的可打印字符：Url 中只允许使用可打印字符。US-ASCII 码中的 10-7F 字节全都表示控制字符，这些字符都不能直接出现在 Url 中。同时，对于 80-FF 字节（ISO-8859-1），由于已经超出了 US-ACII 定义的字节范围，因此也不可以放在 Url 中。</p><p>保留字符：Url 可以划分成若干个组件，协议、主机、路径等。有一些字符（<code>:/?#[]@</code>​）是用作分隔不同组件的。例如 <code>:</code>​ 冒号用于分隔协议和主机，<code>/</code>​ 用于分隔主机和路径，<code>?</code>​ 用于分隔路径和查询参数，等等。还有一些字符（<code>!$&amp;&#39;()*+,;=</code>​）用于在每个组件中起到分隔作用的，如 <code>=</code>​ 用于表示查询参数中的<strong>键值对</strong>，<code>&amp;</code>​ 符号用于<strong>分隔</strong>查询多个键值对。当组件中的普通数据包含这些特殊字符时，需要对其进行编码。</p><p>由于 URI 由多个组件构成，一个字符不转义，可能会对其中一个组件会造成影响，但对另一个组件没有影响，所以“保留字符集”是由具体的 URI 组件来规定的。</p>",4),T=(0,s.Fv)("<li><p>对 <code>path</code>​ 部分而言，保留字符集是（参考自 rfc2396）：</p><p><code>reserved = &quot;/&quot; | &quot;?&quot; | &quot;;&quot; | &quot;=&quot;</code>​</p></li><li><p>对 <code>query</code>​ 部分而言，保留字符集是（参考自 rfc2396）：</p><p><code>reserved = &quot;;&quot; | &quot;/&quot; | &quot;?&quot; | &quot;:&quot; | &quot;@&quot; | &quot;&amp;&quot; | &quot;=&quot; | &quot;+&quot; | &quot;,&quot; | &quot;$&quot;</code>​</p></li>",2),j=(0,s.Lk)("p",null,[(0,s.Lk)("strong",null,"HTML URL 编码参考手册")],-1),z={href:"https://www.w3schools.com/tags/ref_urlencode.asp",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.w3schools.com/html/html_urlencode.asp",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.w3school.com.cn/tags/html_ref_urlencode.asp",target:"_blank",rel:"noopener noreferrer"},B=(0,s.Lk)("li",null,[(0,s.Lk)("p",null,"保留字符就是那些在 URL 中具有特定意义的字符。")],-1),X={href:"https://www.ietf.org/rfc/rfc1738.txt",target:"_blank",rel:"noopener noreferrer"},D=(0,s.Fv)('<p>​<code>! * &#39; ( ) + $ ,</code>​</p><p>​<img src="'+t+'" alt="image" loading="lazy"></p><p>​RFC3986 中指定了以下字符为保留字符：<code>! * &#39; ( ) ; : @ &amp; = + $ , / ? # [ ]</code>​</p><p>不安全字符：还有一些字符，当他们直接放在 Url 中的时候，可能会引起解析程序的歧义。这些字符被视为不安全字符，原因有很多。</p><ul><li>空格：Url 在传输的过程，或者用户在排版的过程，或者文本处理程序在处理 Url 的过程，都有可能引入无关紧要的空格，或者将那些有意义的空格给去掉。</li><li>引号以及 <code>&lt;&gt;</code>​：引号和尖括号通常用于在普通文本中起到分隔 Url 的作用</li><li>​<code>#</code>​：通常用于表示书签或者锚点</li><li>​<code>%</code>​：百分号本身用作对不安全字符进行编码时使用的特殊字符，因此本身需要编码</li><li>​<code>{}|^[]</code>~`​：某一些网关或者传输代理会篡改这些字符</li></ul><p>需要注意的是，对于 Url 中的合法字符，编码和不编码是等价的，但是对于上面提到的这些字符，如果不经过编码，那么它们有可能会造成 Url 语义的不同。因此对于 Url 而言，只有普通英文字符和数字，特殊字符 <code>$-_.+!*&#39;()</code>​ 还有保留字符，才能出现在未经编码的 Url 之中。其他字符均需要经过编码之后才能出现在 Url 中。</p><p>但是由于历史原因，目前尚存在一些不标准的编码实现。例如，虽然 RFC3986 文档规定，对于波浪符号 <code>~</code>​，不需要进行 Url 编码，但是还是有很多老的网关或者传输代理会进行编码。</p><p><strong>如何对 Url 中的非法字符进行编码</strong></p><p>Url 编码通常也被称为百分号编码（Url Encoding，also known as percent-encoding），是因为它的编码方式非常简单，使用 <code>%</code>​​ 百分号加上两位的字符——0123456789ABCDEF——代表一个字节的十六进制形式。Url 编码默认使用的字符集是 US-ASCII。</p><p>对于<strong>非 ASCII 字符</strong>，需要使用 ASCII 字符集的<strong>超集</strong>进行编码得到相应的字节，然后对每个字节执行百分号编码。</p><p>对于 <strong>Unicode 字符</strong>，RFC 文档建议使用 utf-8 对其进行编码得到相应的字节，然后对每个字节执行百分号编码。如&quot;中文&quot;使用 UTF-8 字符集得到的字节为 0xE4 0xB8 0xAD 0xE6 0x96 0x87，经过 Url 编码之后得到 <code>%E4%B8%AD%E6%96%87</code>​ 。</p>',11),M=(0,s.Fv)("<li><p>字符是可由八位字节数（octet）来表示的，八位字节数可用十六进制来表示它的值。如字符 <code>&lt;</code>​​​ 的八位字节数十六进制值是 3C。在 URL 中，字符的编码方式为：<code>%</code>​​​ 加上字符的两个十六进制数值。</p><p>a 在 US-ASCII 码中对应的字节是 0x61，那么 Url 编码之后得到的就是 <code>%61</code>​​</p><p>“田” 的 UTF-8 编码十六进制值是 E7 94 B0，这时 “田” 的 URL 编码为 <code>%E7%94%B0</code>​​</p><p><strong>如果某个字节对应着 ASCII 字符集中的某个非保留字符，则此字节无需使用百分号表示。</strong> 例如 &quot;Url 编码&quot;，使用 UTF-8 编码得到的字节是 <code>0x55 0x72 0x6C 0xE7 0xBC 0x96 0xE7 0xA0 0x81</code>​，由于前三个字节对应着 ASCII 中的非保留字符&quot;Url&quot;，因此这三个字节可以用非保留字符&quot;Url&quot;表示。最终的 Url 编码可以简化成 <code>Url%E7%BC%96%E7%A0%81</code>​，当然，如果你用 <code>%55%72%6C%E7%BC%96%E7%A0%81</code>​ 也是可以的。</p></li>",1),H=(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"#"),(0,s.eW)("​​ 的含义")],-1),J=(0,s.Lk)("code",null,"#",-1),$={href:"http://www.example.com/index.html#print",target:"_blank",rel:"noopener noreferrer"},Z=(0,s.Lk)("code",null,"index.html",-1),Y=(0,s.Lk)("code",null,"print",-1),V=(0,s.Lk)("li",null,[(0,s.eW)("为网页位置指定标识符，有两个方法。一是使用锚点，比如 "),(0,s.Lk)("code",null,'<a name="print"></a>'),(0,s.eW)("​​，二是使用 id 属性，比如 "),(0,s.Lk)("code",null,'<div id="print">'),(0,s.eW)("​​。")],-1),K=(0,s.Lk)("p",null,[(0,s.eW)("HTTP 请求不包括 "),(0,s.Lk)("code",null,"#"),(0,s.eW)("​​， "),(0,s.Lk)("code",null,"#"),(0,s.eW)("​​ 是用来指导浏览器动作的，对服务器端完全无用，所以 "),(0,s.Lk)("code",null,"#"),(0,s.eW)("​​ 后的字符都不会被发送到服务器端。")],-1),Q={href:"http://www.example.com/index.html#print",target:"_blank",rel:"noopener noreferrer"},nn=(0,s.Fv)('<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>GET /index.html HTTP/1.1\nHost: www.example.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',1),en=(0,s.Fv)("<li><p>改变 <code>#</code>​​ 不触发网页重载</p></li><li><p>改变 <code>#</code>​​ 会改变浏览器的访问历史</p></li><li><p>​<code>window.location.hash</code>​​ 读取 <code>#</code>​​ 值</p><p>​<code>window.location.hash</code>​​ ** 这个属性可读可写。读取时，可以用来判断网页状态是否改变；写入时，则会在不重载网页的前提下，创造一条访问历史记录。**</p></li>",3),an=(0,s.Lk)("p",null,[(0,s.eW)("默认情况下，Google 的网络爬虫会忽视 URL 的 "),(0,s.Lk)("code",null,"#"),(0,s.eW)("​​ 部分。")],-1),sn=(0,s.Lk)("p",null,[(0,s.eW)("但是，Google 还规定，如果你希望 Ajax 生成的内容被浏览引擎读取，那么 URL 中可以使用 "),(0,s.Lk)("code",null,"#!"),(0,s.eW)("​​ ，Google 会自动将其后面的内容转成查询字符串 "),(0,s.Lk)("code",null,"_escaped_fragment_"),(0,s.eW)("​​ 的值。")],-1),on={href:"http://twitter.com/#!/username",target:"_blank",rel:"noopener noreferrer"},tn={href:"http://twitter.com/?_escaped_fragment_=/username",target:"_blank",rel:"noopener noreferrer"},pn=(0,s.Lk)("em",null,"escaped_fragment",-1),ln=(0,s.Lk)("p",null,"通过这种机制，Google 就可以索引动态的 Ajax 内容。",-1),cn=(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"?"),(0,s.eW)("​​")],-1),rn=(0,s.Lk)("p",null,"1）连接作用：比如",-1),dn={href:"http://www.xxx.com/Show.asp?id=77&nameid=2905210001&page=1",target:"_blank",rel:"noopener noreferrer"},un=(0,s.Lk)("p",null,"2）清除缓存：比如",-1),kn={href:"http://www.xxxxx.com/index.html",target:"_blank",rel:"noopener noreferrer"},mn={href:"http://www.xxxxx.com/index.html?test123123",target:"_blank",rel:"noopener noreferrer"},bn=(0,s.Lk)("p",null,"两个 url 打开的页面一样，但是后面这个有问号，说明不调用缓存的内容，而认为是一个新地址，重新读取。",-1),hn=(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"&"),(0,s.eW)("​​ 参数间隔符")])],-1),vn=(0,s.Fv)('<h1 id="_0x02-nginx-的-uri-转义机制" tabindex="-1"><a class="header-anchor" href="#_0x02-nginx-的-uri-转义机制"><span>0x02 nginx 的 URI 转义机制</span></a></h1><p>nginx （以 1.13.8 版本为准）提供了一个名为 <code>ngx_escape_uri</code>​ 的函数，函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">uintptr_t</span> <span class="token function">ngx_escape_uri</span><span class="token punctuation">(</span>u_char <span class="token operator">*</span>dst<span class="token punctuation">,</span> u_char <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span>\n     <span class="token class-name">ngx_uint_t</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第三个参数 <code>type</code>​，可以接受这些值：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_ESCAPE_URI</span>            <span class="token expression"><span class="token number">0</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_ESCAPE_ARGS</span>           <span class="token expression"><span class="token number">1</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_ESCAPE_URI_COMPONENT</span>  <span class="token expression"><span class="token number">2</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_ESCAPE_HTML</span>           <span class="token expression"><span class="token number">3</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_ESCAPE_REFRESH</span>        <span class="token expression"><span class="token number">4</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_ESCAPE_MEMCACHED</span>      <span class="token expression"><span class="token number">5</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NGX_ESCAPE_MAIL_AUTH</span>      <span class="token expression"><span class="token number">6</span></span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),gn=(0,s.Lk)("code",null,"NGX_ESCAPE_URI ",-1),Ln=(0,s.Lk)("code",null,"NGX_ESCAPE_ARGS ",-1),xn=(0,s.Lk)("code",null,"NGX_ESCAPE_URI_COMPONENT ",-1),wn={href:"https://www.nginx.com/resources/wiki/extending/api/",target:"_blank",rel:"noopener noreferrer"},fn=(0,s.Fv)("<blockquote><p>TypeDefinitionNGX_ESCAPE_URIEscape a standard URINGX_ESCAPE_ARGSEscape query argumentsNGX_ESCAPE_URI_COMPONENTEscape the URI after the domain</p></blockquote><p>对应地，<code>ngx_escape_uri</code>​ 这个函数，内置了几个相关的 <code>bitmap</code>​，区别就是在于各自的转义字符集，具体可以查阅 nginx 的源码（<code>src/core/ngx_string.c</code>​）。</p><p>其中针对整个 URI 的转义处理，<code>ngx_escape_uri </code>​ 会把</p><ul><li><code>&quot; &quot;, &quot;#&quot;, &quot;%&quot;, &quot;?&quot;</code>​ 以及 <code>%00-%1F</code>​ 和 <code>%7F-%FF</code>​ 的字符转义；</li><li>针对 <code>query</code>​ 的转义，会把 <code>&quot; &quot;, &quot;#&quot;, &quot;%&quot;, &quot;&amp;&quot;, &quot;+&quot;, &quot;?&quot;</code>​ 以及 <code>%00-%1F</code>​ 和 <code>%7F-%FF</code>​ 的字符转义；</li><li>针对 <code>path</code>​ + <code>query</code>​（称之为 the URI after the domain）的转义，会把除英文字母，数字，以及 <code>&quot;-&quot;, &quot;.&quot;, &quot;_&quot;, &quot;~&quot;</code>​ 这些以外的字符全部转义。</li></ul><p>可以看到，<code>NGX_ESCAPE_URI </code> ​和 <code>&lt;span&gt;NGX_ESCAPE_ARGS&lt;/span&gt; </code>​ 没有处理不安全字符，前者站在处理整个的 URI 的角度上编码，后者站在处理 <code>query</code>​ 的角度上编码；</p>",5),Un=(0,s.Lk)("code",null,"NGX_ESCAPE_URI_COMPONENT ",-1),_n=(0,s.Lk)("code",null,"path",-1),Rn=(0,s.Lk)("code",null,"query",-1),In={href:"https://www.rfc-editor.org/rfc/rfc3986#section-2.2",target:"_blank",rel:"noopener noreferrer"},Wn=(0,s.Fv)('<p>这里顺便提一下 <code>ngx_proxy</code>​ 模块对应的 URI 转义处理，在构造向上游发送的请求行时，ngx_proxy 模块针对 <code>proxy_pass</code>​ 指令做出了不同的处理：</p><ul><li><p>如果指定的 URI 包含了变量，将解析变量，然后直接将解析后的 URI 发送到上游；</p></li><li><p>如果 URI 不含变量，且没有指定 <code>path</code>​ 部分，将使用客户端发来的 <code>path</code>​ 部分拼接到 URI 中，然后发送到上游；</p></li><li><p>如果 URI 不含变量，且指定了 <code>path</code>​​，这里的处理比较特殊，<strong>nginx 会把解码过的</strong>，由客户端发来的 URI 里的 <code>path</code>​​ 部分（去掉和当前 <code>location</code>​​ 的公共前缀），进行编码（按 <code>NGX_ESCAPE_URI</code>​​ 来操作），和 <code>proxy_pass</code>​​ 指令指定 的 <code>path</code>​​ 拼接，发送到上游，比如这样的配置：</p><div class="language-roboconf line-numbers-mode" data-ext="roboconf" data-title="roboconf"><pre class="language-roboconf"><code>location /<span class="token component variable">foo</span> <span class="token punctuation">{</span>\n    proxy_pass <span class="token property">http</span><span class="token punctuation">:</span>//<span class="token property">127.0.0.1</span><span class="token punctuation">:</span>8082/bar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果客户端发来的 URI 里 <code>path</code>​ 是 <code>/foo/%5B-%5D</code>​，最终上游的 URI <code>path</code>​ 会是 <code>/bar/[-]</code>​。</p></li></ul><p>因此我们在做 nginx conf 配置的时候，也需要小心考虑 URI 编码的问题。</p><h1 id="_0x03-ngx-lua-的-uri-转义机制" tabindex="-1"><a class="header-anchor" href="#_0x03-ngx-lua-的-uri-转义机制"><span>0x03 ngx_lua 的 URI 转义机制</span></a></h1><p>ngx_lua 提供的 <code>ngx.escape_uri</code>​ 函数，和 nginx 核心的转义机制也有一些差异（基于 ngx_lua v0.10.11），体现在对保留字符的处理上，<code>ngx.escape_uri</code>​ 底层使用的 <code>ngx_http_lua_escape_uri</code>​，结构和 <code>ngx_escape_uri</code>​ 一致，而对应的 <code>bitmap</code>​ 不同。</p><ul><li><p>对于整个 URI 的转义处理，在 <code>ngx_escape_uri</code>​ 的基础上，对</p><p><code>&#39;&quot;&#39;, &#39;&amp;&#39;, &#39;+&#39;, &#39;/&#39;, &#39;:&#39;, &#39;;&#39;, &#39;&lt;&#39;, &#39;=&#39;, &#39;&gt;&#39;, &#39;[&#39;, &#39;\\&#39;, &#39;]&#39;, &#39;^&#39;, &#39;_&#39;, &#39;{&#39; , &#39;}&#39;</code> ​进行转义；</p></li><li><p>对于 <code>query</code>​ 的处理，这里去掉了 <code>&amp;</code>​ 的转义；</p></li><li><p>对于 <code>path</code>​ + <code>query</code>​ 的处理，去掉了对 <code>&quot;&#39;&quot;, &quot;*&quot;, &quot;)&quot;, &quot;(&quot;, &quot;!&quot;</code>​ 的转义。</p></li><li><p>目前 <code>ngx.escape_uri</code>​ 使用的是 <code>NGX_ESCAPE_URI_COMPONENT</code>​，从 PR 提交的信息来看，目前 <code>ngx.escape_uri</code>​ 的行为和 Chrome JS 实现的 <code>encodeURIComponent</code>​ 一致。</p></li></ul><p>另外，ngx_lua 对 URI 的解码操作，除了它把 <code>+</code>​ 解码为空格以外，其他和 nginx 相同。</p><h1 id="_0x04-tomcat-与-nginx-对-url-中的特殊字符处理" tabindex="-1"><a class="header-anchor" href="#_0x04-tomcat-与-nginx-对-url-中的特殊字符处理"><span>0x04 Tomcat 与 Nginx 对 url 中的特殊字符处理</span></a></h1>',8),qn={href:"https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf",target:"_blank",rel:"noopener noreferrer"},yn=(0,s.Fv)('<p>nginx 配置应该形如是这样:</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>server {\n    listen       80;\n    server_name  www.123.com;\n\n    location /examples/ {\n        proxy_pass http://127.0.0.1:8080/examples/;\n        index  index.html index.htm index.jsp;\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 <code>http://127.0.0.1:8080/examples/…;/manager/html</code>​ 的时候，更据第 5 行的 location 会反向代理到 tomcat 中，传给 tomcat 的为：<code>http://127.0.0.1:8080/examples/…;/manager/html</code>​</p><p>对于 url 含有 <code>’;’</code>​​ ，tomcat 经过 <code>postParseRequest()</code>​​ 函数处理，会删掉 <code>’;’</code>​​ 到 <code>’/‘</code>​​ 之间的字符，比如 <code>’/…;123/’</code>​​ 会变为 <code>’…/’</code>​​。然后经过 <code>normalize()</code>​​ 处理会变为：<code>http://127.0.0.1:8080/manager/html</code>​</p><p>对于一开始那个为什么直接用 <code>http://127.0.0.1:8080/…;/examples/websocket/index.xhtml</code>​ 会报 400 错误，原因就是在 <code>normalize()</code>​ 函数中进行了判断，如果 <code>normalize</code>​ 之后 <code>…/</code>​ 是 url 开头的话 ，会返回 400。</p><p><strong>tomcat 对 url 特殊字符的处理主要是三个步骤对于三个函数：</strong></p><ol><li>先是 <code>postParseRequest()</code>​ 函数对 <code>’;’</code>​ 分号进行处理。比如把 <code> ’/123;456/’</code>​ 替换为 <code>’/123/’</code>​。</li><li>然后是调用 <code>req.getURLDecoder().convert()</code>​ 函数对 URL 中进行了 URL 编码的字符进行解码，其中如果解码之后的结果是 <code>’/’</code>​ ,也就是输入的 URL 含有 <code>’%2f’</code>​ 就会返回 400。</li><li>接着是调用 <code>normalize()</code>​ 函数对 URL 进行规范化，比如处理 <code>’/…/’</code>​ ，<code>’/./’</code>​，<code>’\\’</code>​，<code>’//’</code>​。</li><li>另外 URL 中如果含有<strong>空字符串</strong>，则会返回 400。如果规范化后的 url 是以 <code>’…/&#39;</code>​ 开头的，也会返回 400。</li></ol><p>​<img src="'+p+'" alt="image" loading="lazy">​</p><h1 id="_0x05-javascript-中的-escape​-encodeuri​-和-encodeuricomponent​-的区别" tabindex="-1"><a class="header-anchor" href="#_0x05-javascript-中的-escape​-encodeuri​-和-encodeuricomponent​-的区别"><span>0x05 Javascript 中的 <code>escape</code>​, <code>encodeURI</code>​ 和 <code>encodeURIComponent</code>​ 的区别</span></a></h1><p>Javascript 中提供了 3 对函数用来对 Url 编码以得到合法的 Url，它们分别是 <code>escape / unescape</code>​, <code>encodeURI / decodeURI</code>​ 和 <code>encodeURIComponent / decodeURIComponent</code>​。</p><p>这三个编码的函数——escape，encodeURI，encodeURIComponent——都是用于将不安全不合法的 Url 字符转换为合法的 Url 字符表示，它们有以下几个不同点。</p><p><strong>安全字符不同：</strong> 下面列出了这三个函数的安全字符（即函数不会对这些字符进行编码）</p><ul><li>escape（69 个）：<code>*/@+-._0-9a-zA-Z</code>​</li><li>encodeURI（82 个）：<code>!#$&amp;&#39;()*+,/:;=?@-._~0-9a-zA-Z</code>​</li><li>encodeURIComponent（71 个）：<code>!&#39;()*-._~0-9a-zA-Z</code>​</li></ul><p><strong>兼容性不同：</strong> escape 函数是从 Javascript 1.0 的时候就存在了，其他两个函数是在 Javascript 1.5 才引入的。但是由于 Javascript 1.5 已经非常普及了，所以实际上使用 encodeURI 和 encodeURIComponent 并不会有什么兼容性问题。</p><p><strong>对 Unicode 字符的编码方式不同：</strong> 这三个函数对于 <strong>ASCII 字符</strong>的编码方式<strong>相同</strong>，均是使用百分号 + 两位十六进制字符来表示。但是对于 <strong>Unicode 字符</strong>，escape 的编码方式是 <code>%uxxxx</code>​，其中的 xxxx 是用来表示 unicode 字符的 4 位十六进制字符。这种方式已经被 W3C 废弃了。但是在 ECMA-262 标准中仍然保留着 escape 的这种编码语法。encodeURI 和 encodeURIComponent 则使用 UTF-8 对非 ASCII 字符进行编码，然后再进行百分号编码。这是 RFC 推荐的。因此建议尽可能的使用这两个函数替代 escape 进行编码。</p><p><strong>表单提交</strong></p><p>当 Html 的表单被提交时，每个表单域都会被 Url 编码之后才在被发送。由于历史的原因，表单使用的 Url 编码实现并不符合最新的标准。例如对于<strong>空格</strong>使用的编码并不是 <code>%20</code>​，而是 <code>+</code>​ 号，如果表单使用的是 Post 方法提交的，我们可以在 HTTP 头中看到有一个 Content-Type 的 header，值为 application/x-www-form-urlencoded。大部分应用程序均能处理这种非标准实现的 Url 编码，<strong>但是在客户端 Javascript 中，并没有一个函数能够将 + 号解码成空格</strong>，只能自己写转换函数。还有，对于非 ASCII 字符，使用的编码字符集取决于当前文档使用的字符集。例如我们在 Html 头部加上 <code>charset</code>​ 属性。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Type<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/html; charset=gb2312<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="常用-bypass-技巧" tabindex="-1"><a class="header-anchor" href="#常用-bypass-技巧"><span>常用 bypass 技巧</span></a></h1><ul><li><a href="">https://pentester.land/blog/open-redirect-cheatsheet/#common-injection-points--parameters</a></li></ul>',20),En=(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"@ 绕过"),(0,s.eW)("​ 用了浏览器的特性，"),(0,s.Lk)("code",null,"@"),(0,s.eW)("​ 请求的实际是 "),(0,s.Lk)("code",null,"@"),(0,s.eW)("​ 后面的内容。")],-1),Fn={href:"http://baidu.com@google.com/",target:"_blank",rel:"noopener noreferrer"},Cn=(0,s.Lk)("p",null,"原理如下：利用解析 URL 时的规则问题。",-1),An={href:"https://www.blackhat.com/us-17/briefings.html#a-new-era-of-ssrf-exploiting-url-parser-in-trending-programming-languages",target:"_blank",rel:"noopener noreferrer"},Pn=(0,s.Fv)('<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>baidu<span class="token punctuation">.</span>com<span class="token annotation punctuation">@www.baidu.com</span><span class="token operator">/</span> 和\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span>  请求时是相同的\n\n可以通过 curl 命令进行测试\n<span class="token operator">*</span> curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>baidu<span class="token punctuation">.</span>com<span class="token annotation punctuation">@www.baidu.com</span>\n<span class="token operator">*</span> curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com\n返回的内容是一样的\n\n<span class="token operator">*</span> 但是 `curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>baidu<span class="token punctuation">.</span>com` 和 `curl http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com` 返回的内容是不一样的\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),Sn=(0,s.Fv)("<li><p>​<code>? 问号绕过</code>​ 可以使用页面 <code>Referer</code>​ 作为后缀：<code>https://www.dddd.me/redirect.php?url=https://www.evil.com?www.dddd.me</code>​</p></li><li><p>​<code># 锚点绕过</code>​ 利用 <code>#</code>​ 会被浏览器解释成 HTML 中的锚点 <code>http://127.0.0.1/#baidu.com</code>​</p></li>",2),Nn=(0,s.Fv)('<p>​<code>xip.io 绕过</code>​： <code>http://www.baidu.com.127.0.0.1.xip.io/</code>​</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>指向任意 ip 的域名：xip<span class="token punctuation">.</span>io\nxip<span class="token punctuation">.</span>io 是一个开源泛域名服务。你可以无需配置，将自定义的任何域名解析到指定的 <span class="token constant">IP</span> 地址。假设你的 <span class="token constant">IP</span> 地址是 <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span>，你只需使用 ”前缀域名<span class="token operator">+</span><span class="token constant">IP</span> 地址<span class="token operator">+</span>xip<span class="token punctuation">.</span>io“ 即可完成相应自定义域名解析。\n\n比如你需要测试一个 web 服务器，但是你还没申请域名，本地测试大多的办法是改 host 大法，host 映射域名到一个 <span class="token constant">IP</span> 主机地址，现在有了 xip 就不用改 host 了。\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> 如\n<span class="token number">192.168</span><span class="token number">.201</span><span class="token number">.152</span> www<span class="token punctuation">.</span>mob<span class="token punctuation">.</span>com\n\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>域名<span class="token operator">+</span>地址<span class="token operator">+</span>xip<span class="token punctuation">.</span>io，将解析到对应地址。\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span> # 解析到 <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span>\nwww<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span>    # www 子域解析到 <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span>\nhttp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mysite<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span>\nfoo<span class="token punctuation">.</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>bar<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>io <span class="token operator">=</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span>\n\n如果你想使用自己的域名来实现一个类似 xip<span class="token punctuation">.</span>io 同样功能也是很容易的。你只需部署一个 xip<span class="token punctuation">.</span>name 的开源软件就可以简单实现了<span class="token operator">!</span>\nxip<span class="token punctuation">.</span>name 使用 <span class="token class-name">Golang</span> 开发的一个支持通配符的 <span class="token constant">DNS</span> 服务器，它的使用上和 xip<span class="token punctuation">.</span>io 无异。\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>peterhellberg<span class="token operator">/</span>xip<span class="token punctuation">.</span>name\n<span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>name resolves <span class="token keyword">to</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span>\nwww<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.2</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>name resolves <span class="token keyword">to</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.2</span> # www 子域解析到 <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.2</span>\nfoo<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.3</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>name resolves <span class="token keyword">to</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.3</span> # foo 子域解析到 <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.2</span>\nbar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.4</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>name resolves <span class="token keyword">to</span> <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.4</span> # bar<span class="token punctuation">.</span>baz 子域解析到 <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.4</span>\n\n<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>\n短网址或者短网址 <span class="token operator">+</span> xip<span class="token punctuation">.</span>io\n<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span>–<span class="token operator">&gt;</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>weibo<span class="token punctuation">.</span>ws<span class="token operator">/</span>fBkSBb\n<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">.</span>xip<span class="token punctuation">.</span>io–<span class="token operator">&gt;</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>weibo<span class="token punctuation">.</span>ws<span class="token operator">/</span>rujDdn\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​<img src="'+l+'" alt="image" loading="lazy">​</p>',3),Tn={href:"https://sslip.io/",target:"_blank",rel:"noopener noreferrer"},jn=(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.eW)("​"),(0,s.Lk)("code",null,"\\ 反斜杠绕过"),(0,s.eW)("​： "),(0,s.Lk)("code",null,"https://maxx.com/jump.html?url=https:/\\baidu.com"),(0,s.eW)("​")])],-1),zn=(0,s.Lk)("code",null,"IP 绕过",-1),Gn=(0,s.Lk)("code",null,".",-1),On={href:"http://www.geektools.com/geektools-cgi/ipconv.cgi",target:"_blank",rel:"noopener noreferrer"},Bn=(0,s.Fv)('<li><p>​<code>HPP 参数污染绕过</code>​：构造相同的参数两次 <code>?next=whitelisted.com&amp;next=google.com</code>​</p></li><li><p>Try <code>target.com/?redirect_url=.uk</code>​ (or <code>[any_param]=.uk</code>​). If it redirects to target.com.uk, then it’s vulnerable! <code>target.com.uk</code>​ and <code>target.com</code>​ are different domains.</p></li><li><p>​<code>编码绕过</code>​：尝试使用双 url （把 <code>%</code>​ 本身编码成 <code>%25</code>​）和三 url 编码（<code>%252522</code>​）的有效负载版本</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>符号 \\ 进行 url 编码一次是 %5c，二次编码把 % 本身编码成 %25 再和后边拼成 %255c\n==========\n- 若 URL 解码器有缺陷，只不断重复“从前边开始解析”这个步骤，就会把这个先变回 %5c，再变成 /，出现循环解析。当然这是错误的。\n- 正确的只应该解一步变成%5c。\n\n==========\n. = %252e\n/ = %252f\n\\ = %255c\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>',3),Xn=(0,s.Lk)("p",null,[(0,s.eW)("Use "),(0,s.Lk)("code",null,"/U+e280"),(0,s.eW)("​ "),(0,s.Lk)("strong",null,"RIGHT-TO-LEFT OVERRIDE"),(0,s.eW)("： "),(0,s.Lk)("code",null,"https://whitelisted.com@%E2%80%AE@moc.elgoog"),(0,s.eW)("​")],-1),Dn=(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.eW)("The unicode character "),(0,s.Lk)("code",null,"U+202E"),(0,s.eW)("​ changes all subsequent text to be "),(0,s.Lk)("strong",null,"right-to-left")])],-1),Mn={href:"https://hackerone.com/reports/299403",target:"_blank",rel:"noopener noreferrer"},Hn=(0,s.Fv)('<p>根据报告还能在 <code>@</code>​ 后面添加某些字符，通过 <code>#</code>​ 形成 url。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">If</span> you put symbols like &quot; <span class="token operator">/</span> $ etc after @ <span class="token punctuation">,</span> it forms a malformed <span class="token class-name"><span class="token namespace">urls<span class="token punctuation">.</span></span> For</span> eg<span class="token punctuation">,</span>\nhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com@&quot;twitter<span class="token punctuation">.</span>com\nhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com@&#39;twitter<span class="token punctuation">.</span>com\nhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com@<span class="token operator">/</span>twitter<span class="token punctuation">.</span>com\n<span class="token class-name">Further</span><span class="token punctuation">,</span> these symbols can be made as domains by putting # <span class="token class-name">Just</span> after the above symbols\nhttps<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>google<span class="token punctuation">.</span>com@&#39;#twitter<span class="token punctuation">.</span>com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),Jn=(0,s.Fv)('<li><p>​<code>特殊字符绕过</code>​：尝试使用不同的符号重定向到 IP 地址（而不是域）：IPv6，IPv4（十进制，十六进制或八进制）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>源 <span class="token constant">IP</span>：<span class="token number">192.168</span><span class="token number">.0</span><span class="token number">.1</span>\n<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>、 <span class="token number">8</span> 进制格式：<span class="token number">0300.0250</span><span class="token number">.0</span><span class="token number">.1</span>\n<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>、<span class="token number">16</span> 进制格式：<span class="token number">0xC0</span><span class="token number">.0</span>xA8<span class="token punctuation">.</span><span class="token number">0.1</span>\n<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>、<span class="token number">10</span> 进制整数格式：<span class="token number">3232235521</span>\n<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>、<span class="token number">16</span> 进制整数格式：<span class="token number">0xC0A80001</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​<code>利用 XSS 漏洞绕过</code>​：对于 XSS 尝试将 <code>alert(1)</code>​ 替换为 <code>prompt(1) &amp; confirm(1)</code>​，尝试重定向它的子域上面 <code>target.com/?redirect_url=xss.target.com</code>​</p></li><li><p>​<code>文件后缀绕过</code>​：如果选中扩展名为 <code>.jpg</code>​ 图片跳转可使用这种方式绕过 <code>image_url={payload}/.jpg</code>​</p></li><li><p>缺少协议绕过 ​<code>https://maxx.com/redirect.php?url=//www.evil.com</code>​</p></li><li><p>多斜线 <code>”/“</code>​ 前缀绕过 ​<code>https://maxx.com/redirect.php?url=///www.evil.com https://maxx.com/redirect.php?url=////www.evil.com</code>​</p></li><li><p>在有些情况下 XSS 只能造成跳转的危害</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span>meta  content<span class="token operator">=</span><span class="token string">&quot;1;url=http://www.baidu.com&quot;</span> http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;refresh&quot;</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>',6),$n=(0,s.Lk)("p",null,[(0,s.eW)("如果 "),(0,s.Lk)("code",null,"."),(0,s.eW)("​ 被加入黑名单， 可以尝试一下 "),(0,s.Lk)("code",null,"%E3%80%82"),(0,s.eW)("​ （解码后是中文的 。）。")],-1),Zn={href:"https://baidu%E3%80%82com",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://baidu%252ecom",target:"_blank",rel:"noopener noreferrer"},Vn=(0,s.Lk)("code",null,"https://baidu%252ecom",-1),Kn=(0,s.Fv)('<h2 id="基础元字符字典-bypass-payload-list" tabindex="-1"><a class="header-anchor" href="#基础元字符字典-bypass-payload-list"><span>基础元字符字典 Bypass-Payload:List</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳\n⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇\n⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛\n⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵\nⒶ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ\nⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ\n⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿\n<span class="token operator">-</span> <span class="token operator">~</span> <span class="token operator">?</span> <span class="token operator">%</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),Qn=(0,s.Lk)("strong",null,"多个 ascii 字符会被解码成同一个英文字母",-1),ne={href:"https://mp.weixin.qq.com/s/wPNsiSYcULfqUISCDR3n_g",target:"_blank",rel:"noopener noreferrer"},ee=(0,s.Fv)('<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">65535</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;https://&#39;</span><span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">&#39;kun.org&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span>hostname <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span>hostname <span class="token operator">==</span> <span class="token string">&quot;ikun.org&quot;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">{</span>\n        <span class="token comment">// console.log(&quot;error&quot;);</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过脚本我们找出域名所对应的 ascii 字符，比如英文字母 i 同时对应：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>I i ᴵ ᵢ ⁱ ℐ ℑ ℹ ⅈ Ⅰ ⅰ Ⓘ ⓘ Ｉ ｉ\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>url 进一步伪造成了</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>https://www.bing.com&amp;action=login@ℐⓀⓊⁿ.ºʳℊ\n\n# 结合上面的进制编码混淆，假如 ikun.org 的 ip 地址为 127.0.0.1 \n- 二进制编码：01111111 00000000 00000000 00000001\n- 十进制编码：2130706433\n--&gt; \nhttps://www.bing.com&amp;action=login@2130706433\n--&gt; 在通过添加对服务端解析没用的锚点，\nhttps://www.bing.com&amp;action=login@2130706433#3.docx\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="前人栽树" tabindex="-1"><a class="header-anchor" href="#前人栽树"><span>前人栽树</span></a></h1>',6),ae={href:"https://tech.upyun.com/article/272/URI.html",target:"_blank",rel:"noopener noreferrer"},se={href:"https://blog.csdn.net/u013032097/article/details/91445945",target:"_blank",rel:"noopener noreferrer"},oe={href:"https://blog.csdn.net/kendyhj9999/article/details/17733643",target:"_blank",rel:"noopener noreferrer"},te={href:"https://blog.csdn.net/qq_41891666/article/details/110392483",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf",target:"_blank",rel:"noopener noreferrer"},le={},ce=(0,a(7708).A)(le,[["render",function(n,e){const a=(0,s.g2)("ExternalLinkIcon");return(0,s.uX)(),(0,s.CE)("div",null,[c,(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,[r,i,d,u,(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.eW)("​"),k,(0,s.eW)("​​ 表示协议，比如 "),m,(0,s.eW)("​​，"),b,(0,s.eW)("​​ 等等，详细介绍可以参考 "),(0,s.Lk)("a",h,[(0,s.eW)("rfc2396#section-3.1"),(0,s.bF)(a)]),(0,s.eW)("。")])]),(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.eW)("​​"),v,(0,s.eW)("​​，用 "),g,(0,s.eW)("​​ 来和 "),L,(0,s.eW)("​​ 区分。从字面意思看就是“认证”，“鉴权”的意思，引用 "),(0,s.Lk)("a",x,[(0,s.eW)("rfc2396#secion-3.2"),(0,s.bF)(a)]),(0,s.eW)(" 的一句话：")]),w]),f])])]),U,_,(0,s.Lk)("p",null,[(0,s.Lk)("a",R,[(0,s.eW)("http://localhost:8080/struts2/index.jsp"),(0,s.bF)(a)])]),(0,s.Lk)("ul",null,[I,W,q,(0,s.Lk)("li",null,[(0,s.eW)("URI："),(0,s.Lk)("a",y,[(0,s.eW)("/struts2/index.jsp"),(0,s.bF)(a)])])]),E,(0,s.Lk)("p",null,[(0,s.Lk)("a",F,[(0,s.eW)("/struts2/index.jsp"),(0,s.bF)(a)])]),C,(0,s.Lk)("blockquote",null,[A,(0,s.Lk)("p",null,[(0,s.eW)("那么什么情况下需要对一个字符转义呢，引用 "),(0,s.Lk)("a",P,[(0,s.eW)("rfc2395#section-2.2"),(0,s.bF)(a)]),(0,s.eW)(" 的一句话：")]),S]),N,(0,s.Lk)("ul",null,[T,(0,s.Lk)("li",null,[j,(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,[(0,s.Lk)("a",z,[(0,s.eW)("https://www.w3schools.com/tags/ref_urlencode.asp"),(0,s.bF)(a)])]),(0,s.Lk)("li",null,[(0,s.Lk)("a",G,[(0,s.eW)("https://www.w3schools.com/html/html_urlencode.asp"),(0,s.bF)(a)])]),(0,s.Lk)("li",null,[(0,s.Lk)("strong",null,[(0,s.Lk)("a",O,[(0,s.eW)("https://www.w3school.com.cn/tags/html_ref_urlencode.asp"),(0,s.bF)(a)])])])])]),B,(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.Lk)("a",X,[(0,s.eW)("不安全字符 - rfc1738 2.2 节"),(0,s.bF)(a)]),(0,s.eW)("是指那些在 URL 中没有特殊含义，但在 URL 所在的上下文中可能具有特殊意义的字符。不加处理地存在在 URI 里，会破坏 URI 的语义完整性，对于这类字符，如果要出现在 URI 里，那么也得进行转义。")])])]),D,(0,s.Lk)("ul",null,[M,(0,s.Lk)("li",null,[H,(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,[(0,s.eW)("​"),J,(0,s.eW)("​​ 代表网页中的一个位置。其右面的字符，就是该位置的标识符。比如，"),(0,s.Lk)("a",$,[(0,s.eW)("http://www.example.com/index.html#print"),(0,s.bF)(a)]),(0,s.eW)(" 就代表网页 "),Z,(0,s.eW)("​​ 的 "),Y,(0,s.eW)("​​ 位置。浏览器读取这个 URL 后，会自动将 print 位置滚动至可视区域。")]),V])]),(0,s.Lk)("li",null,[K,(0,s.Lk)("p",null,[(0,s.eW)("比如，访问下面的网址，"),(0,s.Lk)("a",Q,[(0,s.eW)("http://www.example.com/index.html#print"),(0,s.bF)(a)]),(0,s.eW)("，浏览器实际发出的请求是这样的")]),nn]),en,(0,s.Lk)("li",null,[an,sn,(0,s.Lk)("p",null,[(0,s.eW)("比如，Google 发现新版 twitter 的 URL："),(0,s.Lk)("a",on,[(0,s.eW)("http://twitter.com/#!/username"),(0,s.bF)(a)]),(0,s.eW)(" 就会自动抓取另一个 URL："),(0,s.Lk)("a",tn,[(0,s.eW)("http://twitter.com/?"),pn,(0,s.eW)("=/username"),(0,s.bF)(a)]),(0,s.eW)(" 。")]),ln]),(0,s.Lk)("li",null,[cn,rn,(0,s.Lk)("p",null,[(0,s.Lk)("a",dn,[(0,s.eW)("http://www.xxx.com/Show.asp?id=77&nameid=2905210001&page=1"),(0,s.bF)(a)])]),un,(0,s.Lk)("p",null,[(0,s.Lk)("a",kn,[(0,s.eW)("http://www.xxxxx.com/index.html"),(0,s.bF)(a)])]),(0,s.Lk)("p",null,[(0,s.Lk)("a",mn,[(0,s.eW)("http://www.xxxxx.com/index.html?test123123"),(0,s.bF)(a)])]),bn]),hn]),vn,(0,s.Lk)("p",null,[(0,s.eW)("我们只关心其中的 "),gn,(0,s.eW)("​，"),Ln,(0,s.eW)("​，"),xn,(0,s.eW)("​，根据 nginx 官方所提供的 "),(0,s.Lk)("a",wn,[(0,s.eW)("nginx 模块和核心 API 介绍"),(0,s.bF)(a)]),(0,s.eW)("，这三个宏的含义如下：")]),fn,(0,s.Lk)("p",null,[(0,s.eW)("而 "),Un,(0,s.eW)("​，处理角度不是整个 URI，而是 domain 之后的 URI 组件，它兼顾 "),_n,(0,s.eW)("​ 和 "),Rn,(0,s.eW)("​ 的保留字符集，更加严格，遵守了 "),(0,s.Lk)("a",In,[(0,s.eW)("rfc3986#section-2.2"),(0,s.bF)(a)]),(0,s.eW)(" 的规范。")]),Wn,(0,s.Lk)("blockquote",null,[(0,s.Lk)("p",null,[(0,s.eW)("Orange 大佬在 black hat 发的一篇关于路径穿越的议题，PDF："),(0,s.Lk)("a",qn,[(0,s.eW)("https://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdf"),(0,s.bF)(a)])])]),yn,(0,s.Lk)("ol",null,[(0,s.Lk)("li",null,[En,(0,s.Lk)("p",null,[(0,s.Lk)("a",Fn,[(0,s.eW)("http://baidu.com@google.com/"),(0,s.bF)(a)]),(0,s.eW)(" 实际访问的是 google")]),Cn,(0,s.Lk)("p",null,[(0,s.eW)("在 2017 年的 Blackhat 大会上，Orange Thai 在 blackhat 中发表的演讲"),(0,s.Lk)("a",An,[(0,s.eW)("《A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages! 》"),(0,s.bF)(a)])]),Pn]),Sn,(0,s.Lk)("li",null,[Nn,(0,s.Lk)("p",null,[(0,s.eW)("【或者使用它】"),(0,s.Lk)("a",Tn,[(0,s.eW)("https://sslip.io/"),(0,s.bF)(a)])])]),jn,(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.eW)("​"),zn,(0,s.eW)("​：把目标的 URL 修改成 IP 地址(如何过滤了 "),Gn,(0,s.eW)("​ 号请使用十进制符号的 IPv4 地址)，这样也有可能绕过 waf 的拦截(IP 地址转换："),(0,s.Lk)("a",On,[(0,s.eW)("http://www.geektools.com/geektools-cgi/ipconv.cgi"),(0,s.bF)(a)]),(0,s.eW)(")")])]),Bn,(0,s.Lk)("li",null,[Xn,(0,s.Lk)("ul",null,[Dn,(0,s.Lk)("li",null,[(0,s.Lk)("p",null,[(0,s.eW)("E.g.："),(0,s.Lk)("a",Mn,[(0,s.eW)("https://hackerone.com/reports/299403"),(0,s.bF)(a)])]),Hn])])]),Jn,(0,s.Lk)("li",null,[$n,(0,s.Lk)("p",null,[(0,s.Lk)("a",Zn,[(0,s.eW)("https://baidu%E3%80%82com"),(0,s.bF)(a)])]),(0,s.Lk)("p",null,[(0,s.eW)("用 url 双编码，比如 "),(0,s.Lk)("a",Yn,[Vn,(0,s.bF)(a)]),(0,s.eW)("​")])])]),Kn,(0,s.Lk)("p",null,[(0,s.eW)("由于 DNS 服务器的解析是由英文代码所构成，所以浏览器会在访问资源前会对域名进行解码，而"),Qn,(0,s.eW)("，我们可以编写简单的 JavaScript 脚本进行 fuzz。"),(0,s.Lk)("a",ne,[(0,s.eW)("实战钓鱼之 url 魔改 (qq.com)"),(0,s.bF)(a)])]),ee,(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,[(0,s.Lk)("a",ae,[(0,s.eW)("浅谈 URI 及其转义 - 又拍云 (upyun.com)"),(0,s.bF)(a)]),(0,s.eW)(" -- 好文")]),(0,s.Lk)("li",null,[(0,s.Lk)("a",se,[(0,s.eW)("Nginx 系列（十九）：URI 转义机制（部分转载）_yang_oh 的博客-CSDN 博客_nginx 转义"),(0,s.bF)(a)])]),(0,s.Lk)("li",null,[(0,s.Lk)("a",oe,[(0,s.eW)("URL 编码与解码_burp url 编码_kendyhj9999 的博客-CSDN 博客"),(0,s.bF)(a)])]),(0,s.Lk)("li",null,[(0,s.Lk)("a",te,[(0,s.eW)("tomcat 对 url 请求中的特殊字符处理 分析_kee_ke 的博客-CSDN 博客_tomcat 特殊字符"),(0,s.bF)(a)])]),(0,s.Lk)("li",null,[(0,s.Lk)("a",pe,[(0,s.eW)("Breaking Parser Logic - Take Your Path Normalization Off and Pop 0days Out (blackhat.com)"),(0,s.bF)(a)])])])])}]]),re=JSON.parse('{"path":"/websec/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/URI%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86.html","title":"URI 相关知识","lang":"zh-CN","frontmatter":{"title":"URI 相关知识","description":"0x01 概述 URI URI，全称是 Uniform Resource Identifiers​，即统一资源标识符。 用于在互联网上标识一个唯一的资源，这里的“资源”表示的是 web 上每一种可用的资源（抽象或者物理资源），如 HTML 文档、图像、视频片段、程序等。 URL URL，全称是 Universal Resource Locator​，即...","head":[["meta",{"property":"og:url","content":"https://github.com/zha0cai/SecWikiPublic/secwiki/websec/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/URI%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86.html"}],["meta",{"property":"og:site_name","content":"One-Piece"}],["meta",{"property":"og:title","content":"URI 相关知识"}],["meta",{"property":"og:description","content":"0x01 概述 URI URI，全称是 Uniform Resource Identifiers​，即统一资源标识符。 用于在互联网上标识一个唯一的资源，这里的“资源”表示的是 web 上每一种可用的资源（抽象或者物理资源），如 HTML 文档、图像、视频片段、程序等。 URL URL，全称是 Universal Resource Locator​，即..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-07T15:10:52.000Z"}],["meta",{"property":"article:author","content":"Mr.zha0cai"}],["meta",{"property":"article:modified_time","content":"2024-04-07T15:10:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"URI 相关知识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-07T15:10:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.zha0cai\\",\\"url\\":\\"https://github.com/zha0cai\\"}]}"]]},"headers":[{"level":2,"title":"URI","slug":"uri","link":"#uri","children":[]},{"level":2,"title":"URL","slug":"url","link":"#url","children":[]},{"level":2,"title":"URN","slug":"urn","link":"#urn","children":[]},{"level":2,"title":"URL 的组成","slug":"url-的组成","link":"#url-的组成","children":[]},{"level":2,"title":"URL 保留字符及编码","slug":"url-保留字符及编码","link":"#url-保留字符及编码","children":[]},{"level":2,"title":"基础元字符字典 Bypass-Payload:List","slug":"基础元字符字典-bypass-payload-list","link":"#基础元字符字典-bypass-payload-list","children":[]}],"git":{"createdTime":1712502652000,"updatedTime":1712502652000,"contributors":[{"name":"zha0cai","email":"111300972+zha0cai@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":19.91,"words":5973},"filePathRelative":"websec/基础知识/URI 相关知识.md","localizedDate":"2024年4月7日","autoDesc":true}')}}]);