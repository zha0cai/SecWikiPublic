{"./":{"url":"./","title":"简介","summary":"gitbook 中文文档，搭建自己的gitbook教程，Gitbook 使用学习演示平台，利用 Gitbook 开源工具搭建的说明文档网站，对 gitbook 插件，gitbook 主题进行了演示分析。对部分失效插件二次开发，确保插件能运行。由于 gitbook 不再维护，反复踩坑之后更新到 honkit 分支，使用更加的顺畅，nodejs 也支持更新的版本。","keywords":"","body":"Gitbook 打造的 Gitbook & Honkit 说明文档 Create by mapull & Revise by zha0cai Honkit 建议直接使用 honkit 代替 gitbook~，nodejs 支持的版本更高，该项目也有在维护。 之后的一些操作命令只需要将 gitbook 换成 honkit 即可。 summary 插件会提取文件夹作为标题​ 如果执行了 npm init 会将当前文件夹转换为 npm 项目，会生成一个 package.json 文件。对应的 gitbook 配置文件就要由 book.json 改为 book.js readme 是书的展示，打开就会看到 readme GitBook 是什么 官方给的定义： GitBook is a command line tool (and Node.js library) for building beautiful books using GitHub/Git and Markdown (or AsciiDoc). GitBook 是基于 Node.js 的开源命令行工具，用于输出漂亮的电子书。 GitBook 支持 Markdown 和 AsciiDoc 两种语法格式，能够输出 html，pdf，epub，mobi等多种格式。 GitBook 特性 Markdown 或 AsciiDoc 语法 多类型支持：网站(html)或电子书 (pdf, epub, mobi) 多语言 目录、大纲 封面 模板和变量 模板继承 插件 主题 缺陷 开源项目停止维护 活跃的开源项目，意味着不断完善的功能，不断修复 bug，及时的反馈，更多社区的帮助... 遗憾的是，GitBook 开源项目已经停止维护，专注打造的 gitbook.com 网站在国内访问受限。 移动端不适配 现在有 PC 端的流量已经赶不上移动端了，但是 GitBook 对移动设备的支持不太友好。 虽然正文部分做到了 responsive，但是菜单栏没有做移动端适配。 大部分插件也没有考虑移动端的情形。 为何出这个文档 作为一个技术宅，经常性的写一些文档，或使用说明，由于很早就接触了博客系统，因此一直使用 markdown 来编写文档。 时间长了，资料越来越多，也越来越乱，它们经常散落在某个角落，内容不系统化，也不方便管理。于是希望有一个工具解决这个问题，然后就找到了 GitBook。(题外话 siyuan 笔记也很好用，gitbook 我主要当 blog 用)诚然，它不是最好的解决方案，很多博客系统提供了专栏功能，很多编辑器如有道云笔记都能通过 markdown 来管理自己的文档。但是它们都不够纯粹，我只希望将自己分散的 markdown 文件组织起来，形成类似一本书，就这个需求来看，GitBook 最符合我的需要。 接下来的内容，都是关于 GitBook 的使用，和 gitbook.com 没有啥关联，如果你希望通过 gitbook.com 来托管你的书籍，可以移步 GitBook.com 为了能更好地阐释 GitBook，我通过 GitBook 生成了一本电子书，来讲述... 总之 gitbook 真的是一眼爱上，作为 blog 也简洁优雅。 选择不同版本 当前的版本是 gitbook 的彩色样式，是 Gitbook 定制的 comscore 主题。 如果想看一下原版的书，可以移步这里，两者的内容完全一致，但是内容更新没有当前版本及时。 Revise by zha0cai Copyright & Copy zha0cai该文件修订时间： 2024-03-29 11:23:24 "},"basic/command.html":{"url":"basic/command.html","title":"基础命令","summary":"学习如何使用 gitbook 基础命令，演示 gitbook 常用命令，关于 gitbook 命令的学习教程。","keywords":"","body":"基础命令 这里主要介绍一下 GitBook 的命令行工具 gitbook-cli 的一些命令, 首先说明两点: gitbook-cli 和 gitbook 是两个软件 gitbook-cli 会将下载的 gitbook 的不同版本放到 ~/.gitbook中, 可以通过设置 GITBOOK_DIR 环境变量来指定另外的文件夹 honkit 是 gitbook-cli 的一个正在维护的分支。 下面会同步介绍 honkit 的一些命令和注意事项。 列出 gitbook 所有的命令： 初始化 gitbook： gitbook init 初始化 honkit: honkit init 该命令主要用户初始化 book，创建必要的 README 和 SUMMARY 文件。 输出 gitbook 的帮助信息： gitbook help D:\\gitbook>gitbook help build [book] [output] build a book --log Minimum log level to display (Default is info; Values are debug, info, warn, error, disabled) --format Format to build to (Default is website; Values are website, json, ebook) --[no-]timing Print timing debug information (Default is false) serve [book] [output] serve the book as a website for testing 输出 honkit 的帮助信息： honkit help PS D:\\xxx\\zha0cai> honkit help Usage: honkit [options] [command] Options: -V, --version output the version number -h, --help display help for command Commands: build [options] [book] [output] build a book serve [options] [book] [output] serve the book as a website for testing parse [options] [book] parse and print debug information about a book init [options] [book] setup and create files for chapters pdf [options] [book] [output] build a book into an ebook file epub [options] [book] [output] build a book into an ebook file mobi [options] [book] [output] build a book into an ebook file help [command] display help for command 输出 gitbook-cli 的帮助信息： gitbook --help D:\\gitbook>gitbook --help Usage: gitbook [options] [command] Options: -v, --gitbook [version] specify GitBook version to use -d, --debug enable verbose error -V, --version Display running versions of gitbook and gitbook-cli -h, --help output usage information Commands: ls List versions installed locally current Display currently activated version ls-remote List remote versions available for install fetch [version] Download and install a alias [folder] [version] Set an alias named pointing to uninstall [version] Uninstall a version update [tag] Update to the latest version of GitBook help List commands for GitBook * run a command with a specific gitbook version 下载所需的资源，如插件等： gitbook install D:\\gitbook\\book2-theme-default>gitbook install info: installing 3 plugins using npm@3.9.2 info: info: installing plugin \"splitter\" info: install plugin \"splitter\" (*) from NPM with version 0.0.8 D:\\gitbook\\book2-theme-default -- gitbook-plugin-splitter@0.0.8 info: >> plugin \"splitter\" installed with success ... 相比之下 honkit 移除了 install 命令 Remove install command Instead of it, just use npm install or yarn install 如果插件比较多，下载会花很长时间。 gitbook 可以用 npm install gitbook-plugin-xxx 这种方式单个下载插件。 honkit 完美兼容了几乎所以的 gitbook 插件，如下安装： Almost all plugins work without changes! Support gitbook-plugin-* packages You should install these plugins via npm or yarn npm install gitbook-plugin- --save-dev 在 honkit 中你可以直接全局安装，只需要加上 -g 参数，那么就不用为每本书都安装插件了。 生成静态网页： gitbook build 指定输出目录 gitbook build ./ ./bookname 参数一：书籍所在的目录，如果执行 build 指令时位于当前项目目录，输入 ./ 参数二：书输出的目录，相对于当前目录 D:\\temp>gitbook build info: 7 plugins are installed info: 6 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 2 pages info: found 4 asset files info: >> generation finished with success in 0.4s ! honkit build 指定输出目录 honkit build ./ ./bookname PS D:\\xxx\\zha0cai> honkit build (node:26172) [DEP0147] DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead (Use `node --trace-deprecation ...` to show where the warning was created) info: 6 plugins are installed info: 6 explicitly listed info: plugin \"versions-select\" is loaded info: plugin \"highlight\" is loaded info: plugin \"search\" is loaded info: plugin \"lunr\" is loaded info: plugin \"fontsettings\" is loaded info: plugin \"theme-default\" is loaded info: found 1 pages info: found 145 asset files info: >> generation finished with success in 0.7s ! 运行完该命令后，会在当前文件夹中生成一个 _book文件夹，其中就是解析出来的静态网站，包含了点子书中的所有信息。 可以将它直接放置在如 nginx 、apache server 、tomcat 等服务器中直接运行。 用浏览器直接打开生成的 html 文件是可以的，但是无法完成基本的交互。 这里 Window 下编译会遇到一个坑，可以参考错误解决章节。 生成静态网页并运行服务器： gitbook serve D:\\temp>gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 2 pages info: found 4 asset files info: >> generation finished with success in 0.5s ! Starting server ... Serving book on http://localhost:4000 用浏览器直接访问 http://localhost:4000/，就可以看到生成的电子书网站。 honkit serve 同理 生成时指定 gitbook 的版本, 本地没有会先下载： gitbook build --gitbook=2.0.1 列出本地所有的 gitbook 版本： gitbook ls D:\\temp>gitbook ls GitBook Versions Installed: * 3.2.3 Run \"gitbook update\" to update to the latest version. 列出远程可用的 gitbook 版本： gitbook ls-remote D:\\temp>gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 gitbook --version 可以得到同样的结果。 C:\\Users\\admin>gitbook --version CLI version: 2.3.2 GitBook version: 3.2.3 安装对应的 gitbook 版本： gitbook fetch 标签/版本号 更新到 gitbook 的最新版本： gitbook update 卸载对应的 gitbook 版本： gitbook uninstall 2.0.1 指定 log 的级别： gitbook build --log=debug log 很有用，就是 --log debug 帮我定位了问题。 输出错误信息： gitbook build --debug D:\\temp\\>gitbook build --debug info: 23 plugins are installed info: 9 explicitly listed info: loading plugin \"splitter\"... OK info: loading plugin \"anchor-navigation-ex\"... OK info: loading plugin \"versions-select\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 28 pages info: found 68 asset files info: >> generation finished with success in 4.6s ! 生成其他格式的文件命令在 扩展章节 GitBook常用命令 gitbook -V 查看版本号 gitbook ls 列出本地所有的 gitbook 版本 gitbook init 初始化 gitbook install 安装插件 gitbook serve 预览 gitbook build 生成 gitbook build --gitbook=2.6.7 生成时指定 gitbook 的版本, 本地没有会先下载 gitbook uninstall 2.6.7 卸载指定版本号的 gitbook gitbook fetch [version] 获取[版本]下载并安装 gitbook --help 显示 gitbook-cli 帮助文档 gitbook help 列出 gitbook 所有的命令 gitbook ls-remote 列出 NPM 上的可用版本 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/vs.html":{"url":"basic/vs.html","title":"GitBook对比","summary":"Gitbook 与 gitbook.com 对比，商业版与开源版对比，gitbook与 git 的对比，gitbook 与 github对比","keywords":"","body":"GitBook 对比 GitBook vs gitbook.com GitBook 是一个命令行工具，是一个基于 Node.js 的开源平台。你可以使用 Markdown 或者 AsciiDoc 语法，加上几个命令就能创建一本漂亮的图书。 GitBook地址：https://github.com/GitbookIO/gitbook gitbook.com 是 GitBook 的商业化运营网站，是由 GitBook 的原班人马打造的基于 GitBook 的现代化的文档平台， 团队可以在其中记录从产品到内部知识库和API的所有内容。 gitBook.com 提供了一个简单高效的图书在线撰写、发布和托管方案， 你可以通过 gitBook.com 进行在线编辑，发布，分享。 gitBook.com 提供的服务对个人用户免费，但是商业版权比较贵。 PK gitbook.com 地址：https://www.gitbook.com/ GitBook 是一个技术工具，gitbook.com 是一个网站。 技术人员更倾向于使用 GitBook 来打造自己个性的电子书，非技术人员可以使用 gitbook.com 提供的功能来满足的自己的需要。 gitbook.com 目前没有在国内建造数据中心，因此，访问受限，很多服务在国内无法使用，能访问的网页速度也相对较慢。 GitBook 目前已经停止维护了，主要精力都在维护 gitbook.com。 使用 GitBook，不需要联网就可以在您的计算机上创建本地书籍。 通过 GitBook.com 网站在线编辑你的书，不用担心电脑故障导致文章丢失，因为它就在云端。 GitBook vs git vs github git同 GitBook 一样，是一个工具。技术人员可能很早就知道 git ,却不一定知道 GitBook，就目前而言，git 是目前世界上最先进的分布式版本控制系统。 同样地，GitBook 和 git 都是开源的，你可以使用 git 提供的版本控制功能，来处理 GitBook 生成的电子书的不同版本。 因此，git 和 GitBook 都是工具， 可以说没有啥关系，要说关联，仅仅是可以搭配使用而已。 github 是 git 这项技术的商业化运营网站，全球最大的一个面向开源及私有软件项目的托管平台。github 提供的服务对个人用户免费，是最大的‘同性交友平台’，目前被微软收购。 GitBook 的源代码托管在 github 平台：https://github.com/GitbookIO/gitbook gitbook.com 提供了与 github 对接的功能，可以方便地将托管在 github 上的 md 文件生成电子书。 如果你没有用过命令行工具，不知道什么是 git, 从来没听说过 github，都不妨碍你使用 gitbook。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/install.html":{"url":"basic/install.html","title":"安装","summary":"如何安装 gitbook, gitbook 与 gitbook-cli，gitbook 版本选择","keywords":"","body":"安装 GitBook的安装非常简单。您的系统只需满足这两个要求： NodeJS（推荐使用v4.0.0及以上版本） Windows，Linux 或 Mac OS X 安装 Node.js 首先我们需要做的是安装 Node.js。大家可以到 Node.js 的中文官网进行下载。 下载完成后，执行双击进行运行安装。 安装完成后，打开 cmd 命令行，输入 node -v 查看安装的 nodejs 的相关版本信息。 Windows 建议安装 nvm 进行 nodejs 和 npm 版本管理，后续会更一篇 nvm 安装文章。 C:\\Users\\admin>node -v v12.14.0 PS C:\\Users\\admin> nvm -v 1.1.12 PS C:\\Users\\admin> nvm -h ... 会有帮助信息 # 查看可以安装的 nodejs 版本 PS C:\\Users\\Zor01478> nvm list available | CURRENT | LTS | OLD STABLE | OLD UNSTABLE | |--------------|--------------|--------------|--------------| | 21.7.1 | 20.12.0 | 0.12.18 | 0.11.16 | | 21.7.0 | 20.11.1 | 0.12.17 | 0.11.15 | # 安装想要的版本 PS C:\\Users\\admin> nvm install 21.7.1 # 切换使用版本 PS C:\\Users\\admin> nvm use 21.7.1 Now using node v21.7.1 (64-bit) Node.js 镜像配置 Node.js 安装完成后，我们就可以开始安装 gitbook 了。但是在安装之前，最好先配置一下Node.js 源的下载镜像地址。 因为默认的镜像地址是在国外，国内访问速度极慢，因此我们需要设置国内的镜像地址。 国内的我推荐大家使用阿里巴巴的镜像地址 http://registry.npm.taobao.org 。 执行下面的命令，进行配置： npm config set registry http://registry.npm.taobao.org 除了上面的方法外，我们也可以在用户主目录下编辑 .npmrc 文件，添加一行 registry=http://registry.npm.taobao.org 保存就可以了。 Windows用户的主目录一般在 C:\\Users\\Administrator ，具体随你的操作系统系统盘而定。 安装 gitbook 执行命令： npm install gitbook-cli -g gitbook-cli 是安装和管理 GitBook 版本库的程序。它会自动安装 GitBook 所需的模块来创建一本书。如果没有安装 gitbook，此命令会默认同时安装 GitBook。 安装完成后，可以执行 gitbook --version 查看安装的版本信息。 第一次执行 gitbook --version 会进行 gitbook 的安装。可能会出错，建议安装低版本的 nodejs。解决办法参考错误解决章节... C:\\Users\\admin>gitbook --version CLI version: 2.3.2 GitBook version: 3.2.3 安装其他版本 gitbook 命令可以方便地下载和安装不同版本的 GitBook 来测试你的书： 使用 gitbook ls-remote 列出可用于安装的远程版本。 C:\\Users\\admin>gitbook ls-remote Available GitBook Versions: 4.0.0-alpha.6, 4.0.0-alpha.5, 4.0.0-alpha.4, 4.0.0-alpha.3, 4.0.0-alpha.2, 4.0.0-alpha.1, 3.2.3.... Tags: latest : 2.6.9 pre : 4.0.0-alpha.6 输出的版本内容比较长，用 ... 省略。 使用 gitbook fetch 可以来指定需要获取的版本。 gitbook fetch 4.0.0-alpha.6 gitbook 卸载 找到C:\\Users\\{User}\\.gitbook 找到并删除此文件夹 删除后执行命令 npm uninstall -g gitbook npm uninstall -g gitbook-cli 清除npm缓存 npm cache clean --force Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:41:22 "},"basic/error.html":{"url":"basic/error.html","title":"错误解决","keywords":"","body":" 记录安装和使用 gitbook 可能会遇到的一些错误。 NPM 运行错误 1 错误描述 npm : 无法加载文件 D:...\\nodejs\\npm.ps1，因为在此系统上禁止运行脚本。 解决办法 在终端输入 get-ExecutionPolicy 查看执行策略/权限； 输出 Restricted (受限制的)； 终端输入 Set-ExecutionPolicy -Scope CurrentUser 命令给用户赋予权限； 输入 RemoteSigned； 终端输入 get-ExecutionPolicy 查看一下权限，显示 RemoteSigned 就可以了。 NPM 运行错误 2 错误描述 javascript - 如何使用 loadVirtual 和 ENOLOCK 修复 npm 审计错误？ ➜ npm audit npm ERR! code ENOLOCK npm ERR! audit This command requires an existing lockfile. npm ERR! audit Try creating one first with: npm i --package-lock-only npm ERR! audit Original error: loadVirtual requires existing shrinkwrap file 我运行 npm audit 并收到此错误。当我在下面运行时:➜ npm config get package-locktrue ➜ npm config get shrinkwraptrue有人可以帮忙吗？至于如何解决？并且 npm audit fix --force 也无法正常工作... 解决办法 npm i --package-lock-only NPM 提示信息 错误描述 1 package is looking for funding run npm fund for details. 1 package is looking for funding run npm fund for details 解决办法 一般不是报错，运行一下 npm fund 就会发现有可能是开源项目寻求 donate。 ​ gitbook init 错误 错误描述 运行 gitbook init 命令报错：TypeError [ERR_INVALID_ARG_TYPE]: The “data” argument must be of type string or an instance of Buffer,TypedArray, or DataView. Received an instance of Promise. 解决办法 nodejs 版本过高导致的。 卸载高版本 node.js，重新安装稍低版本的 node.js（Win 推荐 nvm 进行版本管理） 我之前装的是16版本，降到12版本 就可以了 C:\\book>node -v v12.16.2 C:\\book>gitbook init warn: no summary file in this book info: create README.md info: create SUMMARY.md info: initialization is finished.... gitbook 新版本 \"gitbook build\" 命令导出的 html 不能跳转的解决办法 错误描述 html 无法跳转。由于点击事件被 js 代码禁用，所以点击没有反应，但是如果右键，在新窗口/新标签页打开的话是可以跳转的。 解决办法 找到 js 代码，并修改 找到项目目录 gitbook 找到目录下的 theme.js 文件 找到下面的代码 将 if(m) 改成 if(false) 由于代码是压缩后的，会没有空格，搜索的时候可以直接搜索： if(m)for(n.handler&& 修改保存即可。 node.js - Gitbook-cli 安装错误 TypeError： cb.apply 不是 graceful-fs 中的函数 - 堆栈溢出 错误描述 PS D:\\xxx\\zha0cai> npm install gitbook-cli -g D:\\Java\\nodejs\\gitbook -> D:\\Java\\nodejs\\node_modules\\gitbook-cli\\bin\\gitbook.js + gitbook-cli@2.3.2 added 578 packages from 672 contributors in 99.895s PS D:\\xxx\\zha0cai> gitbook --version CLI version: 2.3.2 Installing GitBook 3.2.3 D:\\Java\\nvm\\v12.22.12\\node_modules\\gitbook-cli\\node_modules\\npm\\node_modules\\graceful-fs\\polyfills.js:287 if (cb) cb.apply(this, arguments) ^ TypeError: cb.apply is not a function at D:\\Java\\nvm\\v12.22.12\\node_modules\\gitbook-cli\\node_modules\\npm\\node_modules\\graceful-fs\\polyfills.js:287:18 at FSReqCallback.oncomplete (fs.js:169:5) 解决办法 方法一：gitbook 安装问题 - polyfills.js:287 - 简书 (jianshu.com) 打开 D:\\Java\\nvm\\v12.22.12\\node_modules\\gitbook-cli\\node_modules\\npm\\node_modules\\graceful-fs\\polyfills.js 搜索 fs.stat 将下面三行代码注释掉 62 - 64 行 //fs.stat = statFix(fs.stat) //fs.fstat = statFix(fs.fstat) //fs.lstat = statFix(fs.lstat) 代替软件：honkit/honkit：HonKit正在使用Markdown构建漂亮的书籍 - GitBook的分叉 方法二：node.js - Gitbook-cli 安装错误 TypeError： cb.apply 不是 graceful-fs 中的函数 - 堆栈溢出 (stackoverflow.com) C:\\Users\\xxx\\AppData\\Local\\Temp\\npm-13732-f16d4b38\\registry.npmjs.org\\gitbook-cli for those who are very busy and have no time to debug: install an older version of gitbook: npm install gitbook-cli@2.1.2 --global modify this file: vim ~/.gitbook/versions/3.2.3/lib/output/website/copyPluginAssets.js, Replace all confirm: true to confirm: false gitbook serve 方法三： cd D:\\Java\\nodejs\\node_modules\\gitbook-cli\\node_modules\\npm\\node_modules npm install graceful-fs@latest --save npm notice created a lockfile as package-lock.json. You should commit this file. + graceful-fs@4.2.10 added 662 packages from 108 contributors, updated 1 package and audited 1018 packages in 202.544s 6 packages are looking for funding run `npm fund` for details found 56 vulnerabilities (4 low, 21 moderate, 23 high, 8 critical) run `npm audit fix` to fix them, or `npm audit` for details 重新执行 PS D:\\xxx\\zha0cai> gitbook --version CLI version: 2.3.2 PS D:\\Mob\\zha0cai> npm install -g gitbook-cli D:\\Java\\nodejs\\gitbook -> D:\\Java\\nodejs\\node_modules\\gitbook-cli\\bin\\gitbook.js + gitbook-cli@2.3.2 removed 662 packages and updated 4 packages in 50.191s PS D:\\xxx\\zha0cai> gitbook --version CLI version: 2.3.2 Installing GitBook 3.2.3 Windows 下 gitbook build 出来的 _book 章节里面会包含 md 文件 错误描述 一个巨坑：==子目录（章节）==Linux build 出来的 _book 只会有 html 静态文件，但是 Windows 编译出来的会 md 和 html 共存。 解决办法 整了我一天茶饭不思后，第二天突然给小麦说了下，他在 Linux 下完美 build ，完全不会出现我这样的问题。那么问题来了，肯定就是 OS 的差异导致的，gitbook build --log debug 查看一下构建的日志。 ​ 可以看到 win 下 copy asset 会把子目录的 md 也一并复制，最终 google 搜索了一波关键字 gitbook build copy asset 关键字。全网独一条，老古董可太难了。。。最终还是 honkit 的一个 issue 解决了困扰我两天的问题。当然，你直接使用 Honkit 就不会有这个问题了。 ​ 我爱他 https://github.com/honkit/honkit/issues/146 https://github.com/honkit/honkit/pull/147/commits/c8cd086cfc24cb16bf425b11311f2520bb70b1a0 修改的文件路径 C:\\Users\\xxx\\.gitbook\\versions\\3.2.3\\lib\\parse\\listAssets.js ​ 罪魁祸首：目录符号的差异 > fs.listallFiles returns paths that use '\\\\' as a path separator on Windows. `pages` object includes paths that uses '/' as a path separator. So replace all '\\\\' of path in function filterFile() Highlight 导致的错误 错误描述 warn: \"this.generator\" property is deprecated, use \"this.output.name\" instead warn: \"navigation\" property is deprecated warn: \"book\" property is deprecated, use \"this\" directly instead warn: \"options\" property is deprecated, use config.get(key) instead Could not find the language 'json:book.json', did you forget to load/include a language module? Error: Unknown language: \"json:book.json\" at _highlight (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\highlight.js\\lib\\core.js:1972:13) at Object.highlight (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\highlight.js\\lib\\core.js:1626:9) at highlight (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\@honkit\\honkit-plugin-highlight\\index.js:36:21) at Object.code (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\@honkit\\honkit-plugin-highlight\\index.js:60:20) 解决办法 观察 build 输出，将 highlight 插件注释掉。(该报错不影响使用~) PS D:\\xxx\\zha0cai\\gitbook-guide-book> honkit build (node:16660) [DEP0147] DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead (Use `node --trace-deprecation ...` to show where the warning was created) info: 13 plugins are installed info: 13 explicitly listed info: plugin \"search-pro\" is loaded info: plugin \"code\" is loaded info: plugin \"splitter\" is loaded info: plugin \"anchor-navigation-ex\" is loaded info: plugin \"expandable-chapters\" is loaded info: plugin \"versions-select\" is loaded info: plugin \"ace\" is loaded info: plugin \"chart\" is loaded info: plugin \"graph\" is loaded info: plugin \"katex\" is loaded info: plugin \"highlight\" is loaded info: plugin \"fontsettings\" is loaded info: plugin \"theme-comscore\" is loaded info: plugin \"theme-default\" is loaded info: found 85 pages info: found 32 asset files init! gitbook 编译出错两个连续大括号 两个连续的大括号会出错，是 Nunjucks 语法应避免在文档中使用它们。Nunjucks Error expected variable end 解决办法。 错误描述 Template render error: (D:\\Mob\\zha0cai\\gitbook-Windows 高级攻防-book\\C 语言程序设计\\05 - 函数、数组与指针.md) [Line 375, Column 25] expected variable end at Object._prettifyError (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\nunjucks\\src\\lib.js:36:11) at Template.render (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\nunjucks\\src\\environment.js:538:21) at Environment.renderString (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\nunjucks\\src\\environment.js:380:17) at Promise.apply (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\q\\q.js:1185:26) at Promise.promise.promiseDispatch (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\q\\q.js:808:41) at D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\q\\q.js:1411:14 at runSingle (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\q\\q.js:137:13) at flush (D:\\Java\\nvm\\v16.17.0\\node_modules\\honkit\\node_modules\\q\\q.js:125:13) at processTicksAndRejections (node:internal/process/task_queues:78:11) # 这样连续的会报错，在代码块里面也不允许连续。 int nArr[3][3] = {{12,15,12}, {15,33,99}, {88,77,44} }; 解决办法 int nArr2[4][3] = { {12,15,12}, {15,33,99}, {88,77,44}, {99, 55, 75} }; 参考 https://github.com/mozilla/nunjucks/issues/650 https://github.com/hexojs/hexo/issues/2384 https://blog.csdn.net/zhangguoliu/article/details/107074037 Markdown 表格中输入“或”符号错乱问题 使用 &#124; 或 &#x7C; 代替 | 如果又要同时显示代码效果，那就 &#124; 编辑 HTML 时，输入&amp;#124; 最终可以显示为 &#124;即用 &amp; 代替 & 输入&lt;code&gt;可以显示为 Copyright & Copy zha0cai该文件修订时间： 2024-03-29 14:19:36 "},"basic/markdown.html":{"url":"basic/markdown.html","title":"Markdown","summary":"gitbook 编写指南，使用 Markdown 制作 gitbook，markdown 基础语法教程","keywords":"","body":"Markdown 什么是 Markdown Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。 它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还支持高亮一段代码、绘制表格等等一些高阶功能。 Markdown 编辑器 Markdown 编辑器非常多，根据使用场景不同，大致可以分为3类： 平台集成：博客系统，如简书、CSDN等 专业软件：Mou(Mac)、MarkdownPad(Win)、Typora(多平台)、Dillinger(网页版)等 插件集成：有些软件本身不支持 Markdown，但可以通过插件完美兼容 Markdown 语法，如 Sublime Text、VS code等 选择顺手的、适合自己的编辑器，能大大提高码字效率。 Markdown 简明语法手册 1. 斜体和粗体 使用 *或者_ 和 **或者__ 表示斜体和粗体。 示例： 这是 *斜体* 这是 _斜体_ 这是 **粗体** 这是 __粗体__ _斜体**中间**加粗_ 这是 斜体 这是 斜体 这是 粗体 这是 粗体 斜体中间加粗 2. 分级标题 在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。 # 这是1个#号的标题 ## 这是2个#号的标题 ### 这是3个#号的标题 #### 这是4个#号的标题 ##### 这是5个#号的标题 ###### 这是6个#号的标题 示例： 这是1个#号的标题 这是2个#号的标题 这是3个#号的标题 这是4个#号的标题 这是5个#号的标题 这是6个#号的标题 3. 外链接 使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 [码谱官网](http://www.mapull.com) 的链接。 这是去往 码谱官网 的链接。 4. 无序列表 使用 *，+，- 表示无序列表。 示例： - 无序列表项 一 - 无序列表项 二 - 无序列表项 三 无序列表项 一 无序列表项 二 无序列表项 三 5. 有序列表 使用数字和点表示有序列表。 示例： 1. 有序列表项 一 2. 有序列表项 二 3. 有序列表项 三 有序列表项 一 有序列表项 二 有序列表项 三 6. 文字引用 使用 > 表示文字引用。 示例： > 野火烧不尽，春风吹又生。 野火烧不尽，春风吹又生。 7. 行内代码块 使用 `代码` 表示行内代码块。 示例： 让我们聊聊 `html`。 让我们聊聊 html。 8. 代码块 使用 四个缩进空格或者tab 表示代码块。 示例： public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello World\"); } } 9. 插入图像 使用 ![描述](图片链接地址) 插入图像。 示例： ![apple](./images/apple.png) 10. 删除线 使用 ~~ 表示删除线。 这是一段错误的文本。 11. 加强的代码块 代码示例： public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello World\"); } } 12. 表格支持 | 项目 | 价格 | 数量 | | -------- | -----: | :----: | | Java | \\$160 | 5 | | PHP | \\$120 | 12 | | Javascript | \\$210 | 23 | 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 13.分隔线 使用三个或多个星号、中划线、下划线创建分隔线： 示例： 三个或更多... --- --- 中划线 *** 星号 ___ 下划线 三个或更多... --- 中划线 星号 下划线 X. Html 标签 如果上面的语法还不能满足你，甚至可以在 Markdown 语法中嵌套 Html 标签。 HTML中的Markdown语法不会解析。 譬如，你可以用 Html 写一个纵跨两行的表格： 值班人员 星期一 星期二 星期三 李强 张** 王* 值班人员 星期一 星期二 星期三 李强 张明 王平 I. 忽略Markdown格式 如果需要忽略Markdown格式，也就是转义Markdown的关键字，只需要在Markdown关键字前使用反斜杠 \\ 即可。 示例： 我不想让\\*\\*星号被解析\\*\\*，下划线 \\_和下划线\\_ 中的文字也不需要处理。 我不想让**星号被解析**，下划线 _和下划线_ 中的文字也不需要处理。 在 markdown 表格中输入 | 竖线用 &#124; 或者 &#x7C; 来代替 参考 How to escape a pipe char in a code statement in a markdown table? HTML ASCII Reference Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/":{"url":"basic/directory/","title":"目录结构","keywords":"","body":"目录结构 GitBook使用SUMMARY文件管理目录结构，文件支持 Markdown 和 Asciidoc 两种语法。 之后的演示都是基于 Markdown 语法。 一个经典的 gitbook 文件目录如下： . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md 每一项简单的说明： 文件 重要性 说明 book.json 可选，非常重要 保存配置文件数据 详情 README.md 必选，重要 简介，书籍的简单介绍 详情 SUMMARY.md 可选，非常重要 目录，控制左边侧边栏 详情 接下来，会详细说明每一种文件的作用。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/readmex.html":{"url":"basic/directory/readmex.html","title":"README.md 文件","summary":"gitbook中 README.md 文件的作用，如何自作 README.md 文件，README.md 文件改名，指定自定义的 README.md 文件","keywords":"","body":"README.md 文件 必要的 README.md 文件 README.md是 gitbook 最基础的文件之一，它一般用来描述这本书最基本的信息。 它呈现给读者这本书最初的样子，如果内容不够简洁明了，很可能就没有看下去的欲望了。 可以通过 gitbook init 自动创建该文件。 使用其他文件替代 README.md 一些项目更愿意将 README.md 文件作为项目的介绍而不是书的介绍。 大部分代码托管平台将 README.md 自动显示到项目首页，如果你不喜欢这样。 从 GitBook >2.0.0 起，就可以在 book.json 中定义某个文件作为 README。 { \"structure\" : { \"readme\" : \"information.md\" } } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/summaryx.html":{"url":"basic/directory/summaryx.html","title":"SUMMARY.md 文件","summary":"SUMMARY.md 文件在 gitbook 中的作用，如何制作 SUMMARY.md 文件，SUMMARY.md 文件自动生成教程。","keywords":"","body":"SUMMARY.md 文件 GitBook使用一个SUMMARY.md文件来定义文档的菜单。 虽说在官方文档中，它是可选的，但是它相当重要，控制了左边菜单栏的显示内容。 它通过 Markdown 中的列表语法来表示文件的父子关系。 紧凑型的 # Summary * [Introduction](README.md) * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) 分散型的 也可以通过使用 标题 或者 水平分割线 标志将 GitBook 分为几个不同的部分。 你看到左侧菜单栏的部分 SUMMARY.md文件 # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) ### Part II * [feedback](part2/feedback.md) * [tools](part2/tools.md) ---- * [Last part](part3/last.md) 自动生成 如果你的 md 文件是少量的，自己编写 SUMMARY.md 文件当然不费事。 但是 md 文件数量非常多时，你可能希望自动生成这些内容，可以参见 插件 summary 部分关于自动生成菜单 summary 文件的介绍。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/book.html":{"url":"basic/directory/book.html","title":"配置文件","summary":"自定义 gitbook 配置文件，详细的 gitbook 配置文件 book.json 是如何生成的，制作 book.json 教程","keywords":"","body":"配置文件 book.json 没有这个文件，也能正常出书。如果你需要个性化添加一些功能，就需要它来配置各种参数。 如果需要这个文件来配置参数，需要手动创建一个 book.json文件。 它必须是标准的 json 文件，格式错误将导致出书失败。 简单示例 简单的 book.json 文件： { \"title\": \"Hello world\", // 书的标题 \"language\":\"en\", // 语言 \"plugins\": [ // 插件 \"code\", // 添加了一个插件 \"-search\" // 去掉了一个插件 ], \"pluginsConfig\": { // 插件的配置 \"code\": { // code 插件配置了一个参数 \"copyButtons\": true } } } 完整的配置 book.json文件是唯一一个 gitbook 的配置文件。 所有的参数都通过该文件传递，因此，配置项比较多，完整的配置选项可以参照 基础配置 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/assist/":{"url":"basic/directory/assist/","title":"辅助文件","keywords":"","body":"辅助文件 辅助文件对于 gitbook 的重要性不是很大，只在个别场景会用到。 如果你只是个人制作电子书，几乎用不到这些文件。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/assist/cover.html":{"url":"basic/directory/assist/cover.html","title":"封面","summary":"如何定制 gitbook 封面，制作 gitbook 文档封面教程，使用插件制作 gitbook 封面。","keywords":"","body":"封面 为了让你的书本在 GitBook 上更加优雅，你可以指定一个封面。 封面由 cover.jpg 文件指定，cover_small.jpg 同样可以作为小版本封面存在。 封面应该是 JPEG 格式的文件。 最佳尺寸 大 小 文件 cover.jpg cover_small.jpg 大小（像素） 1800x2360 200x262 指南 一个好的封面遵循下面的指南： 没有边框 清晰可见的书本标题 任何重要的文字在小版本中应该可见 自动封面 GitBook 插件 (autocover) 同样可以用来为你生成一个封面文件，或者仅仅从大封面中生成 cover_small.jpg。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/assist/glossaryx.html":{"url":"basic/directory/assist/glossaryx.html","title":"词汇表","summary":"如何使用 gitbook 词汇表， glossary.md 文件在 gitbook 中的作用，glossary 使用注意点，gitbook glossary 不支持中文。","keywords":"","body":"词汇表 您可以指定要显示为注释的术语及其相应的定义。 基于这些术语，GitBook 在编译的时候会自动构建索引并在页面中突出显示这些术语。 GLOSSARY.md是一个 h2 标题的列表，以及一个描述段落： ## 猫 全世界家庭中较为广泛的宠物 ## 码谱 学习编程更靠谱 ## javascript 互联网上最流行的脚本语言 ## Java 一门面向对象编程语言 由 **Sun** 公司于 `1995年5月` 推出 ## Programming Language 计算机编程语言 ## min.js 压缩文件的后缀名 鼠标放到词汇上会给出词汇示意，可以将鼠标移到下面两个词汇上看下效果： 猫，属于猫科动物，分家猫、野猫，是全世界家庭中较为广泛的宠物。 码谱 将涵盖多个编程语言 Programming Language 的示例代码，其中 Java 板块的内容较为齐全。 JavaScript 是一种直译式脚本语言,是一种动态类型、弱类型、基于原型的语言。 为了便于在网络传输，经常将 javascript 文件压缩为 min.js 形式。 从上面的示例可看发现这几点： 不支持中文汉字 不支持中文词组 英文单词大小写都可以 其中的 markdown 语法会被忽略 特殊符号 . 可以被识别 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/assist/ignore.html":{"url":"basic/directory/assist/ignore.html","title":"忽略文件","summary":"gitbook 中如何忽略文件，使用 gitignore 文件排除不想要的文件或文件夹","keywords":"","body":"忽略文件 忽略的文件和文件夹 GitBook 将读取.gitignore、.bookignore和.ignore文件，以获取要忽略的文件和文件夹的列表。 被忽略的文件不会被上传到版本中，这些文件中的格式遵循与.gitignore相同的约定： ＃这是一行注释 ＃忽略文件 test.md test.md ＃忽略所有 test 命名的文件 test.* ＃忽略所有 html 类型的文件 *.html ＃忽略目录 test 中的所有内容 test/* Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/assist/language.html":{"url":"basic/directory/assist/language.html","title":"多语言","summary":"如何使用 gitbook 支持多语言，LANGS 文件在 gitbook 中的作用","keywords":"","body":"多语言 LANGS.md GitBook 支持多种语言编写的书籍或者文档。 首先需要在根目录创建一个名为 LANGS.md 的文件，然后按照语言创建子目录： # Languages * [中文](zh/) * [English](en/) * [French](fr/) 每种语言的配置 每个语言(例如：en)目录中都可以有一个 book.json 来定义自己的配置，它将作为主配置的扩展。 唯一的例外是插件，插件是全局指定的，语言环境配置不能指定特定的插件。 示例 你可以从 git 的文档官方查看这种多语言带来的优势。 源代码：https://github.com/progit/progit 电子书：https://git-scm.com/book/en/v2 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/directory/assist/static.html":{"url":"basic/directory/assist/static.html","title":"静态资源","summary":"gitbook 中的静态文件如何处理，gitbook 对于非 markdown 文件的处理","keywords":"","body":"静态资源 静态文件 静态文件是在 SUMMARY.md 中未列出的文件。 除非被忽略，所有静态文件，包含 图片、JS、CSS 都会复制到对应目录下。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"basic/hello.html":{"url":"basic/hello.html","title":"第一本电子书","summary":"通过gitbook制作一本电子书，第一本gitbook电子书制作指南，教你如何制作 gitbook入门","keywords":"","body":"第一本电子书 基于上面的认识，可以用 gitbook 来制作第一本电子书。 初始化环境 现在，需要在一个空文件夹中创建自己的一本书。 首先，在该文件(D:\\temp)下执行命令： gitbook init D:\\temp>gitbook init warn: no summary file in this book info: create README.md info: create SUMMARY.md info: initialization is finished 自动创建了两个文件： README.md 和 SUMMARY.md 添加说明到 README.md # 第一本GitBook 本书由 gitbook 生成。 添加一个 markdown 文件 我新建了一个 hello.md 的文件，并写入如下内容。 # Hello World ### 欢迎语 欢迎你来到 GitBook 的世界，希望这里有你想要的东西。 添加菜单到 SUMMARY.md # Summary * [Introduction](README.md) * [Hello](hello.md) 启动服务 在控制台输入命令：gitbook serve D:\\temp>gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 2 pages info: found 4 asset files info: >> generation finished with success in 0.6s ! Starting server ... Serving book on http://localhost:4000 看到这样的输出，直接在浏览器访问 http://localhost:4000/ 文件目录分析 现在去主文件夹(D:\\temp)看可以看到新生成了一个文件夹 _book . ├── _book ├── hello.md ├── README.md └── SUMMARY.md 打开 文件夹 _book . ├── gitbook | ├── fonts | ├── gitbook-plugin-fontsettings | ├── gitbook-plugin-highlight | ├── gitbook-plugin-livereload | ├── gitbook-plugin-lunr | ├── gitbook-plugin-search | ├── gitbook-plugin-sharing | ├── images | ├── apple-touch-icon-precomposed-152.png | └── favicon.ico | ├── gitbook.js | ├── style.css | └── theme.js ├── hello.html ├── index.html └── search_index.json 这个 文件夹 _book 中包含了点子书中的所有内容，将整个文件夹打包放在任何一个 web 服务器中，都能正常显示。 这是个非常简单的例子，之后通过 book.json 的配置和插件的扩展，能实现更多个性化的功能。 完整创建一本 Book 安装 nvm-windows、通过 nvm 安装 nodejs、npm，之后安装 Honkit。 自行选择对应的你想设置的安装路径即可 ​​ PS C:\\Users\\admin> nvm list available | CURRENT | LTS | OLD STABLE | OLD UNSTABLE | |--------------|--------------|--------------|--------------| | 21.7.1 | 20.12.0 | 0.12.18 | 0.11.16 | | 21.7.0 | 20.11.1 | 0.12.17 | 0.11.15 | PS C:\\Users\\admin> nvm install 21.7.1 Downloading node.js version 21.7.1 (64-bit)... Extracting node and npm... Complete npm v10.5.0 installed successfully. PS C:\\Users\\admin> nvm use 21.7.1 Now using node v21.7.1 (64-bit) 在对应的 Book 目录下执行以下命令进行 Honkit 初始化 # 这一步会生成 package.json 和 packagelock.json 文件 # 主要记录一些 nodejs 项目的依赖信息 gitbook-guide-book> npm init -y # 接着安装 honkit # 这一步会更新 package.json 和 packagelock.json # 会生成 node_modules，初始化完成，以后该 book 安装的插件也会在这个文件夹里面 gitbook-guide-book> npm install honkit --save-dev # 更新一下有漏洞的组件 npm audit fix --force # 初始化 npx honkit init 启动 Honkit # 会生成 _book 文件夹，里面就是本 book 编译后的静态文件 gitbook-guide-book> npx honkit serve 本书用到的插件 npm install gitbook-plugin-code npm i gitbook-plugin-expandable-chapters-interactive npm i gitbook-plugin-versions-select-revised npm i gitbook-plugin-tbfed-pagefooter-fix npm i gitbook-plugin-flexible-alerts npm i gitbook-plugin-advanced-emoji npm i gitbook-plugin-ace-mode-feelpp npm i gitbook-plugin-theme-comscore 本书配置 book.json { \"title\": \"Gitbook&Honkit 指南\", \"language\": \"zh-hans\", \"author\": \"zha0cai\", \"links\": { \"sidebar\": { \"My github\": \"https://github.com/zha0cai\" } }, \"plugins\": [ \"-lunr\", \"-search\", \"search-pro-ling\", \"highlight\", \"code\", \"theme-comscore\", \"-splitter\", \"-summary\", \"anchor-navigation-ex\", \"expandable-chapters-interactive\", \"versions-select-revised\", \"tbfed-pagefooter-fix\", \"flexible-alerts\", \"advanced-emoji\", \"ace\", \"chart\", \"graph\", \"katex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"showGoTop\": true }, \"tbfed-pagefooter\": { \"copyright\":\"Copyright & Copy zha0cai\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"flexible-alerts\": { \"note\": { \"label\": \"Hinweis\" }, \"tip\": { \"label\": \"Tipp\" }, \"warning\": { \"label\": \"Warnung\" }, \"danger\": { \"label\": \"Achtung\" } }, \"chart\": { \"type\": \"c3\" }, \"sitemap-general\": { \"prefix\": \"https://zha0cai.github.io/gitbookPublic/home/\" }, \"versions\": { \"gitbookConfigURL\": \"book.json\", \"options\": [ { \"value\": \"https://zha0cai.github.io/gitbookPublic/gitbook-guide/\", \"text\": \"Gitbook & Honkit 指南\", \"selected\": true }, { \"value\": \"https://zha0cai.github.io/gitbookPublic/home/\", \"text\": \"Home Page\", \"selected\": true } ] } }, \"structure\": { \"readme\": \"home.md\" } } 编译与发布【需要写成脚本自动化】 # gitbook serve [书籍路径] [输出路径] # gitbook build [书籍路径] [输出路径] # 注意输出目录的文件夹会被清空 \\gitbook-guide-book> npx honkit build # 其他 ＃生成 PDF 文件 $ gitbook pdf ./ ./mybook.pdf ＃生成 ePub 文件 $ gitbook epub ./ ./mybook.epub ＃生成 Mobi 文件 $ gitbook mobi ./ ./mybook.mobi Copyright & Copy zha0cai该文件修订时间： 2024-03-29 14:36:22 "},"config/basic.html":{"url":"config/basic.html","title":"基础配置","summary":"配置 gitbook，自定义 gitbook，使用 book.json 文件定制化生成的书籍网站","keywords":"","body":"基础配置 所有的配置都以 JSON 格式存储在名为 book.json 的文件中。 title 设置书本的标题 \"title\" : \"Gitbook 使用\" author 作者的相关信息 \"author\" : \"zha0cai\" description 本书的简单描述，默认是从 README（第一段）中提取的。 \"description\" : \"码谱 & zha0cai 整理的 Gitbook 的配置和使用\" language Gitbook 使用的语言, 版本 2.6.4 中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 配置使用简体中文 \"language\" : \"zh-hans\" gitbook 这个选项是用来指定生成书本的 GitBook 的版本的。 \"gitbook\" : \"3.2.2\", \"gitbook\" : \">=3.0.0\" root 指定存放 GitBook 文件（除了 book.json）的根目录 \"root\": \".\" \"root\": \"./docs\" links 在左侧导航栏添加链接信息 {\"links\" : { \"sidebar\" : { \"首页\" : \"https://zha0cai.github.io/gitbookPublic/home/\" } }} styles 自定义页面样式， 默认情况下各 generator 对应的 css 文件 {\"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" }} 例如使 标签有下边框， 可以在 website.css 中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } plugins 配置使用的插件 { \"plugins\": [ \"github\" ]} 添加新插件之后需要运行 gitbook install 来安装新的插件，建议使用 npm install gitbook-plugin-xxx 来安装对应插件。 Gitbook 默认带有 7 个插件： livereload 热加载插件 highlight 语法高亮插件 search 搜索插件 lunr 搜索插件后台服务 sharing 分享插件 fontsettings 字体设置插件 theme-default 主题 如果要去除自带的插件， 可以在插件名称前面加 - 例如，移除搜索 search 插件： { \"plugins\": [ \"-search\" ] } pluginsConfig 配置插件的属性 { \"pluginsConfig\": { \"fontsettings\": { \"theme\": \"sepia\", \"family\": \"serif\", \"size\": 1 } } } structure 指定 Readme、Summary、Glossary 和 Languages 对应的文件名，下面是这几个文件对应变量以及默认值： 变量 含义 默认值 structure.readme Readme file name README.md structure.summary Summary file name SUMMARY.md structure.glossary Glossary file name GLOSSARY.md structure.languages Languages file name LANGS.md variables { \"variables\": { \"firstbook\": \"Hello World\" } } 这个选项定义在 模板 中使用的变量值。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"config/template.html":{"url":"config/template.html","title":"模板","summary":"使用 gitbook 中的模板，变量，自定义变量的使用，gitbook 中循环 if else 语法教程","keywords":"","body":"模板 GitBook 可使用模板特性来扩展定制化功能。 GitBook 使用 Nunjucks 和 Jinja2 的语法。 语法使用大括号{}来标记需要处理的内容。 变量 变量会从书本内容中寻找对应的值。 如果你想简单地显示一个变量，你可以使用{{variable}}语法。 定义变量 变量被定义在 book.json 文件中： { \"variables\": { \"gitbook-guide\": \"Gitbook 简明教程。\" } } 这样定义了一个变量 gitbook-guide，取值为 \"Gitbook 简明教程。\" 显示变量 定义在 book.json 中的变量可以在 book 作用域下被访问： 这会从书本的变量中寻找 gitbook-guide 并显示它。变量的名字可以存在点 (dot) 来查找属性。你同样可以使用方括号语法。 在页面上{{ book.gitbook-guide }}的语法会被显示为 -> NaN 在页面上{{ book[\"gitbook-guide\"] }}的语法会被显示为 -> 如果对应的值没有定义，那么什么也不会显示。 下面这些语句不会输出任何东西，如果 foo 没有定义的话： {{ book.foo }}，{{ book.foo.far }}，{{ book.foo.bar.baz }}。 在页面上{{ book.foo }}的语法会被显示为 -> 什么都没有被显示出来，是因为根本没有定义该变量。 上下文变量 一些变量也可以用来获取当前文件或 GitBook 实例的信息。 变量内容比较多，参见 变量 标签 标签是在章节和模板中执行操作的特殊块 If if 测试一个条件并让你选择性的显示内容。它的行为的和编程语言中的 if 一样。 如果 variable 被定义了并且是真的，那么 \"变量为真\" 就会被显示出来。否则，没有任何东西会被显示。 {% if variable %} 变量为真 {% endif %} 你可以使用 elif 和 else 来指定选择性条件： {% if hungry %} 我很饿 {% elif tired %} 我很累 {% else %} 我很好！ {% endif %} for for 迭代数组和字典。 让我们来看一下 book.json 中的变量： { \"variables\": { \"ides\": [ { \"name\": \"Eclipse\" }, { \"name\": \"IntelliJ IDEA\" },{ \"name\": \"Visual Studio Code\" } ] } } 编程常用的 IDE： {% for ides in ide %} {{ide.name}} {% endfor %} 上面的例子使用 ides 数组的每项的 name 属性作为显示的值，列出了所有的 IDE。 转义 如果你想要输出任何特殊的目标标签，你可以使用 raw，任何在其中的内容都会原样输出。 {% raw %} 这些内容 {{ 不会被处理 }} {% endraw %} Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"config/variable.html":{"url":"config/variable.html","title":"变量","summary":"gitbook 中如何使用变量，全局变量与局部变量使用教程","keywords":"","body":"变量 Gitbook 内置了特别多的变量，可供模板使用。 全局变量 这些变量是 Gitbook 的基础变量，通过它们可以获取 Gitbook 的基本信息。 变量 说明 book book.json 的全书信息+配置设置。详情请参阅下文。 gitbook GitBook 特定信息 page 当前页特定信息 file 与当前页特定信息相关联的文件 readme 自述相关内容 glossary 词汇相关内容 summary 菜单相关内容 languages 多语言书籍列表 output 输出相关内容 config book.json 相关内容 book 变量 该变量主要是 book.json中配置的数据。如果想自定义变量，book 变量是最佳选择。 变量 说明 book.language 多语言书的当前语言 book.[value] 在 book.json 中的 variables 下的所有其他值都可以在这里访问 举个例子 变量被定义在 book.json 文件中： { \"variables\": { \"gitbook-guide\": \"Gitbook 简明教程。\" } } 这样定义了一个变量 gitbook-guide，取值为 \"Gitbook 简明教程。\" 在页面上{{ book.gitbook-guide }}的语法会被显示为 -> NaN gitbook 变量 该变量用来获取生成 book 的 gitbook 的基本信息，实际价值不大。 变量 说明 gitbook.time 当前时间(当你运行 gitbook 命令时)。 gitbook.version GitBook 用于生成图书的版本 举个例子 该 book 使用的 gitbook 版本用 {{gitbook.version}} 显示为 -> 5.1.4 file 变量 该变量用来获取此文件的相关信息。 变量 说明 file.path 原始页面的路径 file.mtime 修改时间，上次修改文件的时间 file.type 用于编译此文件的语法解析器的名称(例如：markdown，asciidoc 等) 举个例子 该文件使用的解析器的名称用 {{file.type}} 显示为 -> markdown page 变量 该变量用来获取当前页面的信息。 变量 说明 page.title 页面标题 page.previous 内容表中的前一页(可以是 “null”) page.next 内容表中的下一页(可以是 “null”) page.dir 文本方向，基于配置(rtl 或 ltr) 举个例子 当前页面的下一页 {{page.previous.path}} 显示为 -> config/template.md 当前页面的标题 {{page.title}} 显示为 -> 变量 其他变量 变量 说明 summary.parts 内容列表，可以访问整个目录(SUMMARY.md) languages.list 本书的语言环境列表 output.name 输出生成器的名称，可能的值是 website，json，ebook output.format 当 output.name ==“ebook”，format 定义将生成的电子书格式，可能的值是 pdf，epub 或 mobi readme.path 自述文件的路径 glossary.path 词汇表的路径 举几个例子 summary.parts[0].articles[0].title 将返回第一篇文章的标题 -> 简介 本书的提供的词汇表的路径 {{glossary.path}} 显示为 -> 本书使用的生成器名称 {{output.name}} 显示为 -> website Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"config/extends.html":{"url":"config/extends.html","title":"继承","summary":"使用 gitbook 中的继承来扩展功能，gitbook的继承知识教程。","keywords":"","body":"继承 模板继承是一种重复使用模板的简单方式。 当写完一个模板，你可以定义 \"block\" 让子模板来替换。 继承链可以任意长。 block 在模板中定义了一个区域并用一个名字标识了它。 基类模板可以指定一些块，而子类可以用新的内容替换它们。 {% extends \"./common.md\" %} {% block pageContent %} This is my page content {% endblock %} 在文件 common.md 中，你应该指定用来替换内容的块。 {% block pageContent %} This is the default content {% endblock %} {% include \"./footer.md\" %} Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/":{"url":"custom/plugin/","title":"插件","summary":"gitbook 中常用插件的教程，演示如何使用 gitbook 常见插件，自定义 gitbook 插件","keywords":"","body":"插件 记录一些实用的插件, 如果要指定插件的版本可以使用 plugin@0.3.1。 Gitbook默认带有7个插件（功能性5个，搜索有两个，主题一个）： livereload 热加载插件 highlight 语法高亮插件 search 搜索插件 lunr 搜索插件后台服务 sharing 分享插件 fontsettings 字体设置插件 theme-default 主题 下面的插件在 GitBook 的 3.2.3 版本中可以正常工作，因为一些插件可能不会随着 GitBook 版本的升级而升级，即下面的插件可能不适用高版本的 GitBook。 另外本文记录的插件在 windows 下都是可以正确工作的， Linux 系统没有测试。 这里只是列举了一部分插件，如果有其它的需求，可以到 插件官网 区搜索相关插件。 大部分插件都针对默认主题的，如果指定了其他主题插件，可能会导致部分插件失效或显示错乱。 由于 Gitbook 的原创团队重心偏向 gitbook.com 的运行，目前 插件官网 https://plugins.gitbook.com 已无法打开。 示例中给出的插件链接换成了 github 的地址 插件参考地址 gitbook插件 - 简书 (jianshu.com) 【已解决】gitbook安装代码高亮插件：Prism – 在路上 (crifan.com) （我本人没这个需求） gitbook常用的插件 - SegmentFault 思否 插件安装提示 插件的说明文档中，一般都建议使用下面的方式安装插件： gitbook install 但是这种方式下载比较慢，推荐使用 npm 方式安装插件。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-xxx Honkit 全局安装插件 npm install gitbook-plugin-xxx --save-dev -g 使用全局安装插件就不用创建每一本 book 都安装一遍插件，多出一个 node_modules 文件夹。 D:\\Java\\nvm\\v16.17.0\\node_modules 必备插件 https://www.npmjs.com/package/gitbook-plugin 插件仓库。 // json 文档对注释不友好，所以在此统一添加说明；当然也可以将文件夹（npm init ）初始化为 npm 项目使用 book.js 作为配置文件。 // 插件列表 \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\", \"highlight\", \"code\", \"theme-comscore\", \"-splitter\", \"-summary\", \"anchor-navigation-ex\", \"expandable-chapters\", \"versions-select\", \"tbfed-pagefooter\", \"flexible-alerts\", \"advanced-emoji\" ], // honkit 安装 gitbook 插件 -g 表示全局 npm install gitbook-plugin-search-pro --save-dev -g npm install gitbook-plugin-code --save-dev -g npm install gitbook-plugin-theme-comscore --save-dev -g npm install gitbook-plugin-splitter --save-dev -g npm install gitbook-plugin-anchor-navigation-ex --save-dev -g npm install gitbook-plugin-expandable-chapters --save-dev -g npm install gitbook-plugin-versions-select --save-dev -g npm install gitbook-plugin-summary --save-dev -g npm install gitbook-plugin-ace --save-dev -g npm install gitbook-plugin-chart --save-dev -g npm install gitbook-plugin-graph --save-dev -g npm install gitbook-plugin-katex --save-dev -g { \"title\": \"Windows 高级攻防\", \"language\": \"zh-hans\", \"author\": \"zha0cai\", \"links\": { \"sidebar\": { \"My github\": \"https://github.com/zha0cai\" } }, \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\", \"highlight\", \"code\", \"theme-comscore\", \"-splitter\", \"-summary\", \"anchor-navigation-ex\", \"expandable-chapters\", \"versions-select\", \"tbfed-pagefooter\", \"flexible-alerts\", \"advanced-emoji\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"showGoTop\": true }, \"tbfed-pagefooter\": { \"copyright\":\"Copyright & Copy zha0cai\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"flexible-alerts\": { \"note\": { \"label\": \"Hinweis\" }, \"tip\": { \"label\": \"Tipp\" }, \"warning\": { \"label\": \"Warnung\" }, \"danger\": { \"label\": \"Achtung\" } }, \"chart\": { \"type\": \"c3\" }, \"versions\": { \"gitbookConfigURL\": \"book.json\", \"options\": [ { \"value\": \"https://zha0cai.github.io/gitbookPublic/gitbook-Windows 高级攻防/\", \"text\": \"Windows 高级攻防\", \"selected\": true }, { \"value\": \"https://zha0cai.github.io/gitbookPublic/home/\", \"text\": \"Home Page\", \"selected\": true } ] } } } 插件使用 \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\", -- 这里的名字要对应 gitboo-plugin-xxxx，后面这 xxx 部分，不然在 node_modules 里面会找不到插件 ], Copyright & Copy zha0cai该文件修订时间： 2024-03-29 13:47:34 "},"custom/plugin/common/":{"url":"custom/plugin/common/","title":"通用","summary":"gitbook 常用 插件, gitbook-plugin 使用教程","keywords":"","body":"常用插件 常用插件是关注度比较多，更大众化的插件，大多数电子书都可以利用这些插件扩展。 - alerts 提示框的增强 - anchor 锚点 - chapter 菜单折叠 - code 代码行号、复制 - favicon 网站的小图标 - github 链接到 github 仓库 - tbfed-pagefooter 页脚说明 - prism 代码着色（本书没用，默认足以~） - search 增强中文搜索 - section 文本折叠 - sharing 分享增强（本书暂时也没有） - splitter 菜单动态伸缩（暂时没用） - statistics 搜索引擎点击统计，百度统计，谷歌统计（暂时没用） - versions-select 版本切换插件 - theme-comscore 彩色主题 - summary 自动生成 summary - anchor-navigation-ex 悬浮目录和返回顶部插件（与下面的二选一） - back-to-top-button 返回顶部 - expandable-chapters 目录折叠插件 - advanced-emoji 支持 emoji 表情 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/alerts.html":{"url":"custom/plugin/common/alerts.html","title":"Alerts","summary":"gitbook alert 插件, gitbook-plugin-flexible-alerts 使用教程","keywords":"","body":"Alerts Gitbook 插件：对提示框的增强。 有两个类似的插件： gitbook-plugin-alerts gitbook-plugin-flexible-alerts 下面的插件是增强版，这里使用第二个。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-flexible-alerts https://github.com/zanfab/gitbook-plugin-flexible-alerts#readme 添加不同 alerts 样式的 blockquotes，目前包含四种样式： NOTE TIP WARNING DANGER { \"plugins\": [\"flexible-alerts\"] } 下面是使用示例： Info styling > [!NOTE] > An alert of type 'note' using global style 'callout'. Info flat > [!NOTE|style:flat] > An alert of type 'note' using alert specific style 'flat' which overrides global style 'callout'. Tip style > [!TIP|style:flat|label:My own heading|iconVisibility:hidden] > An alert of type 'tip' using alert specific style 'flat' which overrides global style 'callout'. > In addition, this alert uses an own heading and hides specific icon. Warning styling > **[!WARNING] For warning** > Use this for warning messages. danger styling > **[!DANGER] For danger** > Use this for danger messages. 效果如下所示： Info styling [!NOTE] An alert of type 'note' using global style 'callout'. Info flat [!NOTE|style:flat] An alert of type 'note' using alert specific style 'flat' which overrides global style 'callout'. Tip style [!TIP|style:flat|label:My own heading|iconVisibility:hidden] An alert of type 'tip' using alert specific style 'flat' which overrides global style 'callout'. In addition, this alert uses an own heading and hides specific icon. Warning styling [!WARNING] For warning Use this for warning messages. danger styling [!DANGER] For danger Use this for danger messages. Copyright & Copy zha0cai该文件修订时间： 2024-03-29 13:44:13 "},"custom/plugin/common/anchor.html":{"url":"custom/plugin/common/anchor.html","title":"锚点","summary":"gitbook 锚点插件, gitbook-plugin-anchors, gitbook-plugin-anchor-navigation-ex, back-to-top-button 使用教程","keywords":"","body":"锚点 Gitbook 插件：用来显示锚点，快速跳转到某个地方。 Anchors 添加 Github 风格的锚点样式 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-anchors https://github.com/rlmv/gitbook-plugin-anchors \"plugins\" : [ \"anchors\" ] 下面的这个插件是增强版，功能比较全。 Anchor-navigation-ex 添加 Toc 到侧边悬浮导航以及回到顶部按钮。需要注意以下两点： 本插件只会提取 h1,h2,h3 标签作为悬浮导航 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-anchor-navigation-ex 这个版本的配置项非常多，也有中文版的说明： https://github.com/zq99299/gitbook-plugin-anchor-navigation-ex 只有按照以下顺序嵌套才会被提取 # h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"showGoTop\": true, \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } 效果： 该主题启用了此插件，可以用插件的配置\"showGoTop\": true实现 返回顶部 功能。 back-to-top-button 如果想单独实现 返回顶部 功能，可以使用该插件。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-back-to-top-button { \"plugins\": [ \"back-to-top-button\" ] } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/chapter.html":{"url":"custom/plugin/common/chapter.html","title":"toggle-chapters","summary":"gitbook 菜单折叠展开 插件, gitbook-plugin-chapter-fold，gitbook-plugin-expandable-chapters 使用教程","keywords":"","body":"toggle-chapters GitBook 插件：用于菜单收起、折叠、展开功能。 chapter-fold 默认只在目录导航中显示章的标题，而不会显示小节的标题。 插件的效果是：点击每一章或者每一节会显示当前章或节的子目录，如果有的话，但是同时会收起其它之前展开的章节。 现在左边的菜单栏就是这个插件实现的。 使用这种插件有个弊端，就是无法知道整本书的结构，有利有弊吧。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-chapter-fold { \"plugins\": [ \"chapter-fold\" ] } 插件需要 SUMMARY 文件中的格式相对规范： ## III 定制化 * [插件](custom/plugin/README.md) * [通用](custom/plugin/common/README.md) * [Alerts](custom/plugin/common/alerts.md) expandable-chapters [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-expandable-chapters 这个插件也有问题，就是如下写法的，需要点击箭头才能展开收缩菜单： ## III 定制化 * [插件](custom/plugin/README.md) * [通用](custom/plugin/common/README.md) { \"plugins\": [ \"expandable-chapters\" ] } 本教程使用了该插件，效果如右边菜单栏。 如果发现使用其中的一个插件效果不好，可以一起使用，看看是不是有效： { \"plugins\": [ \"expandable-chapters\", \"chapter-fold\" ] } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/code.html":{"url":"custom/plugin/common/code.html","title":"code","summary":"gitbook 代码行号与复制代码插件, gitbook-plugin-code，gitbook-plugin-copy-code-button 使用教程","keywords":"","body":"code GitBook 插件：为代码块添加复制的图标。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-code { \"plugins\": [ \"code\" ], \"pluginsConfig\": { \"code\": { \"copyButtons\": true } } } 添加了代码的 行号，右上角还多了一个复制的图标，点击复制后图标变成 对号。 当前版本启用了该插件。 Copy-code-button 为代码块添加复制的按钮。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-copy-code-button https://github.com/WebEngage/gitbook-plugin-copy-code-button { \"plugins\": [\"copy-code-button\"] } 效果如下图所示： 使用这个插件不好的地方是，图标显得有点突兀，可能和当前主题不搭。 还有就是点击 Copy 以后，会全选当前的代码，有点奇怪。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/expand.html":{"url":"custom/plugin/common/expand.html","title":"折叠菜单","summary":"gitbook 使左侧的章节目录可以折叠 插件, gitbook-plugin-expandable-chapters-small 使用教程","keywords":"","body":"折叠菜单 GitBook 插件：使左侧的章节目录可以折叠 Expandable-chapters-small 使左侧的章节目录可以折叠 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-expandable-chapters-small { \"plugins\": [\"expandable-chapters-small\"] } 能做到这种功能的插件非常多，当前版本启用了类似的功能，是通过 chapter 插件实现的。 Honkit 使用这个插件有效：章节折叠/展开用这个插件 expandable-chapters-interactive Copyright & Copy zha0cai该文件修订时间： 2024-03-29 13:43:45 "},"custom/plugin/common/favicon.html":{"url":"custom/plugin/common/favicon.html","title":"favicon","summary":"gitbook 更改网站的 favicon.ico 插件, gitbook-plugin-favicon 使用教程","keywords":"","body":"favicon GitBook插件：更改网站的 favicon.ico，浏览器标题栏的图标。gitbook 默认图标是一本书，黑白色。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-favicon https://github.com/menduo/gitbook-plugin-favicon { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } 注意以下几点 1、图标的格式一定要是 .ico 的，直接修改图片的后缀为 .ico 是无效的。 2、图标的分辨率要是 32*32 的。 3、可在线把图片转成图标：http://www.bitbug.net/ Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/github.html":{"url":"custom/plugin/common/github.html","title":"Github","summary":"gitbook 添加 github 图标 插件, gitbook-plugin-github 使用教程","keywords":"","body":"Github Gitbook 插件：添加 github 图标 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-github 安装完竟然无法使用： GitBook doesn't satisfy the requirements of this plugin: >=4.0.0-alpha.0. 如果跟我一样报错，可以卸载后指定版本试试。 npm uninstall gitbook-plugin-github npm i gitbook-plugin-github@2.0.0 https://github.com/GitbookIO/plugin-github { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/your/repo\" } } } 效果就是，在页面右上角有个 github 小图标 ，点击小图标跳转到对应的 Github 地址。 Github Buttons 添加项目在 github 上的 star，watch，fork 情况 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-github-buttons https://github.com/azu/gitbook-plugin-github-buttons { \"plugins\": [ \"github-buttons\" ], \"pluginsConfig\": { \"github-buttons\": { \"buttons\": [{ \"user\": \"cj96248\", \"repo\": \"pikashop-parent\", \"type\": \"star\", \"size\": \"large\" }, { \"user\": \"cj96248\", \"type\": \"follow\", \"width\": \"230\", \"count\": false }] } } } 上面的配置会生成两个图标： Star 图标： Star 直达 github 仓库地址。 Follow 图标： Follow @zha0cai 直达 github 作者关注页面。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/pagefooter.html":{"url":"custom/plugin/common/pagefooter.html","title":"Tbfed-pagefooter","summary":"gitbook 为页面添加页脚，自定义页脚插件, gitbook-plugin-tbfed-pagefooter 使用教程","keywords":"","body":"Tbfed-pagefooter Gitbook 插件：为页面添加页脚: 版权声明 修订时间 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-tbfed-pagefooter https://github.com/zhj3618/gitbook-plugin-tbfed-pagefooter \"plugins\": [ \"tbfed-pagefooter\" ] { \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright & copy zha0cai 2022\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 不过有个缺点，会在底部加一句英语 powered by Gitbook. 但是之后会提到，可以用一个插件隐藏元素去掉这句话。 其他主题均开启了该插件，可以从左上角的版本下拉菜单中选项不同的教程，看到该插件的效果。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/prism.html":{"url":"custom/plugin/common/prism.html","title":"Prism","summary":"gitbook 代码语法高亮 插件, gitbook-plugin-prism 使用教程","keywords":"","body":"Prism 使用 Prism.js 为语法添加高亮显示，开启插件时需要将 highlight 插件去掉。 该插件自带的主题样式较少，可以再安装 prism-themes 插件，里面多提供了几种样式。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-prism https://github.com/gaearon/gitbook-plugin-prism { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ] } } } 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"] { border: none; background-color: #f7f7f7; font-size: 1em; line-height: 1.2em; } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/search.html":{"url":"custom/plugin/common/search.html","title":"Search Plus","summary":"gitbook 支持中文搜索 插件, gitbook-plugin-search-plus, gitbook-plugin-search-pro 使用教程","keywords":"","body":"搜索增强 Search Plus Gitbook 插件：支持中文搜索, 需要将默认的 search 和 lunr 插件去掉。 需要 gitbook 的版本 >= 3.0.0 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-search-plus https://github.com/lwdgit/gitbook-plugin-search-plus { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } 当前版本的搜索功能使用了该插件。 Search Pro 插件 Search Pro 也能支持搜索中文。 需要 gitbook 的版本 >= 3.0.0 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-search-pro { \"plugins\": [\"-lunr\", \"-search\", \"search-pro\"] } 经过测试，两个插件都能达到搜索中文的效果。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/section.html":{"url":"custom/plugin/common/section.html","title":"页面分块","summary":"gitbook 将页面内容分块显示折叠 插件, gitbook-plugin-sectionx 使用教程","keywords":"","body":"页面分块 Gitbook 插件：将页面分块显示 Sectionx [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-sectionx https://github.com/ymcatar/gitbook-plugin-sectionx 标签的 tag 最好是使用 b 标签，如果使用 h1-h6 可能会和其他插件冲突。 { \"plugins\": [ \"sectionx\" ], \"pluginsConfig\": { \"sectionx\": { \"tag\": \"b\" } } } 上面 tag 标签，可选值：h1, h2, h3, h4, h5, h6, b 使用方法 在 md 文档中，使用语法： 这里是 markdown 内容 1 这里是 markdown 内容 2 这里是内容 3 参数的作用 data-title：收缩模块的标题，大小在插件参数配置里面配置，注意：HTML 中实体字符要转义 data-id：收缩模块的 id，用于插件的控制按钮，下面讲解 data-show：模式默认是收缩还是展开的，true：展开，false：隐藏 data-nopdf：在 pdf 中显示的情况，设为 true 不显示 data-collapse：其中的数据是否默认显示 使用示例 ### 内部的标题最大从 h3 开始 里面可以写**任何** 的 `markdown`代码。 很开心能找到想要的插件 也可以通过一个 button 来触发折叠： #### 内部的标题 h4 里面可以写**任何** 的 `markdown`代码。 很开心能找到想要的插件 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/sharing.html":{"url":"custom/plugin/common/sharing.html","title":"Sharing-plus","summary":"gitbook 分享当前页面增强 插件, gitbook-plugin-sharing-plus 使用教程","keywords":"","body":"Sharing-plus Gitbook 插件：分享当前页面，比默认的 sharing 插件多了一些分享方式。 分享增强插件。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-sharing-plus plugins: [\"-sharing\", \"sharing-plus\"] 配置: { \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": true, \"linkedin\": true, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": true, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\", \"linkedin\", \"pocket\", \"stumbleupon\" ] } } } 开启插件后，会在页面右上角增加分享到对应平台的图标。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/splitter.html":{"url":"custom/plugin/common/splitter.html","title":"Splitter","summary":"gitbook 使侧边栏的宽度可以自由调节 插件, gitbook-plugin-splitter 使用教程","keywords":"","body":"Splitter Gitbook 插件：使侧边栏的宽度可以自由调节 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-splitter https://github.com/yoshidax/gitbook-plugin-splitter {\"plugins\": [ \"splitter\" ]} 效果： 当前版本没有启用该插件，因为本站的标题本身都不长，启动该插件有点多余 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/statistics.html":{"url":"custom/plugin/common/statistics.html","title":"统计","summary":"gitbook 搜索引擎统计，百度统计，谷歌统计 插件, gitbook-plugin-ga，gitbook-plugin-3-ba，gitbook-plugin-baidu 使用教程","keywords":"","body":"统计 Gitbook 插件：用于搜索引擎统计。 Google 统计 GA [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-ga https://github.com/GitbookIO/plugin-ga \"plugins\": [ \"ga\" ], \"pluginsConfig\": { \"ga\": { \"token\": \"UA-XXXX-Y\" } } 由于不使用 Google 统计，就不演示了。 此类插件的原理是插入统计的 js 脚本到 head 中。 百度统计 3-ba 百度统计插件，本站使用了该插件。 它的工作原理是在页面的请求 head 中添加统计的 js 代码。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-3-ba https://github.com/FrankFang/gitbook3-plugin-ba { \"plugins\": [\"3-ba\"], \"pluginsConfig\": { \"3-ba\": { \"token\": \"xxxxxxxx\" } } } 启动以后，可以在浏览器中用 F12 看一下源代码是否包含如下片段： baidu 这个插件名字是对的，就是功能不生效，如果要使用百度统计，请使用上面那个。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-baidu https://github.com/poppinlp/gitbook-plugin-baidu { \"plugin\": [\"baidu\"], \"pluginsConfig\": { \"baidu\": { \"token\": \"YOUR TOKEN\" } } } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/toc.html":{"url":"custom/plugin/common/toc.html","title":"toc","summary":"gitbook 自动生成本页的目录结构 插件, gitbook-plugin-atoc，gitbook-plugin-simple-page-toc使用教程","keywords":"","body":"toc Gitbook 插件：自动生成本页的目录结构。 atoc [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-atoc https://github.com/willin/gitbook-plugin-atoc { \"plugins\": [\"atoc\"], \"pluginsConfig\": { \"atoc\": { \"addClass\": true, \"className\": \"atoc\" } } } 在网页中插入代码 就能生成本页目录。 Simple-page-toc 自动生成本页的目录结构。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-simple-page-toc { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 使用方法: 在需要生成目录的地方加上 本书没有使用~ Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/common/versions.html":{"url":"custom/plugin/common/versions.html","title":"versions-select","summary":"gitbook 添加版本选择的下拉菜单，多版本控制，多语言版本插件, gitbook-plugin-versions-select 使用教程","keywords":"","body":"versions-select Gitbook 插件：添加版本选择的下拉菜单 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install --save gitbook-plugin-versions-select 添加版本选择的下拉菜单，针对文档有多个版本的情况。 https://github.com/prescottprue/gitbook-plugin-versions-select { \"plugins\": [ \"versions-select\" ], \"pluginsConfig\": { \"versions\": { \"options\": [ { \"value\": \"https://www.mapull.com/gitbook/api/\", \"text\": \"API 主题\" }, { \"value\": \"https://www.mapull.com/gitbook/default/\", \"text\": \"默认主题\", \"selected\": true } ] } } } 我们可以自定义 css 来修改 select 的显示样式： .versions-select select { height: 2em; line-height: 2em; border-radius: 4px; background: #efefef; } 效果见左上角。 Copyright & Copy zha0cai该文件修订时间： 2024-03-29 13:44:36 "},"custom/plugin/other/":{"url":"custom/plugin/other/","title":"其他","keywords":"","body":"其他插件 这里是一些专业用途的插件，是给gitbook 某些功能的。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/Klipse.html":{"url":"custom/plugin/other/Klipse.html","title":"Klipse","summary":"gitbook 集成 `Klipse`在线编辑代码，执行代码 插件, gitbook-plugin-klipse 使用教程，插件在线演示","keywords":"","body":"Klipse Gitbook 插件：集成 Klipse (online code evaluator) 可以用来在线编辑代码：支持的代码有 clojure, javascript, python, ruby, scheme 和 php [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-klipse { \"plugins\": [\"klipse\"] } https://github.com/brian-dawn/gitbook-plugin-klipse 插件使用到了 google 的库，开启的时候，明显网页会慢一些。如果不会 DIY，最好慎用。 klipse 目前支持下面的语言： javascript: 执行完以后 format 打印结果 clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter 使用示例： js 使用 [1,2,3].map(function(x) { return x + 1;}) 修改代码中的数字，可以直接显示答案： [1,2,3].map(function(x) { return x + 1;}) python 使用 print [x + 1 for x in range(10)] 修改代码中的数字，可以直接显示答案： print [x + 1 for x in range(10)] PHP 使用 $var = [\"a\" => 1]; var_dump($var); 修改代码中的数字，可以直接显示答案： $var = [\"a\" => 1]; var_dump($var); [!WARNING|style:callout|iconVisibility:hidden|label:注意] 如果页面内容显示不完整，请 F5 刷新当前页面 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/Terminal.html":{"url":"custom/plugin/other/Terminal.html","title":"Terminal","summary":"gitbook 模拟终端显示  Terminal 插件, gitbook-plugin-terminal 使用教程，插件在线演示","keywords":"","body":"Terminal Gitbook 插件：模拟终端显示，主要用于显示命令以及多行输出，不过写起来有些麻烦。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-terminal { \"plugins\": [ \"terminal\" ], \"pluginsConfig\": { \"terminal\": { \"copyButtons\": true, \"fade\": false, \"style\": \"flat\" } } } 支持的标签 现在支持 6 种标签： command: Command \"executed\" in the terminal. delimiter: Sequence of characters between the prompt and the command. error: Error message. path: Directory path shown in the prompt. prompt: Prompt of the user. warning: Warning message. 标签的使用格式如下所示： **[ 内容] 为了使标签正常工作，需要在代码块的第一行加入 **[termial] 标记，下面是一个完整的示例： 效果如下所示： **[terminal] **[prompt foo@joe]**[path ~]**[delimiter $ ]**[command ./myscript] Normal output line. Nothing special here... But... You can add some colors. What about a warning message? **[warning [WARNING] The color depends on the theme. Could look normal too] What about an error message? **[error [ERROR] This is not the error you are looking for] terminal 支持下面 5 种样式，如果需要更换样式，在 pluginsConfig 里配置即可。 black: 黑色样式 classic: 绿色样式 flat: 浅色 ubuntu: 紫色，ubuntu 样式 white: 白色，与 gitbook 基础色调一致 下面演示一下 terminal 内置的几种样式： [!WARNING|style:callout|iconVisibility:hidden|label:注意] 如果页面内容显示不完整，请 F5 刷新当前页面 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/ace.html":{"url":"custom/plugin/other/ace.html","title":"Ace Plugin","summary":"gitbook ace 插件, gitbook-plugin-ace 使用教程","keywords":"","body":"Ace Plugin Gitbook 插件：使 GitBook 支持 ace 。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-ace https://github.com/ymcatar/gitbook-plugin-ace { \"plugins\": [ \"ace\" ]} 使用示例 // This is a hello world program for C. #include int main(){ printf(\"Hello World!\"); return 1; } // This is a hello world program for C. #include int main(){ printf(\"Hello World!\"); return 1; } [!WARNING|style:callout|iconVisibility:hidden|label:注意] 如果页面内容显示不完整，请 F5 刷新当前页面 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 16:49:28 "},"custom/plugin/other/codeblock.html":{"url":"custom/plugin/other/codeblock.html","title":"codeblock-filename","summary":"gitbook 可以为代码添加一个文件名 插件, gitbook-plugin-include-codeblock 使用教程","keywords":"","body":"codeblock-filename codeblock-filename Gitbook 插件：可以为代码添加一个文件名 codeblock-filename 可以为代码添加一个文件名，以便显示当前代码段属于的文件。 include-codeblock Gitbook 插件：通过引用文件插入代码 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-include-codeblock https://github.com/azu/gitbook-plugin-include-codeblock { \"plugins\": [ \"include-codeblock\" ] } 语法 [import:\"tag\",option0:\"value0\", ...](path/to/file) 举例 [include](fixtures/test.js) [import](fixtures/test.js) 必须是一行，不能嵌套使用： Example of code [import](fixtures/test.js) 这种方式不会生效 更多详细的例子参见 github Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/csv.html":{"url":"custom/plugin/other/csv.html","title":"Include-csv","summary":"gitbook 支持 csv 文件 插件, gitbook-plugin-include-csv 使用教程","keywords":"","body":"Include-csv Gitbook 插件：展示 csv 文件。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install --save gitbook-plugin-include-csv https://github.com/TakuroFukamizu/gitbook-plugin-include-csv { \"plugins\": [\"include-csv\"] } 使用示例1： {% includeCsv src=\"./demo.csv\", useHeader=\"true\" %} {% endincludeCsv %} 其中， demo.csv 中的内容： 编程语言,排名,份额 Java, 1,16.88 C , 2,16.18 Python, 3,9.09 效果如下所示： 编程语言 排名 份额 Java 1 16.88 C 2 16.18 Python 3 9.09 使用示例2： {% includeCsv %} hoge,fuga a,0001 b,002 {% endincludeCsv %} 效果如下所示： 编程语言 排名 份额 Java 1 16.88 C 2 16.18 Python 3 9.09 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/disqus.html":{"url":"custom/plugin/other/disqus.html","title":"Disqus","summary":"gitbook 页面评论 插件, gitbook-plugin-disqus，gitbook-plugin-gitalk 使用教程，插件在线演示","keywords":"","body":"评论 GitBook 插件：用于页面评论 Disqus 评论 Disqus 是一个非常流行的为网站集成评论系统的工具。 gitbook 可以集成 disqus 以便可以和读者交流。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-disqus 首先，需要在 disqus https://disqus.com/ 上注册一个账号，然后添加一个 website，这会获得一个关键字，然后在集成时配置这个关键字即可。 插件地址 虽然是一个不错的插件，但是 Disqus 在国内无法正常使用。 如果是国外服务服务器，面向海外用户，该插件效果还是不错的。 { \"plugins\": [ \"disqus\" ], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"mapull\" } } } shortName是在 Disqus 申请的唯一码。 gitalk 评论 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-gitalk https://github.com/snowdreams1006/gitbook-plugin-mygitalk 和上面插件基本类似。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/donate.html":{"url":"custom/plugin/other/donate.html","title":"Donate","summary":"gitbook 打赏插件，显示二维码插件 插件, gitbook-plugin-donate 使用教程","keywords":"","body":"Donate Gitbook 插件：打赏插件，显示二维码插件。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-donate https://github.com/willin/gitbook-plugin-donate { \"plugins\": [\"donate\"], \"pluginsConfig\": { \"donate\": { \"wechat\": \"例：/images/qr.png\", \"alipay\": \"http://blog.willin.wang/static/images/qr.png\", \"title\": \"默认空\", \"button\": \"默认值：Donate\", \"alipayText\": \"默认值：支付宝捐赠\", \"wechatText\": \"默认值：微信捐赠\" } } } 虽然这个插件名称是捐赠插件，实际是显示一个或两个二维码。 比如，当前版本的 反馈 功能就是用该插件显示了一个微信二维码。 使用的配置信息： { \"pluginsConfig\": { \"donate\": { \"wechat\": \"/gitbook.png\", \"button\": \"反馈\", \"wechatText\": \"微信扫码\" } } } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/download.html":{"url":"custom/plugin/other/download.html","title":"下载文件","summary":"gitbook 下载 PDF 文件文件，下载按钮 插件, gitbook-plugin-download-pdf-link，gitbook-plugin-my-toolbar 使用教程","keywords":"","body":"下载PDF文件 download-pdf-link Gitbook 插件：使 GitBook 支持下载 PDF 文件 。 插件只是支持下载 pdf 文件，这个 pdf 文件是需要提前准备好的。 如果生成 pdf 文件，参照 导出PDF [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-download-pdf-link https://github.com/armandfardeau/gitbook-plugin-download-pdf-link { \"plugins\": [\"download-pdf-link\"], \"pluginsConfig\": { \"download-pdf-link\": { \"base\": \"http://localhost:4000/book.pdf\", \"label\": { \"en\": \"Download PDF\", \"zh-hans\": \"下载PDF\" } } } } 这个插件没有试验成功： http://localhost:4000/book.pdf/lang= ENOENT: no such file or directory, stat 'D:\\gitbook\\book-theme-comscore\\_book\\book.pdf\\index.html' pdf-multi-link 插件官网竟然把配置信息写错了。 https://github.com/armandfardeau/gitbook-plugin-download-pdf-link { \"plugins\": [\"pdf-multi-link\"], \"pluginsConfig\": { \"pdf-multi-link\": { \"base\": \"http://localhost:4000/book.pdf\", \"label\": { \"en\": \"Download PDF\", \"zh-hans\": \"下载 PDF\" } } } } 这个插件又没有试验成功： http://localhost:4000/book.pdf/ ENOENT: no such file or directory, stat 'D:\\gitbook\\book-theme-comscore\\_book\\book.pdf\\index.html' 放弃了这个思路 看了一下源代码，好像两个插件都有点问题，还有其他的几个 download 文件的插件好像都不咋行。 更奇怪的是，我设置了语言，但是代码不生效，显示下面的效果： [object Object] 另谋思路 从源代码看，这个下载功能实际上是将 pdf 的链接用一个按钮显示了出来。 toolbar Gitbook 插件：添加一个按钮到顶部的菜单栏。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-toolbar https://github.com/Simran-B/gitbook-plugin-toolbar {\"plugins\": [\"toolbar\"]} { \"toolbar\": { \"buttons\": [ { \"label\": \"下载PDF\", \"icon\": \"fa fa-file-pdf-o\", \"url\": \"http://localhost:4000/book.pdf\", \"target\": \"_blank\" } ] } } 用了这个插件，发现它只显示图标，无法显示文字。于是下面这个插件出现了。 my-toolbar Gitbook 插件：添加一个按钮到顶部的菜单栏。是基于上面的插件改版的。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-my-toolbar https://github.com/neutree/gitbook-plugin-my-toolbar { \"my-toolbar\": { \"buttons\": [ { \"label\": \"下载PDF\", \"icon\": \"fa fa-file-pdf-o\", \"url\": \"http://localhost:4000/book.pdf\", \"position\":\"left\", \"text\": \"下载PDF\", \"target\": \"_blank\" } ] } } 终于在左上角看到了下面的效果： 下载PDF 点击按钮后，在 Chorme上正确显示（Chrome 上会显示 PDF 内容，页面的右上角有浏览器自带的下载、打印等功能）。 当前页面的下载功能是利用该插件实现的，为了保证性能，只有该页面开启了此功能，并且 PDF 文件只是用来演示。 [!WARNING|style:callout|iconVisibility:hidden|label:注意] 如果页面内容显示不完整，请 F5 刷新当前页面 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/edit.html":{"url":"custom/plugin/other/edit.html","title":"Edit Link","summary":"gitbook 在页面上显示编辑按钮 插件, gitbook-plugin-edit-link 使用教程","keywords":"","body":"Edit Link Gitbook 插件：用来在页面上显示编辑按钮。 如果将 GitBook 的源文件保存到 github 或者其他的仓库上，使用该插件可以链接到当前页的源文件上。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-edit-link 点击编辑按钮，即可跳转到 github 仓库在线编辑这个文件。 { \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } } 不过，这个编辑功能在 github 登录时，可以正常跳转，否则会直接到 github 的登录页面。 不过本书发布的是编译后的，所以没有使用该插件。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/emoji.html":{"url":"custom/plugin/other/emoji.html","title":"Advanced Emoji","summary":"gitbook 支持 emoji 表情 插件, gitbook-plugin-advanced-emoji 使用教程","keywords":"","body":"Advanced Emoji Gitbook 插件：支持 emoji 表情 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-advanced-emoji https://github.com/codeclou/gitbook-plugin-advanced-emoji {\"plugins\": [ \"advanced-emoji\" ]} 使用示例： :bowtie: :smile: :laughing: :blush: :smiley: :relaxed: :white_check_mark: Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/emphasize.html":{"url":"custom/plugin/other/emphasize.html","title":"Emphasize","summary":"gitbook 为文字加上底色 插件, gitbook-plugin-emphasize 使用教程","keywords":"","body":"Emphasize Gitbook 插件：为文字加上底色 插件地址 {\"plugins\": [ \"emphasize\" ]} 使用示例 {% raw %} This text is {% em %}highlighted !{% endem %} This text is {% em %}highlighted with **markdown**!{% endem %} This text is {% em type=\"green\" %}highlighted in green!{% endem %} This text is {% em type=\"red\" %}highlighted in red!{% endem %} This text is {% em color=\"#ff0000\" %}highlighted with a custom color!{% endem %} {% endraw %} 显示的效果： This text is highlighted ! This text is highlighted with markdown! This text is highlighted in green! This text is highlighted in red! This text is highlighted with a custom color! Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/hideelement.html":{"url":"custom/plugin/other/hideelement.html","title":"隐藏元素","summary":"gitbook 隐藏不想看到的元素 插件, gitbook-plugin-hide-element 使用教程","keywords":"","body":"隐藏元素 Gitbook 插件：可以隐藏不想看到的元素，比如导航栏中Published by GitBook。 hide-element是通过 HTML 元素的 class 名字来查找要隐藏的元素，想要隐藏元素找到元素的样式类名加到插件配置里面就可以隐藏元素了。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-hide-element 在book.json的 plugins 参数中添加插件名和配置信息： { \"plugins\": [ \"hide-element\" ], \"pluginsConfig\": { \"hide-element\": { \"elements\": [\".gitbook-link\"] } } } 上面的配置信息中设置了隐藏的类名，所以Published by GitBook 、本书使用 GitBook 发布 就看不见了。 为了尊重原版版权，该插件未开启。 Gitbook 版权声明 Gitbook 默认在左侧菜单的最下方生成了一句话，Published by GitBook，[不同的语言，菜单左下角的版权信息不一样。] Gitbook 没有提供去掉该信息的配置。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/mermaid.html":{"url":"custom/plugin/other/mermaid.html","title":"Mermaid-gb3","summary":"gitbook 支持渲染 Mermaid 图表 插件, gitbook-plugin-mermaid，gitbook-plugin-mermaid-gb3 使用教程，插件在线演示","keywords":"","body":"Mermaid Gitbook 插件：支持渲染 Mermaid 图表 Mermaid [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-mermaid https://github.com/JozoVilcek/gitbook-plugin-mermaid 这个插件的依赖比较多，下载时间有点长。 我最终没有下载成功，于是使用了下面的 mermaid-gb3 这个插件。 {\"plugins\": [ \"mermaid-gb3\" ]} 使用语法 效果展示 Mermaid-gb3 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-mermaid-gb3 https://github.com/chriswessels/gitbook-plugin-mermaid-gb3 { \"plugins\": [ \"mermaid-gb3\" ] } 两个插件语法几乎一致。 Flow 流程图 graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Sequence 时序图 sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Gantt 甘特图 gantt section Section Completed :done, des1, 2020-01-06,2020-01-08 Active :active, des2, 2020-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d gantt section Section Completed :done, des1, 2020-01-06,2020-01-08 Active :active, des2, 2020-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d state 状态转移图 stateDiagram [*] --> First First --> Second First --> Third state First { [*] --> fir fir --> [*] } state Second { [*] --> sec sec --> [*] } state Third { [*] --> thi thi --> [*] } stateDiagram [*] --> First First --> Second First --> Third state First { [*] --> fir fir --> [*] } state Second { [*] --> sec sec --> [*] } state Third { [*] --> thi thi --> [*] } [!WARNING|style:callout|iconVisibility:hidden|label:注意] 如果页面内容显示不完整，请 F5 刷新当前页面 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/puml.html":{"url":"custom/plugin/other/puml.html","title":"Puml","summary":"gitbook 使用 `PlantUML` 展示 uml 图 插件, gitbook-plugin-puml 使用教程，插件在线演示","keywords":"","body":"Puml Gitbook 插件：使用 PlantUML 展示 uml 图。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install --save gitbook-plugin-puml https://github.com/GitbookIO/plugin-puml PlantUML 地址：http://plantuml.com/ { \"plugins\": [\"puml\"] } 使用示例 {% plantuml %} Class Stage Class Timeout { +constructor:function(cfg) +timeout:function(ctx) +overdue:function(ctx) +stage: Stage } Stage 效果如下所示： Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/rss.html":{"url":"custom/plugin/other/rss.html","title":"RSS","summary":"gitbook 添加 rss 订阅功能 插件, gitbook-plugin-rss 使用教程，插件在线演示","keywords":"","body":"RSS Gitbook 插件：添加 rss 订阅功能。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-rss https://github.com/denysdovhan/gitbook-plugin-rss { \"plugins\": [ \"rss\" ], \"pluginsConfig\": { \"rss\": { \"title\": \"GitBook 使用教程\", \"description\": \"记录 GitBook 的配置和一些插件的使用\", \"author\": \"zha0cai\", \"feed_url\": \"https://www.zha0cai.com/rss\", \"site_url\": \"https://www.zha0cai.com/\", \"managingEditor\": \"zha0cai@test.com\", \"webMaster\": \"zha0cai@test.com\", \"categories\": [ \"gitbook\" ] } } } 使用后，会在页面右上角添加一个 rss 的图标。 rss 的图标： Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/sitemap.html":{"url":"custom/plugin/other/sitemap.html","title":"Sitemap-general","summary":"gitbook 用来生成网站地图 sitemap，搜索引擎使用 插件, gitbook-plugin-sitemap 使用教程，插件在线演示","keywords":"","body":"sitemap Gitbook 插件：用来生成网站地图 sitemap sitemap 生成 sitemap [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-sitemap https://github.com/GitbookIO/plugin-sitemap { \"plugins\": [\"sitemap\"], \"pluginsConfig\": { \"hostname\": { \"prefix\": \"https://www.mapull.com\" } } } https://mapull.com/gitbook/./ weekly 0.5 https://mapull.com/gitbook/basic/command.html weekly 0.5 查看了sitemap.xml文件内容，不满足当前 百度 等搜索引擎的 sitemap 规则，没有修改时间 sitemap-general 生成的 sitemap 在 ./sitemap.xml [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-sitemap-general { \"plugins\": [\"sitemap-general\"], \"pluginsConfig\": { \"sitemap-general\": { \"prefix\": \"https://cyberzhg.gitbooks.io/clrs/content/\" } } } 用这个插件试了一下，好像也不行，生成的 sitemap.xml 文件内容和上面的插件一样。 之后，所有 sitemap 相关的插件都试了一遍，均不符合要求，然后只能作罢。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/summary.html":{"url":"custom/plugin/other/summary.html","title":"summary","summary":"gitbook 自动生成 `summary.md` 文件内容 插件, gitbook-plugin-summary 使用教程，插件在线演示","keywords":"","body":"gitbook-plugin-summary Gitbook 插件：自动生成 summary.md 文件内容，如果有很多 md 文件，这个插件可以帮助你生成初始版本。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-summary 如果需要自定义，生成一遍之后，建议去掉该插件。 该插件每次打包都会重新生成 summary.md 文件，如果手动修改了其中的内容会被覆盖掉。 如下是生成的一个示例，它不是标准的 SUMMARY 文件，因此某些插件无法识别。 ## basic - [GitBook 基础命令](basic/command.md) - [directory.md](basic/directory.md) - [directory](basic/directory/README.md) - [assist]() - [忽略文件](basic/directory/assist/ignore.md) - [LANGS.md](basic/directory/assist/language.md) - [静态文件](basic/directory/assist/static.md) - [词汇表](basic/directory/assist/terms.md) - [book.json](basic/directory/book.md) - [common.md](basic/directory/common.md) - [README.md 文件](basic/directory/readmex.md) - [SUMMARY.md 文件](basic/directory/summaryx.md) - [hello.md](basic/hello.md) - [安装 Node.js](basic/install.md) - [Markdown](basic/markdown.md) - [对比](basic/vs.md) ## config - [基础配置](config/basic.md) Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/todo.html":{"url":"custom/plugin/other/todo.html","title":"todo","summary":"gitbook 添加 Todo 功能 插件, gitbook-plugin-todo 使用教程，插件在线演示","keywords":"","body":"todo Gitbook 插件：添加 Todo 功能。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/image.html":{"url":"custom/plugin/other/image.html","title":"图片","summary":"gitbook 图片显示优化相关 插件, gitbook-plugin-image-captions 使用教程，插件在线演示","keywords":"","body":"图片 Gitbook 插件：Gitbook 图片显示优化相关插件。 Image Captions 抓取内容中图片的 alt 或 title 属性，在图片下面显示标题 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-image-captions https://github.com/todvora/gitbook-plugin-image-captions { \"plugins\": [ \"image-captions\" ] } 可以自定义显示信息： { \"pluginsConfig\": { \"image-captions\": { \"caption\": \"Image - _CAPTION_\" } } } 其中的 _CAPTION_ 会被替换为图片的 title或者 alt caption几个取值： _PAGE_LEVEL_ : chapters 序号 _PAGE_IMAGE_NUMBER_：图片在章节中的序号 _BOOK_IMAGE_NUMBER_：图片在整本书中的序号 举个例子 本主题没有启用该功能，下图是一个示例： 使用的配置： { \"plugins\": [\"image-captions\"], \"pluginsConfig\": { \"image-captions\": { \"caption\": \"Image - _CAPTION_\" } } } 显示的效果： Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/question.html":{"url":"custom/plugin/other/question.html","title":"题目","summary":"gitbook 制作在线知识问答，选择题，填空题，隐藏答案插件, gitbook-plugin-mcqx，gitbook-plugin-fbqx 使用教程，插件在线演示","keywords":"","body":"题目 Gitbook 插件：可以生成选择题，填空题等常见问题题型。 选择题 mcqx Gitbook 插件：生成类似选择题的效果。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-mcqx https://github.com/ymcatar/gitbook-plugin-mcqx 填空题 fbqx Gitbook 插件：生成类似填空题的效果。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-fbqx https://github.com/Erwin-Chan/gitbook-plugin-fbqx 使用语法 {%fbq%} Testing the plugin, enter the word \"hello\" into the field __, \"world\" into __. {%endfbq%} https://ymcatar.gitbooks.io/gitbook-test/content/testing_fbqx.html 回答以后，不能再次回答。 在页面左上角有一个清除历史的标识 ，点击以后就可以再次回答问题了。 隐藏答案 spoiler https://github.com/manchiyiu/gitbook-plugin-spoiler 隐藏答案，当鼠标划过时才显示. [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-spoiler https://ymcatar.gitbooks.io/gitbook-test/content/testing_spoiler.html Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/other/video.html":{"url":"custom/plugin/other/video.html","title":"Local Video","summary":"gitbook 支持视频播放 插件, gitbook-plugin-local-video 使用教程，插件在线演示","keywords":"","body":"Local Video Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/":{"url":"custom/plugin/custom/","title":"开发插件","summary":"如何开发自己的 gitbook 插件，","keywords":"","body":"开发插件 大多数时候，现有的插件就能满足需求。 如果需要的功能还没有插件实现，可能需要自己开发插件。 下面的内容主要是关于如何创建自己的插件。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/block.html":{"url":"custom/plugin/custom/block.html","title":"块","summary":"gitbook 开发自己的插件主题，gitbook 使用块 block。","keywords":"","body":"块 扩展块是为作者提供额外功能的最佳方式。 最常见的用法是在运行时处理某些标记内的内容。它像 filters。 定义一个新的块 块 由插件定义，块是与块描述符相关联的名称的映射。块描述符需要至少包含一个 process 方法。 module.exports = { blocks: { tag1: { process: function(block) { return \"Hello \"+block.body+\", How are you?\"; } } } }; process 返回替换的 html 标签内容。 处理块参数 参数可以传递给块： {% tag1 \"argument 1\", \"argument 2\", name=\"Test\" %} This is the body of the block. {% endtag1 %} 参数在 process 方法中很容易访问： module.exports = { blocks: { tag1: { process: function(block) { // block.args equals [\"argument 1\", \"argument 2\"] // block.kwargs equals { \"name\": \"Test\" } } } } }; 处理子块 定义的块可以被拆分成不同的子块，例如： {% myTag %} Main body {% subblock1 %} Body of sub-block 1 {% subblock 2 %} Body of sub-block 1 {% endmyTag %} Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/context.html":{"url":"custom/plugin/custom/context.html","title":"Context和APIs","summary":"GitBook 为插件提供了不同的 API 和上下文Context","keywords":"","body":"Context 和 APIs GitBook 为插件提供了不同的 API 和上下文。这些 API 可以根据使用的 GitBook 版本，你的插件应该在 package.json 中指定 engines.gitbook 字段。 Book实例 Book 类是 GitBook 的中心点，它集中了所有的访问读取方法。这个类在[book.js]（https://github.com/GitbookIO/gitbook/blob/master/book.js）中定义。 //从 book.json 读取配置 var value = book.config.get('title','Default Value'); //将文件名解析为绝对路径 var filepath = book.resolve('README.md'); //呈现内联标记字符串 book.renderInline('markdown','This is ** Markdown **') .then(function(str){...}) //呈现标记字符串（块模式） book.renderBlock('markdown','*这是** Markdown **') .then(function(str){...}) 输出实例 Output 类代表输出/写入过程。 //返回输出的根文件夹 var root = output.root(); //解析输出文件夹中的文件 var filepath = output.resolve('myimage.png'); //将文件名转换为 URL（返回html文件的路径） var fileurl = output.toURL('mychapter / README.md'); //在输出文件夹中写入一个文件 output.writeFile('hello.txt','Hello World') .then(function(){...}); //将文件复制到输出文件夹 output.copyFile('./ myfile.jpg','cover.jpg') .then(function(){...}); //验证文件是否存在 output.hasFile('hello.txt') .then(function(exists){...}); 页面实例 页面实例表示当前已解析页面。 //页面标题（摘自摘要） 页面标题 //页面内容（Markdown / Asciidoc / HTML根据阶段） page.content //书中的相对路径 page.path //文件的绝对路径 page.rawPath //用于此文件的解析器的类型 page.type('markdown'或'asciidoc') 块和筛选器的上下文 块和过滤器可以访问相同的上下文，此上下文绑定到模板引擎执行： { //当前模板语法 \"ctx\":{ //例如，在{％set message =“hello”％}之后 \"message\":\"hello\" }, // Book instance \"book\":\"\", //输出实例 \"output\":\"\" } 例如，过滤器或块函数可以使用：this.book 访问当前书。 钩子的上下文 钩子只能使用 this.book 访问 实例。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/create.html":{"url":"custom/plugin/custom/create.html","title":"创建和发布插件","summary":"GitBook 创建和发布插件","keywords":"","body":"创建和发布插件 GitBook 插件是在 NPM 上发布的遵循定义的约定的节点包。 结构体 package.json package.json 是用于描述 Node.js 模块的清单格式。 GitBook 插件构建在 Node 模块之上，它声明了在 GitBook 中运行插件所需的依赖性，版本，所有权和其他信息。 插件清单 package.json 还可以包含有关所需配置的详细信息。 在 package.json 中配置 gitbook 字段，需要遵循 JSON-Schema 准则： { \"name\": \"gitbook-plugin-test-demo\", \"version\": \"1.0.0\", \"description\": \"This GitBook plugin is a test demo\", \"engines\": { \"gitbook\": \">3.x.x\" }, \"gitbook\": { \"properties\": { \"myConfigKey\": { \"type\": \"string\", \"default\": \"default value\", \"description\": \"It defines my awesome config!\" } } } } 你可以从 NPM 文档了解更多关于 package.json 的内容。 包名称必须以 gitbook-plugin- 开头，包引擎应该包含 gitbook。 index.js index.js 是插件运行时的入口： module.exports = { // Map of hooks hooks: {}, // Map of new blocks blocks: {}, // Map of new filters filters: {} }; 发布您的插件 GitBook 插件可以在NPM上发布。 要发布新插件，您需要在 npmjs.com 上创建一个帐户，然后通过命令行发布： $ npm publish 专用插件 专用插件可以托管在 GitHub 上，并使用 git urls： { \"plugins\": [ \"myplugin@git+https://github.com/account/gitbookplugintest.git#1.0.0\" ] } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/filter.html":{"url":"custom/plugin/custom/filter.html","title":"过滤器","keywords":"","body":"过滤器 Gitbook filters 过滤器用来对变量进行函数操作： 常见过滤器 filters 自定义 Gitbook 过滤器 过器本质上是可以应用于变量的函数。它们用管道操作符 (|) 调用，并且可以接受参数。 {{ foo | title }} {{ foo | join(\",\") }} {{ foo | replace(\"foo\", \"bar\") | capitalize }} 第三个例子显示了如何链式使用过滤器。首先用 “bar” 替换 “foo”，然后将其大写，最后输出为 “Bar”。 Gitbook 常见过滤器 filters - - - - abs capitalize center default dump escape safe join length list lower replace reverse round slice sum sort string title trim truncate upper urlencode wordcount 这些 filters 基本都能见名知意。 比较常用的 default 可以简写 为 d，escape可以简写 为 e。 定义过滤器 可以在过滤器的入口自定义函数来扩展过滤器。 过滤器函数将要过滤的内容作为第一个参数，并应返回新内容。 module.exports = { filters: { hello: function(name) { return 'Hello '+name; } } }; 过滤器 hello 然后可以在书中使用： {{ \"Aaron\"|hello }}, how are you? 处理块参数 参数可以传递到过滤器： Hello {{ \"Samy\"|fullName(\"Pesse\", man=true)}} 参数传递给函数，命名参数作为最后一个参数(对象)传递。 module.exports = { filters: { fullName: function(firstName, lastName, kwargs) { var name = firstName + ' ' + lastName; if (kwargs.man) name = \"Mr\" + name; else name = \"Mrs\" + name; return name; } } }; Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/func.html":{"url":"custom/plugin/custom/func.html","title":"回调函数","summary":"GitBook 回调函数 \"init\",\"page:before\"","keywords":"","body":"回调函数 回调函数通过自定义回调来增强或改变进程行为的方法。 回调函数全局属性 名称 说明 参数 init 在解析书之后，生成输出页面之前调用。 无 finish：before 在生成输出页面后调用，在复制资源，生成封面之前调用 无 finish 所有操作完成后调用。 无 页面属性 名称 说明 参数 page:before 在页上运行模板引擎之前调用 页面对象 page 在输出和索引页面之前调用。 页面对象 建议使用 模板 来扩展页面解析。 页对象 { // Parser named \"type\": \"markdown\", // File Path relative to book root \"path\": \"page.md\", // Absolute file path \"rawpath\": \"/usr/...\", // Title of the page in the SUMMARY \"title\": \"\", // Content of the page // Markdown/Asciidoc in \"page:before\" // HTML in \"page\" \"content\": \"# Hello\" } 添加标题的示例 在 page：before 钩子中，page.content 是 markdown/asciidoc 内容。 { \"page:before\": function(page) { page.content = \"# Title\\n\" +page.content; return page; } } 替换一些 html 的示例 在 page 回调函数中，将 page.content 中 标签替换为 。 { \"page\": function(page) { page.content = page.content.replace(\"\", \"\") .replace(\"\", \"\"); return page; } } 异步操作 回调函数可以异步返回。 例如： { \"init\": function() { return writeSomeFile() .then(function() { return writeAnotherFile(); }); } } Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/test.html":{"url":"custom/plugin/custom/test.html","title":"测试插件","keywords":"","body":"测试插件 在本地测试你的插件 使用 npm link 可以在发布之前测试你的插件。 在插件的文件夹中，运行： $ npm link 然后在您的书或者文档的文件夹中执行： $ npm link gitbook-plugin- Travis 的单元测试 gitbook-tester 可以方便地为你的插件编写 Node.js/Mocha 单元测试。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/plugin/custom/hello.html":{"url":"custom/plugin/custom/hello.html","title":"制作第一个插件","summary":"手把手教你如何制作自己的 gitbook plugin 插件，演示 gitbook 插件的制作教程","keywords":"","body":"制作第一个 gitbook 插件 起个名字 gitbook 规定，插件必须是以 gitbook-plugin 开头，一般插件名称类似 gitbook-plugin-xxx 其中 xxx 是你插件的名称，可以先去 npm.js官网 查看是否名称存在。 或者使用命令行，也可以查看： E:\\gitbook\\>npm search gitbook-plugin-mapull-default No matches found for \"gitbook-plugin-mapull-default\" 这样表示名称可以用，可以继续操作。 要是有类似下面这样的输出，就说明不能使用这个名字，需要换个名称。 E:\\gitbook\\>npm search gitbook-plugin-search NAME | DESCRIPTION | AUTHOR | DATE | VERSION | KEYWORDS gitbook-plugin-search | Search input for… | =jpreynat… | 2016-04-20 | 2.2.1 | github 创建 github 账号 首先去 github 官网申请账号，有的话最好了。 创建 github 项目 创建一个 public 的项目，名称就是上面的那个 gitbook-plugin-xxx，这里我使用的名称是 gitbook-plugin-mapull-default。 是 mapull 站点的 gitbook 专属插件。 Clone仓库到本地 在计算机的任意目录，clone 项目： E:\\temp>git clone https://github.com/mapull/gitbook-plugin-mapull-default.git Cloning into 'gitbook-plugin-mapull-default'... remote: Enumerating objects: 21, done. remote: Counting objects: 100% (21/21), done. remote: Compressing objects: 100% (14/14), done. remote: Total 21 (delta 2), reused 21 (delta 2), pack-reused 0 Unpacking objects: 100% (21/21), done. 注意命令是 git clone 如果项目未初始化，那么下载的文件夹啥也没有。 npm 初始化 进入之前下载好的文件夹，比如我的 gitbook-plugin-mapull-default: 执行 npm init 里面的内容，把认知的内容填一下，其他默认，直接回车： E:\\temp\\gitbook-plugin-mapull-default>npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help json` for definitive documentation on these fields and exactly what they do. Use `npm install ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: (temp) version: (1.0.0) description: entry point: (index.js) test command: git repository: keywords: author: mapull license: (ISC) About to write to E:\\temp\\gitbook-plugin-mapull-default\\package.json: { \"name\": \"temp\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"author\": \"mapull\", \"license\": \"ISC\" } Is this OK? (yes) yes 有个关于 test 的错误，直接忽略它。 编写代码 正规插件的目录结构应该是这样的： .gitbook-plugin-mapull-default ├── assets | ├── plugin.css | └── plugin.js ├── index.js ├── package.json └── README.md 上面的内容，有些插件没有 css，则不需要 plugin.css文件，有些插件没有 js ，则不需要 plugin.js文件 package.json 文件 package.json是之前 npm 自动生成的文件。 请在 package.json 中加上需要的引擎版本： { \"version\": \"1.0.0\", \"engines\": { \"gitbook\": \">=3.0.0-pre.0\" } } README.md 文件 需要新建该文件，README.md 文件应该添加对于该插件的描述信息，说明该插件的用途，以及如何使用。 index.js 在 index.js文件中添加如下内容： module.exports = { website: { assets: './assets', js: [ 'mapull.js' ], css: [ 'mapull.css' ] } }; plugin.css css 文件没有特殊的要求，按照 css 的书写规范即可。 plugin.js 建议 plugin.js 有如下的格式，引入 gitbook 是最小化的要求。 require(['gitbook'], function(gitbook) { // 所有的代码写在这里 }); 如果代码中需要用到 jQuery ，那么 require(['gitbook', 'jQuery'], function(gitbook, $) { // 所有的代码写在这里 }); 上传代码 代码写完以后，提交到 github： 提交代码： git commit 提交到远程： git push 如果提交成功，可以在 github 看到刚才的代码， gitbook-plugin-mapull-default 发布插件 npm 创建账号 在 npmjs 官网注册一个账号。 发布到 npm 在刚才执行 npm init的文件夹，执行 npm publish. [!WARNING|style:flat|label:注意|iconVisibility:hidden] 如果使用的淘宝的镜像源，是不能成功的，因为淘宝源不接受代码(只读)，它只从中央仓库同步代码。 推荐使用 cnpm 代替 npm, 而不是直接修改镜像源，参见淘宝 NPM 镜像。 第一次推送，需要先登录,控制台会提示输入用户名，密码信息。 npm publish E:\\workspace\\gitbook-plugin-mapull-default>npm publish npm notice npm notice package: gitbook-plugin-mapull-default@1.0.0 npm notice === Tarball Contents === npm notice 0 _layouts/assets/mapull.css npm notice 1.6kB _layouts/website/page.html npm notice 60B index.js npm notice 181B _layouts/assets/mapull.js npm notice 623B package.json npm notice 86B README.md npm notice === Tarball Details === npm notice name: gitbook-plugin-mapull-default npm notice version: 1.0.0 npm notice package size: 1.4 kB npm notice unpacked size: 2.6 kB npm notice shasum: cc787a8e62dce65fa9886c1949ad0bd18999d850 npm notice integrity: sha512-ESeQqOPjxVcai[...]Quhsjs9BSRKvg== npm notice total files: 6 npm notice + gitbook-plugin-mapull-default@1.0.0 推送以后，可以在 npmjs 官网 找到推送的插件。 此时，淘宝镜像源还没有，需要等待至少 10 分钟才能看到。 推送注意 确保插件可用，因为 npm 官网对一个插件，只能发一个相同的版本。 npm ERR! code E403 npm ERR! 403 403 Forbidden - PUT https://registry.npmjs.org/gitbook-plugin-mapull-default - You cannot publish over the previously published versions: 1.0.0. 再次发布插件时，需要修改 package.json 中的版本号， 即 version 值 免费用户，每 24 小时，只能发布一次，发布失误，就得等到第二天。 npm ERR! code E403 npm ERR! 403 403 Forbidden - PUT https://registry.npmjs.org/gitbook-plugin-mapull-default - gitbook-plugin-mapull-default cannot be republished until 24 hours have passed. Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/theme/":{"url":"custom/theme/","title":"主题","keywords":"","body":"主题 虽然 gitbook 默认的主题已经非常不错，但是，还有一些非常值得推荐的主题，用户可以通过在 NPM 上搜索 gitbook-theme 来查找主题插件。 目前 GitBook 提供了三类文档： Book 文档、API 文档、FAQ 文档。 我们常用的就是 Book 文档模式，如果我们需要使用 API 文档模式或者 FAQ 文档模式，只需引入文档对应的主题插件即可，下面我们介绍与这三类文档相关的主题插件。 这里将分别介绍几种主题插件的使用方法，抛砖引玉！ Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/theme/default.html":{"url":"custom/theme/default.html","title":"theme-default","summary":"演示 使用 gitbook theme-default 主题，默认的 gitbook 主题是黑白的","keywords":"","body":"theme-default theme-default 是默认的 Book 主题。 将 showLevel 设为 true， 就可以显示标题前面的数字索引，默认不显示。 { \"theme-default\": { \"showLevel\": true } } 演示平台 从当前页面的左上角下拉菜单中，选择对应的 default 版本 直接访问 在线示例 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/theme/api.html":{"url":"custom/theme/api.html","title":"theme-api 插件","summary":"演示使用 gitbook theme-api 主题，可以编写 API 文档，API 平台","keywords":"","body":"theme-api 插件 GitBook 主题：同样可以编写 API 文档，只需要引入 theme-api 插件 [!NOTE|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-theme-api https://github.com/GitbookIO/theme-api { \"plugins\": [\"theme-api\"], \"pluginsConfig\": { \"theme-api\": { \"theme\": \"dark\" } } } 引入之后会替换默认的样式。 使用 GitBook 的 API 文档模式时也可以使用插件，但是因为大部分插件可能针对写书的模式，所以有可能会出现不兼容的现象。 API文档的语法也很简单，因为主要是针对方法的，所以以方法为基本单位，通过下面的语法来定义一个方法 {% method %} 内容区 {% endmethod %} 在内容区里面，通过 {% sample lang=\"lang\" %} 来定义一个针对特定语言的演示。 通过 {% common %} 标识所有语言共同的部分。 演示平台 从当前页面的左上角下拉菜单中，选择对应的 api 版本 直接访问 在线示例 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/theme/fexa.html":{"url":"custom/theme/fexa.html","title":"theme-fexa 网站主题","summary":"演示 使用 gitbook theme-fexa 主题，一个类似网站效果的主题，对 Gitbook 原始风格有较大改变。","keywords":"","body":"theme-fexa 插件 GitBook 主题：fexa 是一个类似网站效果的主题。对 Gitbook 原始风格有较大改变。 [!NOTE|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-theme-fexa https://github.com/tonyyls/gitbook-plugin-theme-fexa 演示平台 从当前页面的左上角下拉菜单中，选择对应的 fexa 版本 直接访问 在线示例 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/theme/comscore.html":{"url":"custom/theme/comscore.html","title":"theme-comscore 彩色主题","summary":"演示 使用 gitbook theme-ComScore 主题，默认的 gitbook 主题是黑白的，改主题是彩色主题","keywords":"","body":"ComScore 主题 ComScore 是一个彩色主题，默认的 gitbook 主题是黑白的，也就是标题和正文都是黑色的，而 ComScore 可以为各级标题添加不同的颜色，更容易区分各级标题。 [!NOTE|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm i gitbook-plugin-theme-comscore { \"plugins\": [ \"theme-comscore\" ] } 演示平台 当前版本基于 comscore 主题 从当前页面的左上角下拉菜单中，选择对应的 comscore 版本 直接访问 在线示例 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/theme/faq.html":{"url":"custom/theme/faq.html","title":"FAQ 主题","summary":"演示 使用 gitbook theme-faq 主题，主要用来制作知识库或者帮助中心","keywords":"","body":"FAQ 主题 GitBook 主题：theme-faq 插件主要用来制作知识库或者帮助中心，GitBook 的 帮助中心 就是使用的该主题。 FAQ 是英文 Frequently Asked Questions 的缩写，中文意思就是“经常问到的问题”，或者更通俗地叫做“常见问题解答”。 [!NOTE|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-theme-fexa https://github.com/GitbookIO/theme-faq 为了支持中文搜索我们需要引入 search-plus 包。 { \"plugins\": [ \"theme-faq\", \"-lunr\", \"search-plus\" ] } 定制化 这个 FAQ 如果不加以改造，界面是比较丑陋的。 扩展的功能需要修改代码才能达到效果。 演示平台 从当前页面的左上角下拉菜单中，选择对应的 faq 版本 直接访问 在线示例 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"custom/theme/custom.html":{"url":"custom/theme/custom.html","title":"开发主题","summary":"使用 gitbook 开发主题，自定义主题，并发布主题","keywords":"","body":"开发主题 GitBook 默认使用 theme-default 主题，从 3.0.0 版本开始，可以自定义主题。 注意：自定义主题可能会导致某些插件不能正常工作。 主题的结构 主题是包含模板和资源文件的插件。可以选择只对单独的模板进行替换，因为主题都从默认主题扩展。 文件夹 说明 _layouts 包含所有模板的主文件夹 _layouts/website/page.html 普通页面的模板 _layouts/ebook/page.html 在电子书生成期间正常页面的模板(PDF，ePub，Mobi) 自定义主题 你可以直接从已有的主题创建模板。模板将首先在书的 _layouts 文件夹中解析，然后在已安装的插件/主题中解析。 简单的扩展 如果你自定义主题的目的只是让不同的文档和书有不同的显示，你可以使用模板语法： {％extends template.self％} {％block body％} {{super()}} ...这将被添加到“body”块 {％endblock％} 完整的例子可参考主题 API。 发布主题 主题以theme-前缀插件方式发布，可参考(插件文档)。例如，主题 test 将从 theme-test 插件加载，然后从 gitbook-plugin-theme-test NPM 包加载。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"extend/export.html":{"url":"extend/export.html","title":"输入/输出","summary":"gitbook 导出多种格式，如导出 pdf,导出 ePub,导出 Mobi 格式，Word docx 格式转换为 md 格式","keywords":"","body":"输入/输出 GitBook 可以把你的书本生成为不同格式的电子书。 输出格式 静态网站 这是默认的格式。它生成一个可交互的静态站点。 PDF (Portable Document Format) Portable Document Format (PDF) 是一以一种独立于软硬件，以及操作系统的方式来保存文档的格式。这是一种很普遍的格式。文件拥有的扩展名为 .pdf。 ePub (electrontic publication) EPUB (electrontic publicaton的简称，有时称它为 epub) 是一个由国际电子出版物论坛 (IDPF) 制定的免费并开放的电子书标准。文件拥有的扩展名为 .epub，苹果和谷歌的设备支持 ePub 格式。 Mobi (Mobipocket) Mobipocket 电子书格式是基于使用 XHTML 的开放电子书标准，并且可以包含 JavaScript 以及框架。亚马逊的设备 (Kindle) 支持这样的格式。 gitbook-convert gitbook-convert 可以把 docx、xml、html、odt 文档转成 GitBook 安装命令 $ npm install gitbook-convert -g 测试是不是安装成功。 D:\\gitbook>gitbook-convert Usage: gitbook-convert [options] Options: -V, --version output the version number -t, --document-title [string] Name used for the main document title (default: null) -a, --assets-dir [dirname] Name of the documents assets export directory (default: \"assets\") -m, --max-depth [integer] Maximum title depth to use to split your original document into sub-chapters (default: 2) -p, --prefix Prefix filenames by an incremental counter -d, --debug Log stack trace when an error occurs -h, --help output usage information gitbook-convert accepts the following formats: .docx: Microsoft Office Open XML Document .html: HyperText Markup Language .xml: Docbook Markup Language .odt: OpenOffice / Open Document Format After converting your document, the corresponding GitBook files will be placed in ./export//. 转换文件 $ gitbook-convert [options] [export-directory] 举个例子 D:\\gitbook>gitbook-convert settings.docx [log]: \"Creating export folder...\" [log]: \"Creating assets folder...\" [log]: \"Creating summary file...\" [log]: \"Done.\" [log]: \"Converting docx file to HTML...\" [log]: \"Done.\" [log]: \"Extracting footnotes...\" [log]: \"Parsing chapters...\" [log]: \"Processing chapters...\" [log]: \"Converting chapters to markdown...\" [log]: \"Writing summary...\" [log]: \"Writing file: D:\\\\gitbook\\\\export\\\\README.md\" [log]: \"Done.\" 看一下生成的 D:\\\\gitbook\\\\export 中的文件： . |- assert |- README.md |- SUMMARY.md 所有的数据都解析到了 REAMDE.md 中。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"extend/pdf.html":{"url":"extend/pdf.html","title":"PDF","summary":"使用 gitbook 生成 PDF教程，解决 gitbook 无法生成 pdf，ebook-convert 找不到原因，默认 gitbook 无法生成 pdf","keywords":"","body":"PDF 新版的 gitbook，官方已经不支持导出 pdf 等电子书格式，官方的解读如下： PDF and other ebook formats exports ？ The new version of GitBook no longer supports exporting to PDF and other ebooks format. A lot of rich-content does not translate well from the Web to PDF. GitBook will expose a developer API for people to consume and extend their content. It is not excluded that someone build a PDF export tool using the API, but it will not be officially supported. See the section about offline access if this is the part you cared about. 安装 ebook-convert 生成电子书 (epub, mobi, pdf) 时需要 ebook-convert。 比较常用的 convert 有 calibre。 安装 calibre calibre 官网: https://calibre-ebook.com 下载地址：http://calibre-ebook.com/download Linux sudo apt install calibre Mac 下载 Calibre.app。移动 calibre.app 到你的应用程序文件夹中后，给 ebook-convert 工具创建一个符号链接。 $ sudo ln -s ~/Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin 你可以把 /usr/bin 替换为 $PATH 中的任何的文件夹。 Windows 安装 calibre-4.5.0.msi 到本机环境，如果选择了默认配置，不需要配置环境变量。 ebook-convert –version D:\\gitbook>ebook-convert --version ebook-convert.exe (calibre 4.5.0) Created by: Kovid Goyal 有输出版本证明安装成功。 配置 pdf 可以使用 book.json 中的一组选项来定制 PDF 输出： 参数名 描述 pdf.pageNumbers 将页码添加到每个页面的底部（默认为 true） pdf.fontSize 基本字体大小（默认是 12） pdf.fontFamily 基本字体样式（默认是 Arial） pdf.paperSize 页面尺寸，选项有： 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter' （默认值是 a4） pdf.margin.top 上边界（默认值是 56） pdf.margin.bottom 下边界（默认值是 56） pdf.margin.right 右边界（默认值是 62） pdf.margin.left 左边界（默认值是 62） 生成电子书 gitbook pdf .pdf 你当前看的文档是利用 GitBook 解析的基于 Markdown 文件的 html 版本，\"下载 pdf\" 按钮提供的 pdf 也是由 GitBook 生成的。 电子书 https://docs.poppy-project.org/en/# 左上角有一个下面 pdf 的标志。 D:\\gitbook>gitbook pdf info: 24 plugins are installed info: 7 explicitly listed info: loading plugin \"splitter\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 80 pages info: found 89 asset files warn: \"this.generator\" property is deprecated, use \"this.output.name\" instead warn: \"navigation\" property is deprecated warn: \"book\" property is deprecated, use \"this\" directly instead warn: \"options\" property is deprecated, use config.get(key) instead info: >> generation finished with success in 50.6s ! info: >> 1 file(s) generated 然后在当前文件下，就会发现新的文件生成： book.pdf Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "},"others/book.html":{"url":"others/book.html","title":"book.json","summary":"book.json 文件格式演示，一般的 book.json 文件教程，gitbook 的 book.json 例子，常见的 gitbook 配置文件举例","keywords":"","body":"Gitbook book.json 配置文件 本站的 book.json 配置文件 { \"title\": \"GitBook 简明教程\", \"language\": \"zh-hans\", \"author\": \"码谱\", \"links\": { \"sidebar\": { \"码谱\": \"http://www.mapull.com\" } }, \"plugins\": [ \"-search\", \"-lunr\", \"-sharing\", \"-livereload\", \"github\", \"donate\", \"chart\", \"todo\", \"graph\", \"puml\", \"katex\", \"code\", \"ace\", \"sitemap-general\", \"mermaid-gb3\", \"include-csv\", \"flexible-alerts\", \"chapter-fold\", \"anchor-navigation-ex\", \"theme-comscore\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"showGoTop\": true }, \"sitemap-general\": { \"prefix\": \"https://www.mapull.com/gitbook/comscore/\" }, \"my-toolbar\": { \"buttons\": [ { \"label\": \"下载 PDF\", \"icon\": \"fa fa-file-pdf-o\", \"url\": \"https://www.mapull.com/gitbook/comscore/book.pdf\", \"position\": \"left\", \"text\": \"下载 PDF\", \"target\": \"_blank\" } ] }, \"donate\": { \"wechat\": \"https://www.mapull.com/logo/mapull-qr.png\", \"button\": \"反馈\", \"wechatText\": \"微信扫码\" }, \"versions\": { \"options\": [ { \"value\": \"https://www.mapull.com/gitbook/api/\", \"text\": \"Theme API\" }, { \"value\": \"https://www.mapull.com/gitbook/comscore/\", \"text\": \"Theme comscore\", \"selected\": true } ] }, \"github\": { \"url\": \"https://gitee.com/mapull/gitbook-guide\" }, \"edit-link\": { \"base\": \"https://gitee.com/mapull/gitbook-guide\", \"label\": \"Edit This Page\" } }, \"variables\": { \"mapull\": \"码谱，让编程更容易。\", \"ides\": [{\"name\": \"Eclipse\"}, {\"name\": \"IntelliJ IDEA\"}, {\"name\": \"Visual Studio Code\"}] }, \"structure\": { \"readme\": \"home.md\" } } Copyright & Copy zha0cai该文件修订时间： 2024-03-29 11:23:30 "},"others/example.html":{"url":"others/example.html","title":"示例网站","summary":"Gitbook 搭建的网站举例，多语言的 gitbook站点例子。","keywords":"","body":"示例网站 yodaos 多语言 电子书：https://yodaos-project.github.io/yoda-book/ Enspiral 英语 电子书：http://handbook.enspiral.com/guides/content-dusting.html redux 中文 电子书：http://cn.redux.js.org/ poppy 多语言 电子书：https://docs.poppy-project.org/ Git使用文档 多语言 源代码：https://github.com/progit/progit 电子书：https://git-scm.com/book/en/v2 Gitbook 教程 经典原版：https://www.mapull.com/gitbook/default/ 彩色版：简介 · Gitbook 指南 帮助中心版：https://www.mapull.com/gitbook/faq/ API 版：https://www.mapull.com/gitbook/api/ 站点版：https://www.mapull.com/gitbook/fexa/ Copyright & Copy zha0cai该文件修订时间： 2024-03-29 11:23:29 "},"others/post.html":{"url":"others/post.html","title":"后记","summary":"gitbook 生成的 _book 目录如何使用到其他服务器，gitbook 小白教程完整版。","keywords":"","body":"后记 大部分的资料都是将最后的电子书托管于 gitbook.com 但是目前，gitbook.com 在国内无法正常注册，因此这条路是走不通了。 最后通过 gitbook 生成的文件是 html/css/js 加一些辅助文件如图片等的文件夹。 如果能有一台云服务器，在上面启动一个 web 服务(nginx)，完全可以自主控制电子书。 Copyright & Copy zha0cai该文件修订时间： 2024-03-29 11:23:45 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"猫 在我这就是 zha0cai 🐱. javascript 互联网上最流行的脚本语言 Java 一门面向对象编程语言 由 Sun 公司于 1995年5月 推出 Programming Language 计算机编程语言 min.js 压缩文件的后缀名 Copyright & Copy zha0cai该文件修订时间： 2024-03-29 11:23:32 "},"custom/plugin/other/chart.html":{"url":"custom/plugin/other/chart.html","title":"Chart","summary":"gitbook 使用 `C3.js` 或者 `Highcharts` 绘制图形 插件, gitbook-plugin-chart 使用教程","keywords":"","body":"Chart Gitbook 插件：使用 C3.js 或者 Highcharts 绘制图形。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-chart https://github.com/csbun/gitbook-plugin-chart C3.js：https://github.com/c3js/c3 highcharts：https://github.com/highcharts/highcharts { \"plugins\": [ \"chart\" ], \"pluginsConfig\": { \"chart\": { \"type\": \"c3\" } } } type 可以是 c3 或者 highcharts, 默认是 c3. 举几个例子 JSON 格式的数据 { \"data\": { \"type\": \"bar\", \"columns\": [ [\"data1\", 30, 200, 100, 400, 150, 250], [\"data2\", 50, 20, 10, 40, 15, 25] ], \"axes\": { \"data2\": \"y2\" } }, \"axis\": { \"y2\": { \"show\": true } } } 效果如下所示： c3.generate({\"bindto\":\"#plugin-chart-1\", \"data\": { \"type\": \"bar\", \"columns\": [ [\"data1\", 30, 200, 100, 400, 150, 250], [\"data2\", 50, 20, 10, 40, 15, 25] ], \"axes\": { \"data2\": \"y2\" } }, \"axis\": { \"y2\": { \"show\": true } } }); YAML 格式的数据 data: columns: - [data1, 30, 200, 100, 400, 150, 250] - [data2, 50, 20, 10, 40, 15, 25] axes: data2: y2 axis: y2: show: true 效果如下所示： c3.generate({\"bindto\":\"#plugin-chart-2\",\"data\":{\"columns\":[[\"data1\",30,200,100,400,150,250],[\"data2\",50,20,10,40,15,25]],\"axes\":{\"data2\":\"y2\"}},\"axis\":{\"y2\":{\"show\":true}}}); [!WARNING|style:callout|iconVisibility:hidden|label:注意] 如果页面内容显示不完整，请 F5 刷新当前页面 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 16:49:57 "},"custom/plugin/other/graph.html":{"url":"custom/plugin/other/graph.html","title":"Graph","summary":"gitbook 绘制数学函数图 插件, gitbook-plugin-graph 使用教程","keywords":"","body":"Graph Gitbook 插件：使用 function-plot 绘制数学函数图。 [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-graph https://github.com/cjam/gitbook-plugin-graph function-plot：https://mauriciopoppe.github.io/function-plot/ { \"plugins\": [ \"graph\" ] } 使用语法 下面是一个示例，需要注意的是 graph 块中的内容必须是合法的 JSON 格式。 { \"title\": \"1/x * cos(1/x)\", \"grid\": true, \"xAxis\": { \"domain\": [0.01, 1] }, \"yAxis\": { \"domain\": [-100, 100] }, \"data\": [{ \"fn\": \"1/x * cos(1/x)\", \"closed\": true }] } 效果如下所示： functionPlot({\"title\":\"1/x * cos(1/x)\",\"grid\":true,\"xAxis\":{\"domain\":[0.01,1]},\"yAxis\":{\"domain\":[-100,100]},\"data\":[{\"fn\":\"1/x * cos(1/x)\",\"closed\":true}],\"target\":\"#plugin-graph-0\"}); { \"title\":\"cos(2*PI*x/2)*(1+0.5cos(2*PI*x/100))\", \"grid\":true, \"xAxis\": { \"label\":\"Sample\", \"domain\": [0,300] }, \"yAxis\": { \"label\":\"Amplitude\", \"domain\": [-1.5,1.5] }, \"data\": [ { \"fn\": \"cos(2*PI*x/2)*(1+0.5cos(2*PI*x/100))\"}, { \"fn\": \"(1+0.5cos(2*PI*x/100))\"} ] } functionPlot({\"title\":\"cos(2*PI*x/2)*(1+0.5cos(2*PI*x/100))\",\"grid\":true,\"xAxis\":{\"label\":\"Mapull\",\"domain\":[0,300]},\"yAxis\":{\"label\":\"Amplitude\",\"domain\":[-1.5,1.5]},\"data\":[{\"fn\":\"cos(2*PI*x/2)*(1+0.5cos(2*PI*x/100))\"},{\"fn\":\"(1+0.5cos(2*PI*x/100))\"}],\"target\":\"#plugin-graph-1\"}); [!WARNING|style:callout|iconVisibility:hidden|label:注意] 如果页面内容显示不完整，请 F5 刷新当前页面 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 16:50:21 "},"custom/plugin/other/math.html":{"url":"custom/plugin/other/math.html","title":"数学公式 & Tex","summary":"gitbook 数学公式 & Tex 插件, gitbook-plugin-katex，gitbook-plugin-mathjax 使用教程，插件在线演示","keywords":"","body":"数学公式 & Tex GitBook 插件： 可以使用插件支持数学公式和 Tex。 当前有两个官方的插件用来显示数学公式：mathjax 和 katex。 数学插件 katex [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-katex https://github.com/GitbookIO/plugin-katex { \"plugins\": [\"katex\"] } 使用语法 文字与公式混合显示 数学公式：{% math %}\\int_{-\\infty}^\\infty g(x) dx{% endmath %} 数学公式：∫−∞∞g(x)dx\\int_{-\\infty}^\\infty g(x) dx∫​−∞​∞​​g(x)dx 一行显示公式 {% math %} \\int_{-\\infty}^\\infty g(x) dx {% endmath %} 页面的显示效果： ∫−∞∞g(x)dx\\int_{-\\infty}^\\infty g(x) dx∫​−∞​∞​​g(x)dx 更复杂一点的用法 When {% math %}a \\ne 0{% endmath %} there are two solutions to {% math %}(ax^2 + bx + c = 0){% endmath %} and they are {% math %}x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.{% endmath %} 页面的显示效果： When a≠0a \\ne 0a≠0 there are two solutions to (ax2+bx+c=0)(ax^2 + bx + c = 0)(ax​2​​+bx+c=0) and they are x=−b±b2−4ac2a.x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.x=​2a​​−b±√​b​2​​−4ac​​​​​. 数学插件 mathjax [!TIP|style:flat|iconVisibility:hidden|labelVisibility:hidden] npm install gitbook-plugin-mathjax https://github.com/GitbookIO/plugin-mathjax { \"plugins\": [\"mathjax\"] } 使用语法 两个数学公式插件的使用语法几乎一致。 MathJax 和 KaTeX 的区别 mathjax 和 katex 插件是 Tex 公式绘制的不同实现，它们基于各自的开源库：KaTeX 和 MathJax 。 MathJax 支持整个 Tex 语法，但是在制作电子书版本时不是很完美。 KaTex 在所有格式（网页和电子书）的绘制上都很完美，但是还不支持 所有的语法。 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 17:08:04 "},"config/conref.html":{"url":"config/conref.html","title":"内容引用","summary":"使用 gitbook 来引用其他文件的内容，扩展 gitbook 中的内容，gitbook 导入本地或互联网上的资源，","keywords":"","body":"内容引用 内容参考 (conref) 是便于用来重复使用其他文件和书本内容。 内联引用 有时，在写某一节的内容的时候，会希望读者参见另外一个章节的内容。 可以通过 markdown 的链接语法引导读者到该章节。 例如 回到基础配置，点击 [这里](./basic.md) 回到基础配置，点击 这里 点击 [这里](./basic.html)，回到基础配置 点击 这里，回到基础配置 这两种写法，都能回到首页，但是建议使用 md 文件引用，而不是 html 引用。 gitbook 会自动将 md 引用关联起来，这样无论转换为何种格式，都能使引用生效。 注意 回到基础配置，[绝对路径](/config/basic.md) 回到基础配置，绝对路径 回到基础配置，[相对路径](./basic.md) 回到基础配置，相对路径 导入本地文件 使用 include 标签导入其他文件的内容真的很简单： {% include \"./footer.md\" %} 从其他书本导入文件 GitBook 同样能处理使用了 git 协议的 include 路径： {% include \"git+https://github.com/GitbookIO/documentation.git/README.md#0.0.1\" %} git 的 url 格式是： git+https://user@hostname/project/blah.git/file#commit-ish 真实的 git url 应该以 .git 结尾，导入的文件名从 .git 之后的 url 片段提取。 commit-ish 可以是任何可以作为 git checkout 参数的标签，sha，或分支。默认是 master。 举个例子 我在 footer.md 文档中的内容： --- Copyright © 2021-2022 zha0cai 在本页面使用下面的代码引入后： {% include \"./footer.md\" %} 显示如下内容： Copyright © 2019-2020 码谱 Copyright & Copy zha0cai该文件修订时间： 2024-03-28 15:32:43 "}}